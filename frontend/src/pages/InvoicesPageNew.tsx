import React, { useState, useEffect } from 'react';
import { DataTable, type Column } from '../components/ui/data-table';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from '../components/ui/dialog';
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from '../components/ui/alert-dialog';
import { Button } from '../components/ui/button';
import { Input } from '../components/ui/input';
import { Label } from '../components/ui/label';
import { Checkbox } from '../components/ui/checkbox';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../components/ui/select';
import { SelectWithQuickAdd } from '../components/SelectWithQuickAdd';
import { invoicesApi, ordersApi, counterpartiesApi, concreteMarksApi, driversApi, vehiclesApi, warehousesApi, companiesApi, materialsApi, api } from '../services/api';
import type { Invoice, Order, Counterparty, ConcreteMark, Driver, Vehicle, Warehouse, Company, Material } from '../types';
import { InvoiceType } from '../types';
import { useNotifications } from '../hooks/useNotifications';
import { useApiData } from '../hooks/useApiData';
import { useAuthStore } from '../stores/authStore';
import { openIn2GIS, openInYandex, openInGoogle } from '../utils/mapUtils';

interface InvoicesPageNewProps {
  type?: InvoiceType; // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –Ω–∞–∫–ª–∞–¥–Ω–æ–π (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —ç—Ç–æ—Ç —Ç–∏–ø)
  title?: string; // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
}

export const InvoicesPageNew: React.FC<InvoicesPageNewProps> = ({ type: filterType, title }) => {
  const [modalOpen, setModalOpen] = useState(false);
  const [confirmOpen, setConfirmOpen] = useState(false);
  const [editingInvoice, setEditingInvoice] = useState<Invoice | null>(null);
  const [deleteId, setDeleteId] = useState<number | null>(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedType, setSelectedType] = useState<InvoiceType | 'ALL'>(filterType || 'ALL');
  const [loadingScale, setLoadingScale] = useState(false);
  const [lastWeighInfo, setLastWeighInfo] = useState<{ type: 'brutto' | 'tara'; weight: number; timestamp: string; photoUrl?: string } | null>(null);
  const [liveWeight, setLiveWeight] = useState<{ weight: number; connected: boolean } | null>(null);
  const [printInvoice, setPrintInvoice] = useState<Invoice | null>(null);

  const { user } = useAuthStore();

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–∞ –ø–æ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏
  const getFieldClass = (value: any, additionalClasses: string = '') => {
    const baseClass = additionalClasses ? `${additionalClasses} ` : '';
    if (value && value !== '' && value !== '0') {
      return `${baseClass}bg-blue-50 border-blue-200`;
    }
    return `${baseClass}bg-white`;
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  const { data: invoices, loading: invoicesLoading, refetch } = useApiData<Invoice>({
    apiCall: () => {
      // –î–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º /invoices/my, –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö - /invoices
      const isDriver = user?.role === 'DRIVER';
      const apiCall = isDriver ? invoicesApi.getMy : invoicesApi.getAll;
      
      const params: any = {};
      if (filterType) {
        params.type = filterType;
      }
      if (searchQuery) {
        params.search = searchQuery;
      }
      
      console.log('üîç –ü–æ–∏—Å–∫ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', params);
      
      return apiCall(params).then(res => res.data);
    },
    dependencies: [filterType, user?.role, searchQuery]
  });

  const { data: orders, refetch: refetchOrders } = useApiData<Order>({
    apiCall: () => ordersApi.getAll(),
    dependencies: []
  });

  const { data: counterparties, refetch: refetchCounterparties } = useApiData<Counterparty>({
    apiCall: () => counterpartiesApi.getAll(),
    dependencies: []
  });

  const { data: concreteMarks, loading: concreteMarksLoading, refetch: refetchConcreteMarks } = useApiData<ConcreteMark>({
    apiCall: async () => {
      try {
        console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Ä–∫–∏ –±–µ—Ç–æ–Ω–∞...');
        const response = await concreteMarksApi.getAll();
        console.log('üìã –û—Ç–≤–µ—Ç API –º–∞—Ä–æ–∫ –±–µ—Ç–æ–Ω–∞:', response);
        console.log('üì¶ –î–∞–Ω–Ω—ã–µ –º–∞—Ä–æ–∫ –±–µ—Ç–æ–Ω–∞:', response.data.data);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ, —á—Ç–æ –æ–∂–∏–¥–∞–µ—Ç useApiData
        return {
          data: response.data.data // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö
        };
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ä–æ–∫ –±–µ—Ç–æ–Ω–∞:', error);
        throw error;
      }
    },
    dependencies: []
  });

  const { data: drivers, refetch: refetchDrivers } = useApiData<Driver>({
    apiCall: () => driversApi.getAll(),
    dependencies: []
  });

  const { data: vehicles, refetch: refetchVehicles } = useApiData<Vehicle>({
    apiCall: () => vehiclesApi.getAll(),
    dependencies: []
  });

  const { data: warehouses, refetch: refetchWarehouses } = useApiData<Warehouse>({
    apiCall: () => warehousesApi.getAll(),
    dependencies: []
  });

  const { data: companies, refetch: refetchCompanies } = useApiData<Company>({
    apiCall: () => companiesApi.getAll(),
    dependencies: []
  });

  const { data: materials, refetch: refetchMaterials } = useApiData<Material>({
    apiCall: () => materialsApi.getAll(),
    dependencies: []
  });

  const [formData, setFormData] = useState({
    type: 'EXPENSE' as InvoiceType,
    orderId: '',
    customerId: '',
    supplierId: '',
    concreteMarkId: '',
    quantityM3: '',
    unitPrice: '',
    totalPrice: '',
    driverId: '',
    vehicleId: '',
    warehouseId: '',
    companyId: '',
    materialId: '',
    grossWeightKg: '',
    grossWeightAt: '',
    tareWeightKg: '',
    tareWeightAt: '',
    netWeightKg: '',
    moisturePercent: '',
    correctedWeightKg: '',
    deliveryDate: '',
    deliveryAddress: '',
    coordinates: '',
    notes: '',
    contractNumber: '–ë–µ–∑ –¥–æ–≥–æ–≤–æ—Ä–∞', // –ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "–ë–µ–∑ –¥–æ–≥–æ–≤–æ—Ä–∞")
    sealNumbers: '', // –ù–æ–º–µ—Ä –ø–ª–æ–º–±—ã
    departedPlantAt: '', // –í—Ä–µ–º—è —É–±—ã—Ç–∏—è —Å –∑–∞–≤–æ–¥–∞ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è)
    arrivedSiteAt: '', // –í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è –Ω–∞ –æ–±—ä–µ–∫—Ç
    departedSiteAt: '', // –í—Ä–µ–º—è —É–±—ã—Ç–∏—è —Å –æ–±—ä–µ–∫—Ç–∞
    concreteMarkMaterials: [] as Array<{materialId: string, quantityPerM3: string, unit: string}>, // –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –º–∞—Ä–∫–∏ –±–µ—Ç–æ–Ω–∞
  });

  const [formErrors, setFormErrors] = useState<Record<string, string>>({});
  const [showPriceFields, setShowPriceFields] = useState(false); // –ì–∞–ª–æ—á–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–ª–µ–π —Ü–µ–Ω
  const [showVatField, setShowVatField] = useState(false); // –ì–∞–ª–æ—á–∫–∞ –¥–ª—è –ù–î–°
  const [vatRate, setVatRate] = useState('12'); // –°—Ç–∞–≤–∫–∞ –ù–î–° –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 12%)

  // –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∑–∞–∫–∞–∑–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ orderId –¥–ª—è —Ä–∞—Å—Ö–æ–¥–Ω—ã—Ö –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö
  useEffect(() => {
    if (formData.type === InvoiceType.EXPENSE && formData.orderId && orders && !editingInvoice) {
      const selectedOrder = orders.find(order => order.id.toString() === formData.orderId);
      if (selectedOrder) {
        console.log('üîÑ –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–∑ –∑–∞–∫–∞–∑–∞:', selectedOrder);
        setFormData(prev => {
          const newFormData = {
            ...prev,
            customerId: selectedOrder.customerId.toString(),
            concreteMarkId: selectedOrder.concreteMarkId.toString(),
            // deliveryDate –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π, –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞—Ç–æ–π –∏–∑ –∑–∞–∫–∞–∑–∞
            deliveryAddress: selectedOrder.deliveryAddress,
            coordinates: selectedOrder.coordinates || '',
            notes: selectedOrder.notes || '',
          };
          
          // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –º–∞—Ä–∫–∏ –±–µ—Ç–æ–Ω–∞ –∏–∑ –∑–∞–∫–∞–∑–∞
          if (selectedOrder.concreteMarkId && concreteMarks) {
            console.log('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –º–∞—Ä–∫–∏ –±–µ—Ç–æ–Ω–∞ –∏–∑ –∑–∞–∫–∞–∑–∞...');
            const selectedMark = concreteMarks.find(m => m.id.toString() === selectedOrder.concreteMarkId.toString());
            console.log('üéØ –ù–∞–π–¥–µ–Ω–Ω–∞—è –º–∞—Ä–∫–∞ –∏–∑ –∑–∞–∫–∞–∑–∞:', selectedMark);
            
            if (selectedMark && selectedMark.materials) {
              console.log('üì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –º–∞—Ä–∫–∏ –∏–∑ –∑–∞–∫–∞–∑–∞:', selectedMark.materials);
              
              const newMaterials = selectedMark.materials.map(cm => ({
                materialId: cm.materialId.toString(),
                quantityPerM3: cm.quantityPerM3.toString(),
                unit: cm.unit
              }));
              
              (newFormData as any).concreteMarkMaterials = newMaterials;
              console.log('‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –º–∞—Ä–∫–∏ –±–µ—Ç–æ–Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∑–∞–∫–∞–∑–∞:', newMaterials);
            }
          }
          
          return newFormData;
        });
      }
    }
  }, [formData.orderId, formData.type, orders, editingInvoice, concreteMarks]);

  // –ü—É–ª–ª–∏–Ω–≥ —Ç–µ–∫—É—â–µ–≥–æ –≤–µ—Å–∞ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–∫–ª–∞–¥–∞
  useEffect(() => {
    console.log('üîÑ useEffect –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Å–∞ –∑–∞–ø—É—â–µ–Ω');
    console.log('üì¶ formData.warehouseId:', formData.warehouseId);
    console.log('üì¶ warehouses:', warehouses);
    
    if (!formData.warehouseId) {
      console.log('‚ö†Ô∏è –°–∫–ª–∞–¥ –Ω–µ –≤—ã–±—Ä–∞–Ω, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É–ª–ª–∏–Ω–≥ –≤–µ—Å–∞');
      setLiveWeight(null);
      return;
    }
    const selected = warehouses?.find(w => w.id.toString() === formData.warehouseId) as any;
    console.log('üì¶ –í—ã–±—Ä–∞–Ω–Ω—ã–π —Å–∫–ª–∞–¥:', selected);
    
    if (!selected || !selected.hasScales || !selected.scaleIpAddress || !selected.scaleApiKey) {
      console.log('‚ö†Ô∏è –°–∫–ª–∞–¥ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –≤–µ—Å–æ–≤:', {
        hasScales: selected?.hasScales,
        scaleIpAddress: selected?.scaleIpAddress,
        scaleApiKey: selected?.scaleApiKey ? '***–µ—Å—Ç—å***' : '–Ω–µ—Ç'
      });
      setLiveWeight(null);
      return;
    }
    
    console.log('‚úÖ –°–∫–ª–∞–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –≤–µ—Å–æ–≤, –∑–∞–ø—É—Å–∫–∞–µ–º –ø—É–ª–ª–∏–Ω–≥...');
    let timer: any;
    const fetchWeight = async () => {
      try {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL: –µ—Å–ª–∏ IP —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª (http/https), –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å, –∏–Ω–∞—á–µ —Å—Ç—Ä–æ–∏–º
        const baseUrl = selected.scaleIpAddress.startsWith('http') 
          ? selected.scaleIpAddress 
          : `http://${selected.scaleIpAddress}:5055`;
        
        console.log(`‚öñÔ∏è –ó–∞–ø—Ä–æ—Å —Ç–µ–∫—É—â–µ–≥–æ –≤–µ—Å–∞: ${baseUrl}/api/weight`);
        
        const resp = await fetch(`${baseUrl}/api/weight`, {
          headers: { 
            'X-API-Key': selected.scaleApiKey,
            'ngrok-skip-browser-warning': 'true' // –û–±—Ö–æ–¥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è Ngrok
          },
          signal: AbortSignal.timeout(3000) // –£–≤–µ–ª–∏—á–∏–ª–∏ —Ç–∞–π–º–∞—É—Ç –¥–æ 3 —Å–µ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        });
        
        if (!resp.ok) {
          throw new Error('–í–µ—Å—ã –Ω–µ –æ—Ç–≤–µ—á–∞—é—Ç');
        }
        
        const data = await resp.json();
        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω –≤–µ—Å: ${data.weight} –∫–≥, –ø–æ–¥–∫–ª—é—á–µ–Ω–æ: ${data.connected}`);
        setLiveWeight({ weight: data.weight ?? 0, connected: !!data.connected });
      } catch (e: any) {
        // –¢–∏—Ö–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–µ–∑ —Å–ø–∞–º–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Å–∞: ${e.message}`);
        setLiveWeight({ weight: 0, connected: false });
      }
    };
    fetchWeight();
    timer = setInterval(fetchWeight, 2000); // –£–≤–µ–ª–∏—á–∏–ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ 2 —Å–µ–∫
    return () => clearInterval(timer);
  }, [formData.warehouseId, warehouses]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π (polling –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥)
  useEffect(() => {
    if (user?.role === 'DRIVER') {
      const interval = setInterval(() => {
        refetch();
      }, 30000); // 30 —Å–µ–∫—É–Ω–¥

      return () => clearInterval(interval);
    }
  }, [user?.role, refetch]);

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤
  const calculateNetWeight = (grossWeight: string, tareWeight: string): string => {
    const gross = parseFloat(grossWeight);
    const tare = parseFloat(tareWeight);
    
    if (!isNaN(gross) && !isNaN(tare) && gross >= tare) {
      return (gross - tare).toFixed(1);
    }
    return '';
  };

  const calculateCorrectedWeight = (netWeight: string, moisturePercent: string): string => {
    const net = parseFloat(netWeight);
    const moisture = parseFloat(moisturePercent);
    
    if (!isNaN(net) && net > 0 && !isNaN(moisture) && moisture >= 0) {
      // –§–æ—Ä–º—É–ª–∞: –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–µ—Å = –ù–µ—Ç—Ç–æ - (–ù–µ—Ç—Ç–æ * –í–ª–∞–∂–Ω–æ—Å—Ç—å/100)
      const corrected = net - (net * moisture / 100);
      return corrected.toFixed(1);
    }
    return '';
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤
  const handleGrossWeightChange = (value: string) => {
    setFormData({ ...formData, grossWeightKg: value });
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–µ—Ç—Ç–æ –≤–µ—Å
    if (value && formData.tareWeightKg) {
      const netWeight = calculateNetWeight(value, formData.tareWeightKg);
      if (netWeight) {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–µ—Å —Å —É—á–µ—Ç–æ–º –≤–ª–∞–∂–Ω–æ—Å—Ç–∏
        const correctedWeight = calculateCorrectedWeight(netWeight, formData.moisturePercent);
        setFormData(prev => ({ 
          ...prev, 
          grossWeightKg: value, 
          netWeightKg: netWeight,
          correctedWeightKg: correctedWeight 
        }));
        return;
      }
    }
    setFormData({ ...formData, grossWeightKg: value });
  };

  const handleTareWeightChange = (value: string) => {
    setFormData({ ...formData, tareWeightKg: value });
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–µ—Ç—Ç–æ –≤–µ—Å
    if (formData.grossWeightKg && value) {
      const netWeight = calculateNetWeight(formData.grossWeightKg, value);
      if (netWeight) {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–µ—Å —Å —É—á–µ—Ç–æ–º –≤–ª–∞–∂–Ω–æ—Å—Ç–∏
        const correctedWeight = calculateCorrectedWeight(netWeight, formData.moisturePercent);
        setFormData(prev => ({ 
          ...prev, 
          tareWeightKg: value, 
          netWeightKg: netWeight,
          correctedWeightKg: correctedWeight 
        }));
        return;
      }
    }
    setFormData({ ...formData, tareWeightKg: value });
  };

  const handleMoisturePercentChange = (value: string) => {
    setFormData({ ...formData, moisturePercent: value });
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–µ—Å
    if (formData.netWeightKg && value) {
      const correctedWeight = calculateCorrectedWeight(formData.netWeightKg, value);
      if (correctedWeight) {
        setFormData(prev => ({ ...prev, correctedWeightKg: correctedWeight }));
        return;
      }
    }
    setFormData({ ...formData, moisturePercent: value });
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Å–∫–ª–∞–¥–∞
  const handleWarehouseChange = (value: string) => {
    setFormData({ ...formData, warehouseId: value });
    
    // –î–ª—è –ø—Ä–∏—Ö–æ–¥–Ω—ã—Ö –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –∞–¥—Ä–µ—Å –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–∫–ª–∞–¥–∞
    if (formData.type === InvoiceType.INCOME && value && warehouses) {
      const selectedWarehouse = warehouses.find(warehouse => warehouse.id.toString() === value);
      if (selectedWarehouse) {
        setFormData(prev => ({
          ...prev,
          warehouseId: value,
          deliveryAddress: selectedWarehouse.address,
          coordinates: selectedWarehouse.latitude && selectedWarehouse.longitude 
            ? `${selectedWarehouse.latitude}, ${selectedWarehouse.longitude}` 
            : ''
        }));
        return;
      }
    }
    setFormData({ ...formData, warehouseId: value });
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∑–∞–∫–∞–∑–∞ (–¥–ª—è —Ä–∞—Å—Ö–æ–¥–Ω—ã—Ö –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö)
  const handleOrderChange = (value: string) => {
    // –ü—Ä–æ—Å—Ç–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º orderId, –æ—Å—Ç–∞–ª—å–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—Å—è —á–µ—Ä–µ–∑ useEffect
    setFormData(prev => ({ ...prev, orderId: value, quantityM3: '' }));
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
    if (refetchOrders) {
      refetchOrders();
    }
  };

  // –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Å –±—Ä—É—Ç—Ç–æ —Å –≤–µ—Å–æ–≤ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–∫–ª–∞–¥–∞
  const handleGetBruttoFromScale = async () => {
    if (!formData.warehouseId) {
      error('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ª–∏ –≤–µ—Å—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–∫–ª–∞–¥–∞
    const selectedWarehouse = warehouses?.find(w => w.id.toString() === formData.warehouseId);
    const warehouse = selectedWarehouse as any; // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π ScaleBridge
    if (!warehouse?.hasScales || !warehouse?.scaleIpAddress || !warehouse?.scaleApiKey) {
      error('–î–ª—è —ç—Ç–æ–≥–æ —Å–∫–ª–∞–¥–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤–µ—Å—ã ScaleBridge. –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –≤–µ—Å—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Å–∫–ª–∞–¥–∞.');
      return;
    }

    console.log('üîç –§–∏–∫—Å–∞—Ü–∏—è –≤–µ—Å–∞ –ë–†–£–¢–¢–û –¥–ª—è —Å–∫–ª–∞–¥–∞:', formData.warehouseId);
    console.log('üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ—Å–æ–≤:', {
      hasScales: warehouse.hasScales,
      scaleIpAddress: warehouse.scaleIpAddress,
      scaleApiKey: warehouse.scaleApiKey ? '***–Ω–∞—Å—Ç—Ä–æ–µ–Ω***' : '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
    });
    
    setLoadingScale(true);
    
    try {
      console.log('üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è –ë–†–£–¢–¢–û...');
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º /weigh –¥–ª—è —Ñ–∏–∫—Å–∞—Ü–∏–∏ –≤–µ—Å–∞ —Å —Ñ–æ—Ç–æ
      const response = await api.post(`/scale/${formData.warehouseId}/weigh`, {
        action: 'brutto',
        orderId: formData.orderId ? parseInt(formData.orderId) : undefined
      });
      console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API:', response.data);
      
      if (response.data && response.data.weight !== undefined) {
        const bruttoWeight = response.data.weight.toString();
        console.log('‚öñÔ∏è –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω –≤–µ—Å –ë–†–£–¢–¢–û:', bruttoWeight);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–µ—Ç—Ç–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞—Ä–∞
        const netWeight = formData.tareWeightKg ? calculateNetWeight(bruttoWeight, formData.tareWeightKg) : '';
        console.log(`üßÆ –†–∞—Å—á–µ—Ç –ù–ï–¢–¢–û: –ë—Ä—É—Ç—Ç–æ=${bruttoWeight}, –¢–∞—Ä–∞=${formData.tareWeightKg}, –ù–µ—Ç—Ç–æ=${netWeight}`);
        
        setFormData(prev => ({ 
          ...prev, 
          grossWeightKg: bruttoWeight, 
          grossWeightAt: response.data.timestamp || new Date().toISOString(),
          netWeightKg: netWeight || prev.netWeightKg
        }));
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏–∏
        setLastWeighInfo({
          type: 'brutto',
          weight: response.data.weight,
          timestamp: response.data.timestamp || new Date().toISOString(),
          photoUrl: response.data.photoUrl
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ
        if (response.data.photoUrl) {
          success(`–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω –≤–µ—Å –ë–†–£–¢–¢–û: ${response.data.weight} –∫–≥\n–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ`);
        } else {
          success(`–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω –≤–µ—Å –ë–†–£–¢–¢–û: ${response.data.weight} –∫–≥`);
        }
      } else {
        console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:', response.data);
        error(response.data.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Å —Å –≤–µ—Å–æ–≤');
      }
    } catch (err: any) {
      console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–∫—Å–∞—Ü–∏–∏ –≤–µ—Å–∞ –ë–†–£–¢–¢–û:', err);
      console.error('üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', err.response?.data);
      error(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≤–µ—Å–∞–º: ${err.response?.data?.message || err.message}`);
    } finally {
      setLoadingScale(false);
    }
  };

  // –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Å —Ç–∞—Ä—ã —Å –≤–µ—Å–æ–≤ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–∫–ª–∞–¥–∞
  const handleGetTareFromScale = async () => {
    if (!formData.warehouseId) {
      error('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ª–∏ –≤–µ—Å—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–∫–ª–∞–¥–∞
    const selectedWarehouse = warehouses?.find(w => w.id.toString() === formData.warehouseId);
    const warehouse = selectedWarehouse as any; // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π ScaleBridge
    if (!warehouse?.hasScales || !warehouse?.scaleIpAddress || !warehouse?.scaleApiKey) {
      error('–î–ª—è —ç—Ç–æ–≥–æ —Å–∫–ª–∞–¥–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤–µ—Å—ã ScaleBridge. –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –≤–µ—Å—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Å–∫–ª–∞–¥–∞.');
      return;
    }

    console.log('üîç –§–∏–∫—Å–∞—Ü–∏—è –≤–µ—Å–∞ –¢–ê–†–ê –¥–ª—è —Å–∫–ª–∞–¥–∞:', formData.warehouseId);
    setLoadingScale(true);
    
    try {
      console.log('üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è –¢–ê–†–ê...');
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º /weigh –¥–ª—è —Ñ–∏–∫—Å–∞—Ü–∏–∏ –≤–µ—Å–∞ —Å —Ñ–æ—Ç–æ
      const response = await api.post(`/scale/${formData.warehouseId}/weigh`, {
        action: 'tara',
        orderId: formData.orderId ? parseInt(formData.orderId) : undefined
      });
      console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API –¥–ª—è –¢–ê–†–ê:', response.data);
      
      if (response.data && response.data.weight !== undefined) {
        const tareWeight = response.data.weight.toString();
        console.log('‚öñÔ∏è –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω –≤–µ—Å –¢–ê–†–ê:', tareWeight);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–µ—Ç—Ç–æ –µ—Å–ª–∏ –µ—Å—Ç—å –±—Ä—É—Ç—Ç–æ
        const netWeight = formData.grossWeightKg ? calculateNetWeight(formData.grossWeightKg, tareWeight) : '';
        console.log(`üßÆ –†–∞—Å—á–µ—Ç –ù–ï–¢–¢–û: –ë—Ä—É—Ç—Ç–æ=${formData.grossWeightKg}, –¢–∞—Ä–∞=${tareWeight}, –ù–µ—Ç—Ç–æ=${netWeight}`);
        
        setFormData(prev => ({ 
          ...prev, 
          tareWeightKg: tareWeight, 
          tareWeightAt: response.data.timestamp || new Date().toISOString(),
          netWeightKg: netWeight || prev.netWeightKg
        }));
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏–∏
        setLastWeighInfo({
          type: 'tara',
          weight: response.data.weight,
          timestamp: response.data.timestamp || new Date().toISOString(),
          photoUrl: response.data.photoUrl
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ
        if (response.data.photoUrl) {
          success(`–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω –≤–µ—Å –¢–ê–†–ê: ${response.data.weight} –∫–≥\n–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ`);
        } else {
          success(`–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω –≤–µ—Å –¢–ê–†–ê: ${response.data.weight} –∫–≥`);
        }
      } else {
        console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –¢–ê–†–ê:', response.data);
        error(response.data.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Å —Å –≤–µ—Å–æ–≤');
      }
    } catch (err: any) {
      console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–∫—Å–∞—Ü–∏–∏ –≤–µ—Å–∞ –¢–ê–†–ê:', err);
      console.error('üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', err.response?.data);
      error(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≤–µ—Å–∞–º: ${err.response?.data?.message || err.message}`);
    } finally {
      setLoadingScale(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∏–ø–∞ –Ω–∞–∫–ª–∞–¥–Ω–æ–π
  const handleInvoiceTypeChange = (value: InvoiceType) => {
    // –î–ª—è –ø—Ä–∏—Ö–æ–¥–Ω—ã—Ö –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    if (value === InvoiceType.INCOME) {
      const now = new Date();
      
      // –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DDTHH:MM
      const year = now.getFullYear();
      const month = String(now.getMonth() + 1).padStart(2, '0');
      const day = String(now.getDate()).padStart(2, '0');
      const hours = String(now.getHours()).padStart(2, '0');
      const minutes = String(now.getMinutes()).padStart(2, '0');
      
      const currentDateTime = `${year}-${month}-${day}T${hours}:${minutes}`;
      
      console.log('üïê –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞:', {
        localDateTime: currentDateTime,
        fullDate: now.toLocaleString('ru-RU'),
        isoString: now.toISOString(),
        timezone: Intl.DateTimeFormat().resolvedOptions().timeZone
      });
      
      setFormData(prev => ({
        ...prev,
        type: value,
        deliveryDate: currentDateTime
      }));
    } else {
      // –î–ª—è —Ä–∞—Å—Ö–æ–¥–Ω—ã—Ö –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö –æ—á–∏—â–∞–µ–º –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏
      setFormData(prev => ({
        ...prev,
        type: value,
        deliveryDate: ''
      }));
    }
  };

  const invoiceTypeLabels = {
    [InvoiceType.EXPENSE]: '–†–∞—Å—Ö–æ–¥–Ω–∞—è',
    [InvoiceType.INCOME]: '–ü—Ä–∏—Ö–æ–¥–Ω–∞—è',
  };

  const { success, error } = useNotifications();

  const columns: Column<Invoice>[] = [
    { id: 'invoiceNumber', label: '–ù–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π', minWidth: 120 },
    { id: 'type', label: '–¢–∏–ø', minWidth: 100, render: (value) => invoiceTypeLabels[value as InvoiceType] },
    { id: 'customer', label: '–ö–ª–∏–µ–Ω—Ç/–ü–æ—Å—Ç–∞–≤—â–∏–∫', minWidth: 150, render: (_value, row) => row.customer?.name || row.supplier?.name || '-' },
    { id: 'date', label: '–î–∞—Ç–∞', minWidth: 100, render: (value) => new Date(value).toLocaleDateString('ru-RU') },
    { id: 'quantityM3', label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (–º¬≥)', minWidth: 120, render: (value) => value ? `${value} –º¬≥` : '-' },
    { id: 'grossWeightKg', label: '–í–µ—Å (–∫–≥)', minWidth: 100, render: (_value, row) => {
        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–µ—Å > –Ω–µ—Ç—Ç–æ –≤–µ—Å > –±—Ä—É—Ç—Ç–æ –≤–µ—Å
        const correctedWeight = row.correctedWeightKg;
        const netWeight = row.netWeightKg;
        const grossWeight = row.grossWeightKg;
        
        if (correctedWeight && correctedWeight > 0) {
          return `${correctedWeight} –∫–≥ (—Å–∫–æ—Ä—Ä.)`;
        } else if (netWeight && netWeight > 0) {
          return `${netWeight} –∫–≥ (–Ω–µ—Ç—Ç–æ)`;
        } else if (grossWeight && grossWeight > 0) {
          return `${grossWeight} –∫–≥ (–±—Ä—É—Ç—Ç–æ)`;
        } else {
          return '-';
        }
      }
    },
    { id: 'status', label: '–°—Ç–∞—Ç—É—Å', minWidth: 100, render: (value) => value || '–ê–∫—Ç–∏–≤–Ω–∞—è' },
    // –ö–æ–ª–æ–Ω–∫–∞ —Å –∞–¥—Ä–µ—Å–æ–º –∏ –∫–∞—Ä—Ç–∞–º–∏ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞—Å—Ö–æ–¥–Ω—ã—Ö –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö)
    ...(user?.role === 'DRIVER' ? [{
      id: 'date' as keyof Invoice, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø–æ–ª–µ
      label: '–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏',
      minWidth: 250,
      render: (_value: any, row: Invoice) => {
        if (row.type !== InvoiceType.EXPENSE) return null;
        
        const invoiceWithOrder = row as any;
        const coordinates = invoiceWithOrder.order?.coordinates;
        const address = invoiceWithOrder.order?.deliveryAddress || invoiceWithOrder.departureAddress || '-';
        
        return (
          <div className="flex flex-col gap-1">
            <div className="text-sm">{address}</div>
            {coordinates && (
              <div className="flex gap-1">
                <Button
                  size="sm"
                  variant="outline"
                  onClick={() => openIn2GIS(coordinates)}
                  className="text-xs px-2 py-1 h-auto"
                >
                  2–ì–ò–°
                </Button>
                <Button
                  size="sm"
                  variant="outline"
                  onClick={() => openInYandex(coordinates)}
                  className="text-xs px-2 py-1 h-auto"
                >
                  –Ø–Ω–¥–µ–∫—Å
                </Button>
                <Button
                  size="sm"
                  variant="outline"
                  onClick={() => openInGoogle(coordinates)}
                  className="text-xs px-2 py-1 h-auto"
                >
                  Google
                </Button>
              </div>
            )}
          </div>
        );
      }
    }] : []),
    // –ö–æ–ª–æ–Ω–∫–∞ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π –≤–æ–¥–∏—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞—Å—Ö–æ–¥–Ω—ã—Ö –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö)
    ...(user?.role === 'DRIVER' ? [{
      id: 'id' as keyof Invoice, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø–æ–ª–µ id
      label: '–î–µ–π—Å—Ç–≤–∏—è –≤–æ–¥–∏—Ç–µ–ª—è',
      minWidth: 200,
      render: (_value: any, row: Invoice) => {
        if (row.type !== InvoiceType.EXPENSE) return null;
        
        const invoiceWithTimes = row as any; // Type assertion –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
        
        return (
          <div className="flex gap-2">
            {!invoiceWithTimes.arrivedSiteAt ? (
              <Button
                size="sm"
                variant="outline"
                onClick={() => updateInvoiceTime(row.id, 'arrivedSiteAt')}
                className="text-xs"
              >
                –ü—Ä–∏–±—ã–ª –Ω–∞ –æ–±—ä–µ–∫—Ç
              </Button>
            ) : (
              <span className="text-xs text-gray-700 font-semibold">
                –ü—Ä–∏–±—ã–ª: {new Date(invoiceWithTimes.arrivedSiteAt).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}
              </span>
            )}
            
            {invoiceWithTimes.arrivedSiteAt && !invoiceWithTimes.departedSiteAt ? (
              <Button
                size="sm"
                variant="outline"
                onClick={() => updateInvoiceTime(row.id, 'departedSiteAt')}
                className="text-xs"
              >
                –í—ã–µ—Ö–∞–ª —Å –æ–±—ä–µ–∫—Ç–∞
              </Button>
            ) : invoiceWithTimes.departedSiteAt ? (
              <span className="text-xs text-gray-700 font-semibold">
                –í—ã–µ—Ö–∞–ª: {new Date(invoiceWithTimes.departedSiteAt).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}
              </span>
            ) : null}
          </div>
        );
      }
    }] : []),
  ];

  const validateForm = (): boolean => {
    const errors: Record<string, string> = {};
    
    if (formData.type === InvoiceType.EXPENSE) {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è —Ä–∞—Å—Ö–æ–¥–Ω–æ–π –Ω–∞–∫–ª–∞–¥–Ω–æ–π
      if (!formData.customerId) errors.customerId = '–ö–ª–∏–µ–Ω—Ç –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
      if (!formData.concreteMarkId) errors.concreteMarkId = '–ú–∞—Ä–∫–∞ –±–µ—Ç–æ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞';
      if (!formData.quantityM3) errors.quantityM3 = '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
      // –ù–æ–≤—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
      if (!formData.contractNumber || formData.contractNumber.trim() === '') errors.contractNumber = '–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
      if (!formData.sealNumbers || formData.sealNumbers.trim() === '') errors.sealNumbers = '–ù–æ–º–µ—Ä –ø–ª–æ–º–±—ã –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
      // –¶–µ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≥–∞–ª–æ—á–∫–∞ "–£–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—ã" –≤–∫–ª—é—á–µ–Ω–∞
      if (showPriceFields && !formData.unitPrice) errors.unitPrice = '–¶–µ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞';
    } else if (formData.type === InvoiceType.INCOME) {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è –ø—Ä–∏—Ö–æ–¥–Ω–æ–π –Ω–∞–∫–ª–∞–¥–Ω–æ–π
      // –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: —Ç–æ–ª—å–∫–æ –ë—Ä—É—Ç—Ç–æ –∏ –°–∫–ª–∞–¥
      if (!formData.grossWeightKg) errors.grossWeightKg = '–ë—Ä—É—Ç—Ç–æ –≤–µ—Å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
      if (!formData.warehouseId) errors.warehouseId = '–°–∫–ª–∞–¥ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
      
      // –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã (supplierId, materialId, driverId, vehicleId, tareWeightKg, netWeightKg)
    }
    
    // –û–±—â–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞—Å—Ö–æ–¥–Ω—ã—Ö –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö
    if (formData.type === InvoiceType.EXPENSE) {
      if (!formData.driverId) errors.driverId = '–í–æ–¥–∏—Ç–µ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
      if (!formData.vehicleId) errors.vehicleId = '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
    }
    
    setFormErrors(errors);
    return Object.keys(errors).length === 0;
  };

  const resetForm = () => {
    setFormData({
      type: 'EXPENSE' as InvoiceType,
      orderId: '',
      customerId: '',
      supplierId: '',
      concreteMarkId: '',
      quantityM3: '',
      unitPrice: '',
      totalPrice: '',
      driverId: '',
      vehicleId: '',
      warehouseId: '',
      companyId: '',
      materialId: '',
      grossWeightKg: '',
      grossWeightAt: '',
      tareWeightKg: '',
      tareWeightAt: '',
      netWeightKg: '',
      moisturePercent: '',
      correctedWeightKg: '',
      deliveryDate: '',
      deliveryAddress: '',
      coordinates: '',
      notes: '',
      contractNumber: '–ë–µ–∑ –¥–æ–≥–æ–≤–æ—Ä–∞',
      sealNumbers: '',
      departedPlantAt: new Date().toISOString().slice(0, 16), // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
      arrivedSiteAt: '',
      departedSiteAt: '',
      concreteMarkMaterials: [],
    });
    setLastWeighInfo(null); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏–∏
    setFormErrors({});
    setEditingInvoice(null);
    setModalOpen(false);
  };

  const openCreateModal = () => {
    resetForm();
    setShowPriceFields(false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–∞–ª–æ—á–∫—É —Ü–µ–Ω
    setShowVatField(false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–∞–ª–æ—á–∫—É –ù–î–°
    setVatRate('12'); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É –ù–î–° –Ω–∞ 12%
    
    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–ø –Ω–∞–∫–ª–∞–¥–Ω–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ —Ç–∏–ø –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const defaultType = selectedType !== 'ALL' ? selectedType : 'EXPENSE';
    
    setFormData({
      type: defaultType,
      orderId: '',
      customerId: '',
      supplierId: '',
      concreteMarkId: '',
      quantityM3: '',
      unitPrice: '',
      totalPrice: '',
      driverId: '',
      vehicleId: '',
      warehouseId: '',
      companyId: '',
      materialId: '',
      grossWeightKg: '',
      grossWeightAt: '',
      tareWeightKg: '',
      tareWeightAt: '',
      netWeightKg: '',
      moisturePercent: '',
      correctedWeightKg: '',
      deliveryDate: defaultType === InvoiceType.INCOME ? new Date().toISOString().slice(0, 16) : new Date().toISOString().slice(0, 10), // –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö
      deliveryAddress: '',
      coordinates: '',
      notes: '',
      contractNumber: '–ë–µ–∑ –¥–æ–≥–æ–≤–æ—Ä–∞',
      sealNumbers: '',
      departedPlantAt: new Date().toISOString().slice(0, 16),
      arrivedSiteAt: '',
      departedSiteAt: '',
      concreteMarkMaterials: [],
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–æ—Ä–º—ã –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (refetchOrders) {
      refetchOrders();
    }
    
    setModalOpen(true);
  };

  const handleEdit = (invoice: Invoice) => {
    setEditingInvoice(invoice);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ü–µ–Ω—ã - –µ—Å–ª–∏ –µ—Å—Ç—å, –≤–∫–ª—é—á–∞–µ–º –≥–∞–ª–æ—á–∫—É
    const hasPrices = !!(invoice.basePricePerM3 || invoice.salePricePerM3);
    setShowPriceFields(hasPrices);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ù–î–° - –µ—Å–ª–∏ –µ—Å—Ç—å, –≤–∫–ª—é—á–∞–µ–º –≥–∞–ª–æ—á–∫—É –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–≤–∫—É
    const hasVat = !!(invoice as any).vatRate;
    setShowVatField(hasVat);
    if (hasVat) {
      setVatRate(((invoice as any).vatRate || 12).toString());
    }
    
    setFormData({
      type: invoice.type,
      orderId: invoice.orderId?.toString() || '',
      customerId: invoice.customerId?.toString() || '',
      supplierId: invoice.supplierId?.toString() || '',
      concreteMarkId: invoice.concreteMarkId?.toString() || '',
      quantityM3: invoice.quantityM3?.toString() || '',
      unitPrice: invoice.basePricePerM3?.toString() || '',
      totalPrice: invoice.salePricePerM3?.toString() || '',
      driverId: invoice.driverId?.toString() || '',
      vehicleId: invoice.vehicleId?.toString() || '',
      warehouseId: invoice.warehouseId?.toString() || '',
      companyId: invoice.companyId?.toString() || '',
      materialId: invoice.materialId?.toString() || '',
      grossWeightKg: invoice.grossWeightKg?.toString() || '',
      grossWeightAt: '', // –í—Ä–µ–º—è –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è –±—Ä—É—Ç—Ç–æ
      tareWeightKg: invoice.tareWeightKg?.toString() || '',
      tareWeightAt: '', // –í—Ä–µ–º—è –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è —Ç–∞—Ä—ã
      netWeightKg: invoice.netWeightKg?.toString() || '',
      moisturePercent: invoice.moisturePercent?.toString() || '',
      correctedWeightKg: invoice.correctedWeightKg?.toString() || '',
      // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –¥–ª—è datetime-local (–Ω—É–∂–µ–Ω —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DDTHH:MM)
      deliveryDate: invoice.date ? (invoice.type === InvoiceType.INCOME ? new Date(invoice.date).toISOString().slice(0, 16) : new Date(invoice.date).toISOString().slice(0, 10)) : '',
      deliveryAddress: invoice.departureAddress || '',
      coordinates: invoice.latitudeTo && invoice.longitudeTo ? `${invoice.latitudeTo}, ${invoice.longitudeTo}` : '',
      notes: '',
      contractNumber: (invoice as any).contractNumber || '–ë–µ–∑ –¥–æ–≥–æ–≤–æ—Ä–∞',
      sealNumbers: (invoice.sealNumbers && invoice.sealNumbers.length > 0) ? invoice.sealNumbers[0] : '',
      departedPlantAt: (invoice as any).departedPlantAt ? new Date((invoice as any).departedPlantAt).toISOString().slice(0, 16) : '',
      arrivedSiteAt: (invoice as any).arrivedSiteAt ? new Date((invoice as any).arrivedSiteAt).toISOString().slice(0, 16) : '',
      departedSiteAt: (invoice as any).departedSiteAt ? new Date((invoice as any).departedSiteAt).toISOString().slice(0, 16) : '',
      concreteMarkMaterials: [],
    });
    setModalOpen(true);
  };

  const handleSubmit = async () => {
    if (!validateForm()) return;

    try {
      const data: any = {
        type: formData.type,
        warehouseId: formData.warehouseId ? parseInt(formData.warehouseId) : undefined,
        createdById: 1, // –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º ID 1
      };

      if (formData.type === InvoiceType.EXPENSE) {
        // –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—Ö–æ–¥–Ω–æ–π –Ω–∞–∫–ª–∞–¥–Ω–æ–π
        data.customerId = parseInt(formData.customerId);
        data.concreteMarkId = parseInt(formData.concreteMarkId);
        data.quantityM3 = parseFloat(formData.quantityM3);
        
        // –¶–µ–Ω—ã –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≥–∞–ª–æ—á–∫–∞ —Å—Ç–æ–∏—Ç
        if (showPriceFields) {
          if (formData.unitPrice) data.basePricePerM3 = parseFloat(formData.unitPrice);
          if (formData.totalPrice) data.salePricePerM3 = parseFloat(formData.totalPrice);
          
          // –ù–î–° –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≥–∞–ª–æ—á–∫–∞ –ù–î–° —Å—Ç–æ–∏—Ç
          if (showVatField && vatRate) {
            data.vatRate = parseFloat(vatRate);
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –ù–î–°
            if (data.basePricePerM3 && data.quantityM3) {
              data.vatAmount = (data.basePricePerM3 * data.quantityM3 * parseFloat(vatRate)) / 100;
            }
          }
        }
        
        if (formData.orderId) data.orderId = parseInt(formData.orderId);
        if (formData.driverId) data.driverId = parseInt(formData.driverId);
        if (formData.vehicleId) data.vehicleId = parseInt(formData.vehicleId);
        if (formData.companyId) data.companyId = parseInt(formData.companyId);
        
        // –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è —Ä–∞—Å—Ö–æ–¥–Ω—ã—Ö –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö
        if (formData.contractNumber) data.contractNumber = formData.contractNumber;
        if (formData.sealNumbers) data.sealNumbers = formData.sealNumbers;
        if (formData.departedPlantAt) data.departedPlantAt = new Date(formData.departedPlantAt);
        if (formData.arrivedSiteAt) data.arrivedSiteAt = new Date(formData.arrivedSiteAt);
        if (formData.departedSiteAt) data.departedSiteAt = new Date(formData.departedSiteAt);
      } else if (formData.type === InvoiceType.INCOME) {
        // –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–∏—Ö–æ–¥–Ω–æ–π –Ω–∞–∫–ª–∞–¥–Ω–æ–π
        // –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: —Ç–æ–ª—å–∫–æ –ë—Ä—É—Ç—Ç–æ –∏ –°–∫–ª–∞–¥
        data.grossWeightKg = parseFloat(formData.grossWeightKg);
        
        // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
        if (formData.supplierId) {
          data.customerId = parseInt(formData.supplierId); // –î–ª—è –ø—Ä–∏—Ö–æ–¥–Ω—ã—Ö –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö customerId = supplierId
          data.supplierId = parseInt(formData.supplierId);
        }
        if (formData.companyId) data.companyId = parseInt(formData.companyId);
        if (formData.materialId) data.materialId = parseInt(formData.materialId);
        
        if (formData.tareWeightKg) data.tareWeightKg = parseFloat(formData.tareWeightKg);
        if (formData.tareWeightAt) data.tareWeightAt = new Date(formData.tareWeightAt);
        if (formData.netWeightKg) data.netWeightKg = parseFloat(formData.netWeightKg);
        if (formData.moisturePercent) data.moisturePercent = parseFloat(formData.moisturePercent);
        if (formData.correctedWeightKg) data.correctedWeightKg = parseFloat(formData.correctedWeightKg);
        if (formData.grossWeightAt) data.grossWeightAt = new Date(formData.grossWeightAt);
        
        // –í–æ–¥–∏—Ç–µ–ª—å –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã –¥–ª—è –ø—Ä–∏—Ö–æ–¥–Ω—ã—Ö –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö
        if (formData.driverId) data.driverId = parseInt(formData.driverId);
        if (formData.vehicleId) data.vehicleId = parseInt(formData.vehicleId);
      }

      if (formData.deliveryAddress) data.departureAddress = formData.deliveryAddress;
      if (formData.coordinates) {
        const [lat, lng] = formData.coordinates.split(',').map(coord => parseFloat(coord.trim()));
        if (!isNaN(lat) && !isNaN(lng)) {
          data.latitudeTo = lat;
          data.longitudeTo = lng;
        }
      }

      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–∫–ª–∞–¥–Ω–æ–π:', data);
      console.log('üìã –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:', formData);

      if (editingInvoice) {
        await invoicesApi.update(editingInvoice.id, data);
        success('–ù–∞–∫–ª–∞–¥–Ω–∞—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
      } else {
        await invoicesApi.create(data);
        success('–ù–∞–∫–ª–∞–¥–Ω–∞—è —Å–æ–∑–¥–∞–Ω–∞');
      }
      
      resetForm();
      refetch();
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–µ
      if (refetchOrders) {
        refetchOrders();
      }
    } catch (err: any) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞–∫–ª–∞–¥–Ω–æ–π:', err);
      console.error('üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', err.response?.data);
      console.error('üîç –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', err.response?.data);
      
      // –ï—Å–ª–∏ message - —ç—Ç–æ –º–∞—Å—Å–∏–≤, –≤—ã–≤–æ–¥–∏–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      const errorMessage = Array.isArray(err.response?.data?.message) 
        ? err.response.data.message.join('; ') 
        : err.response?.data?.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏';
      
      console.error('‚ùå –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö:', errorMessage);
      error(errorMessage);
    }
  };

  const handleDelete = async () => {
    if (!deleteId) return;
    
    try {
      await invoicesApi.delete(deleteId);
      success('–ù–∞–∫–ª–∞–¥–Ω–∞—è —É–¥–∞–ª–µ–Ω–∞');
      setDeleteId(null);
      setConfirmOpen(false);
      refetch();
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
      if (refetchOrders) {
        refetchOrders();
      }
    } catch (err: any) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞–∫–ª–∞–¥–Ω–æ–π:', err);
      error(err.response?.data?.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏');
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∫–ª–∞–¥–Ω–æ–π
  const handleCopy = async (invoice: Invoice) => {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –°–ù–ê–ß–ê–õ–ê –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (refetchOrders) {
      await refetchOrders();
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å orderId, –±–µ—Ä–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤
    if (invoice.orderId && orders) {
      const order = orders.find(o => o.id === invoice.orderId);
      
      if (order) {
        const newFormData = {
          type: invoice.type,
          orderId: invoice.orderId.toString(),
          customerId: order.customerId.toString(),
          supplierId: '',
          concreteMarkId: order.concreteMarkId.toString(),
          quantityM3: '', // –û—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
          unitPrice: invoice.basePricePerM3?.toString() || '',
          totalPrice: invoice.salePricePerM3?.toString() || '',
          driverId: invoice.driverId?.toString() || '',
          vehicleId: invoice.vehicleId?.toString() || '',
          warehouseId: invoice.warehouseId?.toString() || '',
          companyId: invoice.companyId?.toString() || '',
          materialId: '',
          grossWeightKg: '',
          grossWeightAt: '',
          tareWeightKg: '',
          tareWeightAt: '',
          netWeightKg: '',
          moisturePercent: '',
          correctedWeightKg: '',
          deliveryDate: invoice.type === InvoiceType.INCOME ? new Date().toISOString().slice(0, 16) : new Date().toISOString().slice(0, 10), // –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏
          deliveryAddress: order.deliveryAddress || '',
          coordinates: order.coordinates || '',
          notes: order.notes || '',
          contractNumber: '–ë–µ–∑ –¥–æ–≥–æ–≤–æ—Ä–∞',
          sealNumbers: '',
          departedPlantAt: new Date().toISOString().slice(0, 16),
          arrivedSiteAt: '',
          departedSiteAt: '',
          concreteMarkMaterials: [],
        };
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –º–∞—Ä–∫–∏ –±–µ—Ç–æ–Ω–∞ –∏–∑ –∑–∞–∫–∞–∑–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏
        if (order.concreteMarkId && concreteMarks) {
          console.log('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –º–∞—Ä–∫–∏ –±–µ—Ç–æ–Ω–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–∑ –∑–∞–∫–∞–∑–∞...');
          const selectedMark = concreteMarks.find(m => m.id.toString() === order.concreteMarkId.toString());
          console.log('üéØ –ù–∞–π–¥–µ–Ω–Ω–∞—è –º–∞—Ä–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏:', selectedMark);
          
          if (selectedMark && selectedMark.materials) {
            console.log('üì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –º–∞—Ä–∫–∏ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏:', selectedMark.materials);
            
            const newMaterials = selectedMark.materials.map(cm => ({
              materialId: cm.materialId.toString(),
              quantityPerM3: cm.quantityPerM3.toString(),
              unit: cm.unit
            }));
            
            (newFormData as any).concreteMarkMaterials = newMaterials;
            console.log('‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –º–∞—Ä–∫–∏ –±–µ—Ç–æ–Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏:', newMaterials);
          }
        }
        
        setFormData(newFormData);
      } else {
        // –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ, –∫–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω–∞–∫–ª–∞–¥–Ω–æ–π
        const newFormData = {
          type: invoice.type,
          orderId: invoice.orderId?.toString() || '',
          customerId: invoice.customerId?.toString() || '',
          supplierId: '',
          concreteMarkId: invoice.concreteMarkId?.toString() || '',
          quantityM3: '',
          unitPrice: invoice.basePricePerM3?.toString() || '',
          totalPrice: invoice.salePricePerM3?.toString() || '',
          driverId: invoice.driverId?.toString() || '',
          vehicleId: invoice.vehicleId?.toString() || '',
          warehouseId: invoice.warehouseId?.toString() || '',
          companyId: invoice.companyId?.toString() || '',
          materialId: '',
          grossWeightKg: '',
          grossWeightAt: '',
          tareWeightKg: '',
          tareWeightAt: '',
          netWeightKg: '',
          moisturePercent: '',
          correctedWeightKg: '',
          deliveryDate: invoice.type === InvoiceType.INCOME ? new Date().toISOString().slice(0, 16) : new Date().toISOString().slice(0, 10), // –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏
          deliveryAddress: invoice.departureAddress || '',
          coordinates: '',
          notes: '',
          contractNumber: '–ë–µ–∑ –¥–æ–≥–æ–≤–æ—Ä–∞',
          sealNumbers: '',
          departedPlantAt: new Date().toISOString().slice(0, 16),
          arrivedSiteAt: '',
          departedSiteAt: '',
          concreteMarkMaterials: [],
        };
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –º–∞—Ä–∫–∏ –±–µ—Ç–æ–Ω–∞ –∏–∑ –Ω–∞–∫–ª–∞–¥–Ω–æ–π –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏
        if (invoice.concreteMarkId && concreteMarks) {
          console.log('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –º–∞—Ä–∫–∏ –±–µ—Ç–æ–Ω–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–∑ –Ω–∞–∫–ª–∞–¥–Ω–æ–π...');
          const selectedMark = concreteMarks.find(m => m.id.toString() === invoice.concreteMarkId?.toString());
          console.log('üéØ –ù–∞–π–¥–µ–Ω–Ω–∞—è –º–∞—Ä–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–∑ –Ω–∞–∫–ª–∞–¥–Ω–æ–π:', selectedMark);
          
          if (selectedMark && selectedMark.materials) {
            console.log('üì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –º–∞—Ä–∫–∏ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–∑ –Ω–∞–∫–ª–∞–¥–Ω–æ–π:', selectedMark.materials);
            
            const newMaterials = selectedMark.materials.map(cm => ({
              materialId: cm.materialId.toString(),
              quantityPerM3: cm.quantityPerM3.toString(),
              unit: cm.unit
            }));
            
            (newFormData as any).concreteMarkMaterials = newMaterials;
            console.log('‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –º–∞—Ä–∫–∏ –±–µ—Ç–æ–Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–∑ –Ω–∞–∫–ª–∞–¥–Ω–æ–π:', newMaterials);
          }
        }
        
        setFormData(newFormData);
      }
    } else {
      // –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–∫–∞–∑–∞, –∫–æ–ø–∏—Ä—É–µ–º –∏–∑ –Ω–∞–∫–ª–∞–¥–Ω–æ–π –∫–∞–∫ –µ—Å—Ç—å (–¥–ª—è –ø—Ä–∏—Ö–æ–¥–Ω—ã—Ö –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö)
      setFormData({
        type: invoice.type,
        orderId: '',
        customerId: invoice.customerId?.toString() || '',
        supplierId: invoice.supplierId?.toString() || '',
        concreteMarkId: invoice.concreteMarkId?.toString() || '',
        quantityM3: '',
        unitPrice: invoice.basePricePerM3?.toString() || '',
        totalPrice: invoice.salePricePerM3?.toString() || '',
        driverId: invoice.driverId?.toString() || '',
        vehicleId: invoice.vehicleId?.toString() || '',
        warehouseId: invoice.warehouseId?.toString() || '',
        companyId: invoice.companyId?.toString() || '',
        materialId: invoice.materialId?.toString() || '',
        grossWeightKg: invoice.grossWeightKg?.toString() || '',
        grossWeightAt: '',
        tareWeightKg: invoice.tareWeightKg?.toString() || '',
        tareWeightAt: '',
        netWeightKg: invoice.netWeightKg?.toString() || '',
        moisturePercent: invoice.moisturePercent?.toString() || '',
        correctedWeightKg: invoice.correctedWeightKg?.toString() || '',
        deliveryDate: new Date().toISOString().slice(0, 16), // –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏
        deliveryAddress: invoice.departureAddress || '',
        coordinates: '',
        notes: '',
        contractNumber: '–ë–µ–∑ –¥–æ–≥–æ–≤–æ—Ä–∞',
        sealNumbers: '',
        departedPlantAt: new Date().toISOString().slice(0, 16),
        arrivedSiteAt: '',
        departedSiteAt: '',
        concreteMarkMaterials: [],
      });
    }
    
    setEditingInvoice(null); // –≠—Ç–æ –Ω–æ–≤–∞—è –Ω–∞–∫–ª–∞–¥–Ω–∞—è, –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    setModalOpen(true);
    success('–î–∞–Ω–Ω—ã–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ –∑–∞–∫–∞–∑–∞. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ.');
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ –Ω–∞–∫–ª–∞–¥–Ω–æ–π (–¥–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π)
  const updateInvoiceTime = async (invoiceId: number, timeType: 'arrivedSiteAt' | 'departedSiteAt') => {
    try {
      if (timeType === 'arrivedSiteAt') {
        await api.patch(`/invoices/${invoiceId}/mark-arrived-at-site`, {
          latitude: 0, // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
          longitude: 0
        });
        success('–ü—Ä–∏–±—ã—Ç–∏–µ –Ω–∞ –æ–±—ä–µ–∫—Ç –æ—Ç–º–µ—á–µ–Ω–æ');
      } else if (timeType === 'departedSiteAt') {
        await api.patch(`/invoices/${invoiceId}/mark-departed-from-site`, {
          latitude: 0, // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
          longitude: 0
        });
        success('–í—ã–µ–∑–¥ —Å –æ–±—ä–µ–∫—Ç–∞ –æ—Ç–º–µ—á–µ–Ω');
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö
      refetch();
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏:', error);
      error(error.response?.data?.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏');
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –ø–µ—á–∞—Ç–∏ –Ω–∞–∫–ª–∞–¥–Ω–æ–π
  const handlePrint = (invoice: Invoice) => {
    setPrintInvoice(invoice);
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
    setTimeout(() => {
      window.print();
    }, 100);
  };

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ backend
  const filteredData = invoices || [];

  return (
    <div className="p-3 sm:p-6">
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3 mb-4 sm:mb-6">
        <h1 className="text-xl sm:text-2xl font-bold">{title || '–ù–∞–∫–ª–∞–¥–Ω—ã–µ'}</h1>
        <Button onClick={openCreateModal} className="w-full sm:w-auto text-sm sm:text-base bg-gray-800 hover:bg-gray-900">
          <span className="sm:inline">{filterType === InvoiceType.INCOME ? '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏—Ö–æ–¥–Ω—É—é' : filterType === InvoiceType.EXPENSE ? '–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥–Ω—É—é' : '–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–∫–ª–∞–¥–Ω—É—é'}</span>
        </Button>
      </div>

      <div className="mb-4 flex flex-col sm:flex-row gap-3 sm:gap-4 items-stretch sm:items-center">
        <Input
          placeholder="–ü–æ–∏—Å–∫..."
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
          className="w-full sm:max-w-md"
        />

        {!filterType && (
          <div className="flex flex-col sm:flex-row items-start sm:items-center gap-2">
            <Label htmlFor="typeFilter" className="text-sm font-medium whitespace-nowrap">
              –¢–∏–ø:
            </Label>
            <Select value={selectedType} onValueChange={(value: InvoiceType | 'ALL') => setSelectedType(value)}>
              <SelectTrigger className="w-full sm:w-48">
                <SelectValue />
              </SelectTrigger>
            <SelectContent>
              <SelectItem value="ALL">–í—Å–µ</SelectItem>
              <SelectItem value={InvoiceType.INCOME}>–ü—Ä–∏—Ö–æ–¥–Ω—ã–µ</SelectItem>
              <SelectItem value={InvoiceType.EXPENSE}>–†–∞—Å—Ö–æ–¥–Ω—ã–µ</SelectItem>
            </SelectContent>
          </Select>
        </div>
        )}
        
        <div className="text-xs sm:text-sm text-gray-600">
          –ü–æ–∫–∞–∑–∞–Ω–æ: {filteredData.length}
        </div>
      </div>

      <DataTable
        data={filteredData}
        columns={columns}
        loading={invoicesLoading}
        onEdit={handleEdit}
        searchable={false}
        onCopy={filterType === InvoiceType.EXPENSE ? handleCopy : undefined}
        onPrint={handlePrint}
        onDelete={(invoice) => {
          setDeleteId(invoice.id);
          setConfirmOpen(true);
        }}
      />

      <Dialog open={modalOpen} onOpenChange={setModalOpen}>
        <DialogContent className="max-w-4xl w-[95vw] sm:w-[90vw] max-h-[95vh] sm:max-h-[90vh] overflow-y-auto modal-content p-3 sm:p-6">
          <DialogHeader>
            <div className="flex flex-col sm:flex-row justify-between items-start gap-3">
              <div>
                <DialogTitle className="text-lg sm:text-xl">
                  {editingInvoice ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∫–ª–∞–¥–Ω—É—é' : '–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–∫–ª–∞–¥–Ω—É—é'}
                </DialogTitle>
                <DialogDescription className="text-sm">
                  –í–Ω–µ—Å–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –¥–∞–Ω–Ω—ã–µ
                </DialogDescription>
              </div>
              {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è —Ä–∞—Å—Ö–æ–¥–Ω—ã—Ö –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö */}
              {formData.type === InvoiceType.EXPENSE && formData.orderId && orders && (
                (() => {
                  const selectedOrder = orders.find(o => o.id.toString() === formData.orderId);
                  if (selectedOrder) {
                    return (
                      <div className="bg-gray-100 text-gray-900 px-2 sm:px-4 py-2 rounded-lg border-2 border-gray-400">
                        <div className="text-xs font-medium">–í—Å–µ–≥–æ –≤ –∑–∞–∫–∞–∑–µ:</div>
                        <div className="text-sm sm:text-lg font-bold">{selectedOrder.quantityM3} –º¬≥</div>
                      </div>
                    );
                  }
                  return null;
                })()
              )}
            </div>
          </DialogHeader>
          
          <div className="modal-grid">
            {/* –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —Ç–∏–ø –Ω–∞–∫–ª–∞–¥–Ω–æ–π –≤—ã–±—Ä–∞–Ω */}
            {(() => {
              const isExpense = formData.type === InvoiceType.EXPENSE;
              const isIncome = formData.type === InvoiceType.INCOME;
              
              return (
                <>
                  {/* –û–±—â–∏–µ –ø–æ–ª—è –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö */}
                  <div>
                    <Label htmlFor="type">–¢–∏–ø –Ω–∞–∫–ª–∞–¥–Ω–æ–π</Label>
                    <Select
                      value={formData.type}
                      onValueChange={handleInvoiceTypeChange}
                    >
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        {Object.entries(invoiceTypeLabels).map(([value, label]) => (
                          <SelectItem key={value} value={value}>
                            {label}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>

                  {/* –ü–æ–ª—è –¥–ª—è –†–ê–°–•–û–î–ù–û–ô –Ω–∞–∫–ª–∞–¥–Ω–æ–π (–±–µ—Ç–æ–Ω –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞) */}
                  {isExpense && (
                    <>
                      <div>
                        <Label htmlFor="orderId">–ó–∞–∫–∞–∑</Label>
                        <Select
                          value={formData.orderId}
                          onValueChange={handleOrderChange}
                        >
                          <SelectTrigger>
                            <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑" />
                          </SelectTrigger>
                          <SelectContent>
                            {orders?.map((order) => (
                              <SelectItem key={order.id} value={order.id.toString()}>
                                #{order.orderNumber} - {order.customer?.name} - {order.quantityM3} –º¬≥
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      </div>

                      <div>
                        <SelectWithQuickAdd
                          label="–ö–ª–∏–µ–Ω—Ç"
                          value={formData.customerId}
                          onValueChange={(value) => setFormData({ ...formData, customerId: value })}
                          options={counterparties?.filter(cp => cp.type === 'CUSTOMER').map(cp => ({
                            value: cp.id.toString(),
                            label: cp.name
                          })) || []}
                          placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞"
                          required
                          enableQuickAdd
                          quickAddTitle="–î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞"
                          quickAddFields={[
                            { name: 'name', label: '–ù–∞–∑–≤–∞–Ω–∏–µ', required: true },
                            { name: 'bin', label: '–ë–ò–ù', required: true },
                            { name: 'address', label: '–ê–¥—Ä–µ—Å', required: false },
                            { name: 'phone', label: '–¢–µ–ª–µ—Ñ–æ–Ω', type: 'tel', required: false },
                            { name: 'email', label: 'Email', type: 'email', required: false },
                          ]}
                          onQuickAdd={async (data) => {
                            await counterpartiesApi.create({
                              name: data.name,
                              type: 'CUSTOMER',
                              bin: data.bin,
                              address: data.address || undefined,
                              phone: data.phone || undefined,
                              email: data.email || undefined,
                            });
                            await refetchCounterparties();
                            success('–ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!');
                          }}
                        />
                        {formErrors.customerId && (
                          <p className="text-red-500 text-sm mt-1">{formErrors.customerId}</p>
                        )}
                      </div>

                      <div>
                        {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ä–∫–∞—Ö –±–µ—Ç–æ–Ω–∞ */}
                        {(() => {
                          console.log('üîç –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ä–æ–∫ –±–µ—Ç–æ–Ω–∞:', concreteMarksLoading);
                          console.log('üìã –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –º–∞—Ä–∫–∏ –±–µ—Ç–æ–Ω–∞:', concreteMarks);
                          return null;
                        })()}
                        {concreteMarksLoading && <p className="text-sm text-gray-600">–ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Ä–∫–∏ –±–µ—Ç–æ–Ω–∞...</p>}
                        {!concreteMarksLoading && concreteMarks && concreteMarks.length === 0 && (
                          <p className="text-sm text-gray-600">–ú–∞—Ä–∫–∏ –±–µ—Ç–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Ä–∫—É –±–µ—Ç–æ–Ω–∞ —Å–Ω–∞—á–∞–ª–∞.</p>
                        )}
                        <SelectWithQuickAdd
                          label="–ú–∞—Ä–∫–∞ –±–µ—Ç–æ–Ω–∞"
                          value={formData.concreteMarkId}
                          onValueChange={(value) => {
                            setFormData({ ...formData, concreteMarkId: value });
                            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–∞—Ä–∫–∏ –±–µ—Ç–æ–Ω–∞
                            if (value && concreteMarks) {
                              console.log('üîç –í—ã–±—Ä–∞–Ω–∞ –º–∞—Ä–∫–∞ –±–µ—Ç–æ–Ω–∞:', value);
                              console.log('üìã –í—Å–µ –º–∞—Ä–∫–∏ –±–µ—Ç–æ–Ω–∞:', concreteMarks);
                              
                              const selectedMark = concreteMarks.find(m => m.id.toString() === value);
                              console.log('üéØ –ù–∞–π–¥–µ–Ω–Ω–∞—è –º–∞—Ä–∫–∞:', selectedMark);
                              
                              if (selectedMark && selectedMark.materials) {
                                console.log('üì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –º–∞—Ä–∫–∏:', selectedMark.materials);
                                
                                // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
                                const newMaterials = selectedMark.materials.map(cm => ({
                                  materialId: cm.materialId.toString(),
                                  quantityPerM3: cm.quantityPerM3.toString(),
                                  unit: cm.unit
                                }));
                                
                                // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ä–º—É —Å –Ω–æ–≤—ã–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏
                                setFormData(prev => ({
                                  ...prev,
                                  concreteMarkId: value,
                                  concreteMarkMaterials: newMaterials
                                }));
                                
                                console.log('‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –º–∞—Ä–∫–∏ –±–µ—Ç–æ–Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', newMaterials);
                              } else {
                                console.log('‚ùå –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –º–∞—Ä–∫–∏:', selectedMark);
                              }
                            } else {
                              console.log('‚ùå –ú–∞—Ä–∫–∏ –±–µ—Ç–æ–Ω–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ');
                            }
                          }}
                          options={(() => {
                            console.log('üéØ –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è –º–∞—Ä–∫–∏ –±–µ—Ç–æ–Ω–∞:', concreteMarks);
                            const options = concreteMarks?.map(m => ({
                              value: m.id.toString(),
                              label: m.name
                            })) || [];
                            console.log('üìù –û–ø—Ü–∏–∏ –º–∞—Ä–∫–∏ –±–µ—Ç–æ–Ω–∞:', options);
                            return options;
                          })()}
                          placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫—É –±–µ—Ç–æ–Ω–∞"
                          required
                          enableQuickAdd
                          quickAddTitle="–î–æ–±–∞–≤–∏—Ç—å –º–∞—Ä–∫—É –±–µ—Ç–æ–Ω–∞"
                          quickAddFields={[
                            { name: 'name', label: '–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä–∫–∏', required: true, placeholder: '–ú300' },
                          ]}
                          onQuickAdd={async (data) => {
                            await concreteMarksApi.create({
                              name: data.name,
                            });
                            await refetchConcreteMarks();
                            success('–ú–∞—Ä–∫–∞ –±–µ—Ç–æ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!');
                          }}
                        />
                        {formErrors.concreteMarkId && (
                          <p className="text-red-500 text-sm mt-1">{formErrors.concreteMarkId}</p>
                        )}
                      </div>

                      <div>
                        <Label htmlFor="quantityM3">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (–º¬≥) *</Label>
                        <Input
                          id="quantityM3"
                          type="number"
                          step="0.1"
                          min="0"
                          value={formData.quantityM3}
                          onChange={(e) => setFormData({ ...formData, quantityM3: e.target.value })}
                          placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"
                          className={getFieldClass(formData.quantityM3)}
                        />
                        {formErrors.quantityM3 && (
                          <p className="text-red-500 text-sm mt-1">{formErrors.quantityM3}</p>
                        )}
                      </div>

                      {/* –ß–µ–∫–±–æ–∫—Å –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–ª–µ–π —Ü–µ–Ω */}
                      <div className="flex items-center space-x-2 p-3 bg-gray-50 rounded">
                        <Checkbox
                          id="showPrices"
                          checked={showPriceFields}
                          onCheckedChange={(checked) => setShowPriceFields(checked as boolean)}
                        />
                        <Label htmlFor="showPrices" className="cursor-pointer">
                          –£–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—ã (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
                        </Label>
                      </div>

                      {/* –ü–æ–ª—è —Ü–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≥–∞–ª–æ—á–∫–∞ —Å—Ç–æ–∏—Ç */}
                      {showPriceFields && (
                        <>
                          <div>
                            <Label htmlFor="unitPrice">–¶–µ–Ω–∞ –∑–∞ –º¬≥ *</Label>
                            <Input
                              id="unitPrice"
                              type="number"
                              step="0.01"
                              min="0"
                              value={formData.unitPrice}
                              onChange={(e) => setFormData({ ...formData, unitPrice: e.target.value })}
                              placeholder="–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É"
                              className={getFieldClass(formData.unitPrice)}
                            />
                            {formErrors.unitPrice && (
                              <p className="text-red-500 text-sm mt-1">{formErrors.unitPrice}</p>
                            )}
                          </div>

                          <div>
                            <Label htmlFor="totalPrice">–û–±—â–∞—è —Å—É–º–º–∞ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)</Label>
                            <Input
                              id="totalPrice"
                              type="number"
                              step="0.01"
                              min="0"
                              value={
                                formData.unitPrice && formData.quantityM3
                                  ? (parseFloat(formData.unitPrice) * parseFloat(formData.quantityM3)).toFixed(2)
                                  : formData.totalPrice
                              }
                              readOnly
                              disabled
                              className="bg-gray-100"
                            />
                            <p className="text-xs text-gray-500 mt-1">
                              {formData.unitPrice && formData.quantityM3
                                ? `${parseFloat(formData.unitPrice).toLocaleString('ru-RU')} ‚Ç∏/–º¬≥ √ó ${formData.quantityM3} –º¬≥`
                                : '–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ'}
                            </p>
                          </div>

                          {/* –ß–µ–∫–±–æ–∫—Å –¥–ª—è –ù–î–° - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã —Ü–µ–Ω—ã */}
                          <div className="flex items-center space-x-2 p-3 bg-gray-50 rounded border border-gray-300">
                            <Checkbox
                              id="showVat"
                              checked={showVatField}
                              onCheckedChange={(checked) => setShowVatField(checked as boolean)}
                            />
                            <Label htmlFor="showVat" className="cursor-pointer">
                              –í–∫–ª—é—á–∏—Ç—å –ù–î–°
                            </Label>
                          </div>

                          {/* –ü–æ–ª–µ —Å—Ç–∞–≤–∫–∏ –ù–î–° */}
                          {showVatField && (
                            <div>
                              <Label htmlFor="vatRate">–°—Ç–∞–≤–∫–∞ –ù–î–° (%)</Label>
                              <Input
                                id="vatRate"
                                type="number"
                                step="0.01"
                                min="0"
                                max="100"
                                value={vatRate}
                                onChange={(e) => setVatRate(e.target.value)}
                                placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É –ù–î–°"
                              />
                              <p className="text-xs text-gray-500 mt-1">
                                {formData.unitPrice && formData.quantityM3 && vatRate ? (
                                  <>
                                    –ù–î–° –æ—Ç –æ–±—â–µ–π —Å—É–º–º—ã: {((parseFloat(formData.unitPrice) * parseFloat(formData.quantityM3) * parseFloat(vatRate)) / 100).toLocaleString('ru-RU')} ‚Ç∏
                                  </>
                                ) : '‚Äî'}
                              </p>
                              <p className="text-sm font-bold text-gray-900 mt-1">
                                {formData.unitPrice && formData.quantityM3 && vatRate ? (
                                  <>
                                    –ò—Ç–æ–≥–æ —Å –ù–î–°: {((parseFloat(formData.unitPrice) * parseFloat(formData.quantityM3)) * (1 + parseFloat(vatRate) / 100)).toLocaleString('ru-RU')} ‚Ç∏
                                  </>
                                ) : '‚Äî'}
                              </p>
                            </div>
                          )}
                        </>
                      )}
                    </>
                  )}

                  {/* –ü–æ–ª—è –¥–ª—è –ü–†–ò–•–û–î–ù–û–ô –Ω–∞–∫–ª–∞–¥–Ω–æ–π (–º–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–∞ —Å–∫–ª–∞–¥) */}
                  {isIncome && (
                    <>
                      <div>
                        <SelectWithQuickAdd
                          label="–ü–æ—Å—Ç–∞–≤—â–∏–∫"
                          value={formData.supplierId}
                          onValueChange={(value) => setFormData({ ...formData, supplierId: value })}
                          options={counterparties?.filter(cp => cp.type === 'SUPPLIER').map(cp => ({
                            value: cp.id.toString(),
                            label: cp.name
                          })) || []}
                          placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
                          enableQuickAdd
                          quickAddTitle="–î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"
                          quickAddFields={[
                            { name: 'name', label: '–ù–∞–∑–≤–∞–Ω–∏–µ', required: true },
                            { name: 'bin', label: '–ë–ò–ù', required: true },
                            { name: 'address', label: '–ê–¥—Ä–µ—Å', required: false },
                            { name: 'phone', label: '–¢–µ–ª–µ—Ñ–æ–Ω', type: 'tel', required: false },
                            { name: 'email', label: 'Email', type: 'email', required: false },
                          ]}
                          onQuickAdd={async (data) => {
                            await counterpartiesApi.create({
                              name: data.name,
                              type: 'SUPPLIER',
                              bin: data.bin,
                              address: data.address || undefined,
                              phone: data.phone || undefined,
                              email: data.email || undefined,
                            });
                            await refetchCounterparties();
                            success('–ü–æ—Å—Ç–∞–≤—â–∏–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!');
                          }}
                        />
                        {formErrors.supplierId && (
                          <p className="text-red-500 text-sm mt-1">{formErrors.supplierId}</p>
                        )}
                      </div>

                      <div>
                        <SelectWithQuickAdd
                          label="–ú–∞—Ç–µ—Ä–∏–∞–ª"
                          value={formData.materialId}
                          onValueChange={(value) => setFormData({ ...formData, materialId: value })}
                          options={materials?.map(m => ({
                            value: m.id.toString(),
                            label: `${m.name} (${m.unit})`
                          })) || []}
                          placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
                          enableQuickAdd
                          quickAddTitle="–î–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª"
                          quickAddFields={[
                            { name: 'name', label: '–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞', required: true },
                            { 
                              name: 'unit', 
                              label: '–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è', 
                              type: 'select',
                              required: true, 
                              placeholder: '–í—ã–±–µ—Ä–∏—Ç–µ –µ–¥–∏–Ω–∏—Ü—É',
                              options: [
                                { value: '—à—Ç', label: '–®—Ç—É–∫–∏ (—à—Ç)' },
                                { value: '–∫–≥', label: '–ö–∏–ª–æ–≥—Ä–∞–º–º—ã (–∫–≥)' },
                                { value: '–ª', label: '–õ–∏—Ç—Ä—ã (–ª)' },
                                { value: '–º', label: '–ú–µ—Ç—Ä—ã (–º)' },
                                { value: '–º¬≤', label: '–ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ –º–µ—Ç—Ä—ã (–º¬≤)' },
                                { value: '–º¬≥', label: '–ö—É–±–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä—ã (–º¬≥)' },
                                { value: '—Ç', label: '–¢–æ–Ω–Ω—ã (—Ç)' },
                                { value: '—É–ø–∞–∫', label: '–£–ø–∞–∫–æ–≤–∫–∏ (—É–ø–∞–∫)' },
                                { value: '–∫–æ–º–ø', label: '–ö–æ–º–ø–ª–µ–∫—Ç—ã (–∫–æ–º–ø)' },
                                { value: '–ø–∞—Ä–∞', label: '–ü–∞—Ä—ã (–ø–∞—Ä–∞)' },
                                { value: '—Ä—É–ª–æ–Ω', label: '–†—É–ª–æ–Ω—ã (—Ä—É–ª–æ–Ω)' },
                                { value: '–ª–∏—Å—Ç', label: '–õ–∏—Å—Ç—ã (–ª–∏—Å—Ç)' },
                              ]
                            },
                          ]}
                          onQuickAdd={async (data) => {
                            await materialsApi.create({
                              name: data.name,
                              unit: data.unit,
                            });
                            await refetchMaterials();
                            success('–ú–∞—Ç–µ—Ä–∏–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω!');
                          }}
                        />
                        {formErrors.materialId && (
                          <p className="text-red-500 text-sm mt-1">{formErrors.materialId}</p>
                        )}
                      </div>

                      <div>
                        <Label htmlFor="grossWeightKg">–ë—Ä—É—Ç—Ç–æ (–∫–≥) *</Label>
                        <div className="flex gap-2 items-center">
                          <Input
                            id="grossWeightKg"
                            type="number"
                            step="0.1"
                            min="0"
                            value={formData.grossWeightKg}
                            onChange={(e) => handleGrossWeightChange(e.target.value)}
                            placeholder="–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ë–†–£–¢–¢–û"
                            className={getFieldClass(formData.grossWeightKg, 'flex-1 bg-gray-50')}
                            readOnly
                          />
                          <Button
                            type="button"
                            variant="outline"
                            size="sm"
                            onClick={handleGetBruttoFromScale}
                            disabled={!formData.warehouseId || loadingScale}
                            className="px-4 whitespace-nowrap"
                          >
                            {loadingScale ? '...' : '–ë–†–£–¢–¢–û'}
                          </Button>
                          {liveWeight && (
                            <span className="text-xs text-gray-600 whitespace-nowrap">–¢–µ–∫—É—â–∏–π: <span className="font-semibold">{liveWeight.weight} –∫–≥</span></span>
                          )}
                        </div>
                        {formData.grossWeightAt && (
                          <p className="text-xs text-gray-500 mt-1">–í—Ä–µ–º—è —Ñ–∏–∫—Å–∞—Ü–∏–∏ –±—Ä—É—Ç—Ç–æ: {new Date(formData.grossWeightAt).toLocaleString('ru-RU')}</p>
                        )}
                        {formErrors.grossWeightKg && (
                          <p className="text-red-500 text-sm mt-1">{formErrors.grossWeightKg}</p>
                        )}
                      </div>

                      <div>
                        <Label htmlFor="tareWeightKg">–¢–∞—Ä–∞ (–∫–≥)</Label>
                        <div className="flex gap-2 items-center">
                          <Input
                            id="tareWeightKg"
                            type="number"
                            step="0.1"
                            min="0"
                            value={formData.tareWeightKg}
                            onChange={(e) => handleTareWeightChange(e.target.value)}
                            placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å —Ç–∞—Ä—ã"
                            className={getFieldClass(formData.tareWeightKg, 'flex-1')}
                          />
                          <Button
                            type="button"
                            variant="outline"
                            size="sm"
                            onClick={handleGetTareFromScale}
                            disabled={!formData.warehouseId || loadingScale}
                            className="px-4 whitespace-nowrap"
                          >
                            {loadingScale ? '...' : '–¢–ê–†–ê'}
                          </Button>
                          {liveWeight && (
                            <span className="text-xs text-gray-600 whitespace-nowrap">–¢–µ–∫—É—â–∏–π: <span className="font-semibold">{liveWeight.weight} –∫–≥</span></span>
                          )}
                        </div>
                        {formData.tareWeightAt && (
                          <p className="text-xs text-gray-500 mt-1">–í—Ä–µ–º—è —Ñ–∏–∫—Å–∞—Ü–∏–∏ —Ç–∞—Ä—ã: {new Date(formData.tareWeightAt).toLocaleString('ru-RU')}</p>
                        )}
                      </div>

                      <div>
                        <Label htmlFor="netWeightKg">–ù–µ—Ç—Ç–æ (–∫–≥) - –∞–≤—Ç–æ—Ä–∞—Å—á–µ—Ç</Label>
                        <Input
                          id="netWeightKg"
                          type="number"
                          step="0.1"
                          min="0"
                          value={formData.netWeightKg}
                          onChange={(e) => setFormData({ ...formData, netWeightKg: e.target.value })}
                          placeholder="–ë—Ä—É—Ç—Ç–æ - –¢–∞—Ä–∞"
                          className="bg-gray-50"
                          readOnly
                        />
                        <p className="text-xs text-gray-500 mt-1">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: –ë—Ä—É—Ç—Ç–æ - –¢–∞—Ä–∞</p>
                      </div>

                      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ñ–∏–∫—Å–∞—Ü–∏–∏ –≤–µ—Å–∞ */}
                      {lastWeighInfo && (
                        <div className="col-span-2 bg-gray-50 border border-gray-300 rounded-md p-3">
                          <div className="flex items-center gap-2 mb-2">
                            <span className="text-gray-900 font-semibold text-sm">
                              –ü–æ—Å–ª–µ–¥–Ω—è—è —Ñ–∏–∫—Å–∞—Ü–∏—è: {lastWeighInfo.type === 'brutto' ? '–ë–†–£–¢–¢–û' : '–¢–ê–†–ê'}
                            </span>
                          </div>
                          <div className="grid grid-cols-2 gap-2 text-xs">
                            <div>
                              <span className="text-gray-700">–í–µ—Å:</span>
                              <span className="ml-2 font-semibold text-gray-900">{lastWeighInfo.weight} –∫–≥</span>
                            </div>
                            <div>
                              <span className="text-gray-700">–í—Ä–µ–º—è:</span>
                              <span className="ml-2 text-gray-900">
                                {new Date(lastWeighInfo.timestamp).toLocaleString('ru-RU', {
                                  day: '2-digit',
                                  month: '2-digit',
                                  year: 'numeric',
                                  hour: '2-digit',
                                  minute: '2-digit',
                                  second: '2-digit'
                                })}
                              </span>
                            </div>
                          </div>
                          {lastWeighInfo.photoUrl && (
                            <div className="mt-2 flex items-center gap-2">
                              <span className="px-2 py-1 bg-white rounded text-xs text-gray-900 border border-gray-300">
                                –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
                              </span>
                            </div>
                          )}
                        </div>
                      )}

                      <div>
                        <Label htmlFor="moisturePercent">–í–ª–∞–∂–Ω–æ—Å—Ç—å (%)</Label>
                        <Input
                          id="moisturePercent"
                          type="number"
                          step="0.1"
                          min="0"
                          max="100"
                          value={formData.moisturePercent}
                          onChange={(e) => handleMoisturePercentChange(e.target.value)}
                          placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–ª–∞–∂–Ω–æ—Å—Ç—å"
                        />
                      </div>

                      <div>
                        <Label htmlFor="correctedWeightKg">–°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–µ—Å (–∫–≥) - –∞–≤—Ç–æ—Ä–∞—Å—á–µ—Ç</Label>
                        <Input
                          id="correctedWeightKg"
                          type="number"
                          step="0.1"
                          min="0"
                          value={formData.correctedWeightKg}
                          onChange={(e) => setFormData({ ...formData, correctedWeightKg: e.target.value })}
                          placeholder="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è"
                          className="bg-gray-50"
                          readOnly
                        />
                        <p className="text-xs text-gray-500 mt-1">–ù–µ—Ç—Ç–æ - (–ù–µ—Ç—Ç–æ √ó –í–ª–∞–∂–Ω–æ—Å—Ç—å/100)</p>
                      </div>
                    </>
                  )}

                  {/* –û–±—â–∏–µ –ø–æ–ª—è –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö */}
                  <div>
                    <SelectWithQuickAdd
                      label="–°–∫–ª–∞–¥"
                      value={formData.warehouseId}
                      onValueChange={handleWarehouseChange}
                      options={warehouses?.map(w => ({
                        value: w.id.toString(),
                        label: w.name
                      })) || []}
                      placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥"
                      required
                      enableQuickAdd
                      quickAddTitle="–î–æ–±–∞–≤–∏—Ç—å —Å–∫–ª–∞–¥"
                      quickAddFields={[
                        { name: 'name', label: '–ù–∞–∑–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞', required: true },
                        { name: 'address', label: '–ê–¥—Ä–µ—Å', required: true },
                        { name: 'phone', label: '–¢–µ–ª–µ—Ñ–æ–Ω', type: 'tel', required: false },
                        { name: 'companyId', label: 'ID –∫–æ–º–ø–∞–Ω–∏–∏', type: 'number', required: true, placeholder: '1' },
                      ]}
                      onQuickAdd={async (data) => {
                        await warehousesApi.create({
                          name: data.name,
                          address: data.address,
                          phone: data.phone || undefined,
                          companyId: parseInt(data.companyId),
                        });
                        await refetchWarehouses();
                        success('–°–∫–ª–∞–¥ –¥–æ–±–∞–≤–ª–µ–Ω!');
                      }}
                    />
                    {formErrors.warehouseId && (
                      <p className="text-red-500 text-sm mt-1">{formErrors.warehouseId}</p>
                    )}
                  </div>

                  {/* –û–±—â–∏–µ –ø–æ–ª—è –¥–ª—è –ª–æ–≥–∏—Å—Ç–∏–∫–∏ –∏ –¥–æ—Å—Ç–∞–≤–∫–∏ */}
                  <div>
                    <SelectWithQuickAdd
                      label="–í–æ–¥–∏—Ç–µ–ª—å"
                      value={formData.driverId}
                      onValueChange={(value) => setFormData({ ...formData, driverId: value })}
                      options={drivers?.map(d => ({
                        value: d.id.toString(),
                        label: `${d.firstName} ${d.lastName}`
                      })) || []}
                      placeholder={isIncome ? "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–¥–∏—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)" : "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–¥–∏—Ç–µ–ª—è"}
                      enableQuickAdd
                      quickAddTitle="–î–æ–±–∞–≤–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è"
                      quickAddFields={[
                        { name: 'firstName', label: '–ò–º—è', required: true },
                        { name: 'lastName', label: '–§–∞–º–∏–ª–∏—è', required: true },
                        { name: 'phone', label: '–¢–µ–ª–µ—Ñ–æ–Ω (–ª–æ–≥–∏–Ω)', type: 'tel', required: true },
                        { name: 'email', label: 'Email', type: 'email', required: false },
                      ]}
                      onQuickAdd={async (data) => {
                        await driversApi.create({
                          firstName: data.firstName,
                          lastName: data.lastName,
                          phone: data.phone,
                          email: data.email || undefined,
                        });
                        await refetchDrivers();
                        success('–í–æ–¥–∏—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω!');
                      }}
                    />
                    {formErrors.driverId && (
                      <p className="text-red-500 text-sm mt-1">{formErrors.driverId}</p>
                    )}
                  </div>

                  <div>
                    <SelectWithQuickAdd
                      label="–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç"
                      value={formData.vehicleId}
                      onValueChange={(value) => setFormData({ ...formData, vehicleId: value })}
                      options={vehicles?.map(v => ({
                        value: v.id.toString(),
                        label: `${v.plate}${v.type ? ` - ${v.type}` : ''}`
                      })) || []}
                      placeholder={isIncome ? "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)" : "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç"}
                      enableQuickAdd
                      quickAddTitle="–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç"
                      quickAddFields={[
                        { name: 'plate', label: '–ù–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è', required: true, placeholder: '–ê123–ë–í' },
                        { name: 'type', label: '–¢–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞', required: false, placeholder: '–ö–∞–º–ê–ó' },
                        { name: 'capacity', label: '–ì—Ä—É–∑–æ–ø–æ–¥—ä—ë–º–Ω–æ—Å—Ç—å', type: 'number', required: true },
                        { 
                          name: 'unit', 
                          label: '–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è', 
                          type: 'select',
                          required: true, 
                          placeholder: '–í—ã–±–µ—Ä–∏—Ç–µ –µ–¥–∏–Ω–∏—Ü—É',
                          options: [
                            { value: '–∫–≥', label: '–ö–∏–ª–æ–≥—Ä–∞–º–º—ã (–∫–≥)' },
                            { value: '—Ç', label: '–¢–æ–Ω–Ω—ã (—Ç)' },
                            { value: '–º¬≥', label: '–ö—É–±–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä—ã (–º¬≥)' },
                            { value: '–ª', label: '–õ–∏—Ç—Ä—ã (–ª)' },
                          ]
                        },
                      ]}
                      onQuickAdd={async (data) => {
                        await vehiclesApi.create({
                          plate: data.plate,
                          type: data.type || undefined,
                          capacity: parseFloat(data.capacity),
                          unit: data.unit,
                        });
                        await refetchVehicles();
                        success('–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–æ–±–∞–≤–ª–µ–Ω!');
                      }}
                    />
                    {formErrors.vehicleId && (
                      <p className="text-red-500 text-sm mt-1">{formErrors.vehicleId}</p>
                    )}
                  </div>

                  <div>
                    <SelectWithQuickAdd
                      label="–ö–æ–º–ø–∞–Ω–∏—è"
                      value={formData.companyId}
                      onValueChange={(value) => setFormData({ ...formData, companyId: value })}
                      options={companies?.map(c => ({
                        value: c.id.toString(),
                        label: c.name
                      })) || []}
                      placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é"
                      enableQuickAdd
                      quickAddTitle="–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é"
                      quickAddFields={[
                        { name: 'name', label: '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏', required: true },
                        { name: 'bin', label: '–ë–ò–ù', required: true },
                        { name: 'address', label: '–ê–¥—Ä–µ—Å', required: false },
                        { name: 'phone', label: '–¢–µ–ª–µ—Ñ–æ–Ω', type: 'tel', required: false },
                        { name: 'email', label: 'Email', type: 'email', required: false },
                      ]}
                      onQuickAdd={async (data) => {
                        await companiesApi.create({
                          name: data.name,
                          bin: data.bin,
                          address: data.address || undefined,
                          phone: data.phone || undefined,
                          email: data.email || undefined,
                        });
                        await refetchCompanies();
                        success('–ö–æ–º–ø–∞–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!');
                      }}
                    />
                  </div>

                  <div>
                    <Label htmlFor="deliveryDate">
                      –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
                      {formData.type === InvoiceType.INCOME && (
                        <span className="text-xs text-gray-500 ml-2">(–∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ)</span>
                      )}
                    </Label>
                    <Input
                      id="deliveryDate"
                      type={formData.type === InvoiceType.INCOME ? "datetime-local" : "date"}
                      value={formData.deliveryDate}
                      onChange={(e) => setFormData({ ...formData, deliveryDate: e.target.value })}
                      placeholder={formData.type === InvoiceType.INCOME ? "–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú" : "–î–î.–ú–ú.–ì–ì–ì–ì"}
                      className={formData.type === InvoiceType.INCOME ? "bg-gray-50" : ""}
                    />
                  </div>

                  <div>
                    <Label htmlFor="deliveryAddress">–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏</Label>
                    <Input
                      id="deliveryAddress"
                      value={formData.deliveryAddress}
                      onChange={(e) => setFormData({ ...formData, deliveryAddress: e.target.value })}
                      placeholder="–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏"
                    />
                  </div>

                  <div>
                    <Label htmlFor="coordinates">–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã</Label>
                    <Input
                      id="coordinates"
                      value={formData.coordinates}
                      onChange={(e) => setFormData({ ...formData, coordinates: e.target.value })}
                      placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã"
                    />
                  </div>

                  <div>
                    <Label htmlFor="notes">–ü—Ä–∏–º–µ—á–∞–Ω–∏—è</Label>
                    <Input
                      id="notes"
                      value={formData.notes}
                      onChange={(e) => setFormData({ ...formData, notes: e.target.value })}
                      placeholder="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è"
                    />
                  </div>

                  {/* –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è —Ä–∞—Å—Ö–æ–¥–Ω—ã—Ö –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö */}
                  {formData.type === InvoiceType.EXPENSE && (
                    <>
                      <div>
                        <Label htmlFor="contractNumber">–î–æ–≥–æ–≤–æ—Ä <span className="text-red-500">*</span></Label>
                        <Input
                          id="contractNumber"
                          value={formData.contractNumber}
                          onChange={(e) => setFormData({ ...formData, contractNumber: e.target.value })}
                          placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞"
                          required
                          className={getFieldClass(formData.contractNumber)}
                        />
                        {formErrors.contractNumber && (
                          <p className="text-red-500 text-sm mt-1">{formErrors.contractNumber}</p>
                        )}
                      </div>

                      <div>
                        <Label htmlFor="sealNumbers">–ü–ª–æ–º–±–∞ <span className="text-red-500">*</span></Label>
                        <Input
                          id="sealNumbers"
                          value={formData.sealNumbers}
                          onChange={(e) => setFormData({ ...formData, sealNumbers: e.target.value })}
                          placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–ª–æ–º–±—ã"
                          required
                          className={getFieldClass(formData.sealNumbers)}
                        />
                        {formErrors.sealNumbers && (
                          <p className="text-red-500 text-sm mt-1">{formErrors.sealNumbers}</p>
                        )}
                      </div>

                      <div>
                        <Label htmlFor="departedPlantAt">–í—Ä–µ–º—è —É–±—ã—Ç–∏—è —Å –∑–∞–≤–æ–¥–∞</Label>
                        <Input
                          id="departedPlantAt"
                          type="datetime-local"
                          value={formData.departedPlantAt}
                          onChange={(e) => setFormData({ ...formData, departedPlantAt: e.target.value })}
                          className={getFieldClass(formData.departedPlantAt)}
                        />
                        <p className="text-xs text-gray-500 mt-1">
                          –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
                        </p>
                      </div>

                      <div>
                        <Label htmlFor="arrivedSiteAt">–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è –Ω–∞ –æ–±—ä–µ–∫—Ç</Label>
                        <Input
                          id="arrivedSiteAt"
                          type="datetime-local"
                          value={formData.arrivedSiteAt}
                          onChange={(e) => setFormData({ ...formData, arrivedSiteAt: e.target.value })}
                          className={getFieldClass(formData.arrivedSiteAt)}
                        />
                      </div>

                      <div>
                        <Label htmlFor="departedSiteAt">–í—Ä–µ–º—è —É–±—ã—Ç–∏—è —Å –æ–±—ä–µ–∫—Ç–∞</Label>
                        <Input
                          id="departedSiteAt"
                          type="datetime-local"
                          value={formData.departedSiteAt}
                          onChange={(e) => setFormData({ ...formData, departedSiteAt: e.target.value })}
                          className={getFieldClass(formData.departedSiteAt)}
                        />
                      </div>

                      {/* –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –º–∞—Ä–∫–∏ –±–µ—Ç–æ–Ω–∞ */}
                      {(() => {
                        console.log('üîç –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:', formData.concreteMarkMaterials);
                        return null;
                      })()}
                      {formData.concreteMarkMaterials.length > 0 && (
                        <div className="col-span-2">
                          <Label>–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –º–∞—Ä–∫–∏ –±–µ—Ç–æ–Ω–∞ (–º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å)</Label>
                          <div className="mt-2 space-y-2 border border-gray-200 rounded-md p-3 bg-gray-50">
                            {formData.concreteMarkMaterials.map((material, index) => {
                              const materialInfo = materials?.find(m => m.id.toString() === material.materialId);
                              return (
                                <div key={index} className="grid grid-cols-3 gap-2 items-center">
                                  <div>
                                    <Label className="text-xs text-gray-600">–ú–∞—Ç–µ—Ä–∏–∞–ª</Label>
                                    <p className="text-sm font-medium">{materialInfo?.name || `ID: ${material.materialId}`}</p>
                                  </div>
                                  <div>
                                    <Label className="text-xs text-gray-600">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ –º¬≥</Label>
                                    <Input
                                      value={material.quantityPerM3}
                                      onChange={(e) => {
                                        const newMaterials = [...formData.concreteMarkMaterials];
                                        newMaterials[index] = { ...material, quantityPerM3: e.target.value };
                                        setFormData({ ...formData, concreteMarkMaterials: newMaterials });
                                      }}
                                      className="text-sm"
                                      type="number"
                                      step="0.1"
                                    />
                                  </div>
                                  <div>
                                    <Label className="text-xs text-gray-600">–ï–¥–∏–Ω–∏—Ü–∞</Label>
                                    <Input
                                      value={material.unit}
                                      onChange={(e) => {
                                        const newMaterials = [...formData.concreteMarkMaterials];
                                        newMaterials[index] = { ...material, unit: e.target.value };
                                        setFormData({ ...formData, concreteMarkMaterials: newMaterials });
                                      }}
                                      className="text-sm"
                                    />
                                  </div>
                                </div>
                              );
                            })}
                          </div>
                          <p className="text-xs text-gray-500 mt-1">
                            –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–∞—Ä–∫–∏ –±–µ—Ç–æ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è.
                          </p>
                        </div>
                      )}
                    </>
                  )}
                </>
              );
            })()}
          </div>

          <DialogFooter className="flex flex-col sm:flex-row gap-2 sm:gap-3">
            <Button variant="outline" onClick={resetForm} className="w-full sm:w-auto">
              –û—Ç–º–µ–Ω–∞
            </Button>
            <Button onClick={handleSubmit} className="w-full sm:w-auto bg-gray-800 hover:bg-gray-900">
              {editingInvoice ? '–û–±–Ω–æ–≤–∏—Ç—å' : '–°–æ–∑–¥–∞—Ç—å'}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      <AlertDialog open={confirmOpen} onOpenChange={setConfirmOpen}>
        <AlertDialogContent className="w-[95vw] sm:w-auto max-w-md">
          <AlertDialogHeader>
            <AlertDialogTitle className="text-lg">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ</AlertDialogTitle>
            <AlertDialogDescription className="text-sm">
              –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –Ω–∞–∫–ª–∞–¥–Ω—É—é? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter className="flex flex-col sm:flex-row gap-2">
            <AlertDialogCancel className="w-full sm:w-auto">–û—Ç–º–µ–Ω–∞</AlertDialogCancel>
            <AlertDialogAction onClick={handleDelete} className="w-full sm:w-auto bg-gray-800 hover:bg-gray-900">
              –£–¥–∞–ª–∏—Ç—å
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>

      {/* –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –ø–µ—á–∞—Ç–∏ –Ω–∞–∫–ª–∞–¥–Ω–æ–π */}
      {printInvoice && (
        <div className="hidden print:block print:absolute print:top-0 print:left-0 print:w-full print:z-50">
          <div className="two-up-container">
            <div className="half-page">
              <InvoicePrintComponent invoice={printInvoice} />
            </div>
            <div className="half-page">
              <InvoicePrintComponent invoice={printInvoice} />
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –ø–µ—á–∞—Ç–∏ –Ω–∞–∫–ª–∞–¥–Ω–æ–π
const InvoicePrintComponent: React.FC<{ invoice: Invoice }> = ({ invoice }) => {
  const getInvoiceTypeLabel = (type: InvoiceType) => {
    return type === InvoiceType.EXPENSE ? '–†–∞—Å—Ö–æ–¥–Ω–∞—è –Ω–∞–∫–ª–∞–¥–Ω–∞—è' : '–ü—Ä–∏—Ö–æ–¥–Ω–∞—è –Ω–∞–∫–ª–∞–¥–Ω–∞—è';
  };

  const formatDate = (date: string) => {
    return new Date(date).toLocaleDateString('ru-RU', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  };

  // –£—á–µ—Ç –≤–ª–∞–∂–Ω–æ—Å—Ç–∏: –µ—Å–ª–∏ –µ—Å—Ç—å moisturePercent –∏ correctedWeightKg ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–µ—Ç—Ç–æ
  const hasMoisture = typeof (invoice as any).moisturePercent === 'number' && (invoice as any).moisturePercent > 0 && typeof (invoice as any).correctedWeightKg === 'number';
  const effectiveNetKg: number | null = hasMoisture
    ? (invoice as any).correctedWeightKg as unknown as number
    : (typeof invoice.netWeightKg === 'number' ? invoice.netWeightKg : null);

  const isIncome = invoice.type !== InvoiceType.EXPENSE;

  return (
    <div className="bg-white p-8 print:p-2 print:bg-white" style={{ fontFamily: 'Arial, sans-serif' }}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞ */}
      <div className="text-center mb-8 print:mb-3">
        <h1 className="text-2xl font-bold mb-2 print:text-xl">
          {getInvoiceTypeLabel(invoice.type)} ‚Ññ {invoice.invoiceNumber} –æ—Ç {formatDate(invoice.date)}
        </h1>
      </div>

      {/* –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –±–ª–æ–∫: –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∏ –ü–æ—Å—Ç–∞–≤—â–∏–∫ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ */}
      <div className="mb-6 print:mb-4 grid grid-cols-2 gap-4">
        <div className="border border-gray-300 p-4 print:p-3">
          <h2 className="text-base font-semibold mb-2 print:text-sm">–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è (–ø–æ–∫—É–ø–∞—Ç–µ–ª—å)</h2>
          <p className="font-semibold print:text-sm">{invoice.company?.name || '‚Äî'}</p>
          <div className="text-xs print:text-xs space-y-1">
            {(invoice.company as any)?.bin && (<p>–ë–ò–ù: {(invoice.company as any).bin}</p>)}
            {(invoice.company as any)?.inn && (
              <p>
                –ò–ù–ù: {(invoice.company as any).inn}
                {(invoice.company as any)?.kpp ? ` | –ö–ü–ü: ${(invoice.company as any).kpp}` : ''}
                {(invoice.company as any)?.ogrn ? ` | –û–ì–†–ù: ${(invoice.company as any).ogrn}` : ''}
              </p>
            )}
            {invoice.company?.address && (<p>–ê–¥—Ä–µ—Å: {invoice.company.address}</p>)}
          </div>
        </div>

        <div className="border border-gray-300 p-4 print:p-3">
          <h2 className="text-base font-semibold mb-2 print:text-sm">{invoice.type === InvoiceType.EXPENSE ? '–ü–æ–ª—É—á–∞—Ç–µ–ª—å' : '–ü–æ—Å—Ç–∞–≤—â–∏–∫'}</h2>
          <p className="font-semibold print:text-sm">{invoice.customer?.name || invoice.supplier?.name || '‚Äî'}</p>
          <div className="text-xs print:text-xs space-y-1">
            {(invoice.customer as any)?.inn && (<p>–ò–ù–ù: {(invoice.customer as any).inn}</p>)}
            {(invoice.supplier as any)?.inn && !((invoice.customer as any)?.inn) && (<p>–ò–ù–ù: {(invoice.supplier as any).inn}</p>)}
            {(invoice.customer as any)?.address && (<p>–ê–¥—Ä–µ—Å: {(invoice.customer as any).address}</p>)}
            {(invoice.supplier as any)?.address && !((invoice.customer as any)?.address) && (<p>–ê–¥—Ä–µ—Å: {(invoice.supplier as any).address}</p>)}
          </div>
        </div>
      </div>

      {/* –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –±–ª–æ–∫: –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∏ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ */}
      <div className="mb-6 print:mb-4 grid grid-cols-2 gap-4">
        {/* –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç */}
        {(invoice.driver || invoice.vehicle) && (
          <div>
            <h2 className="text-lg font-semibold mb-3 print:text-base">–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç</h2>
            <table className="w-full" style={{ borderCollapse: 'collapse' }}>
              <thead>
                <tr>
                  <th className="border border-gray-300 p-2 text-left text-xs print:text-xs">–í–æ–¥–∏—Ç–µ–ª—å</th>
                  <th className="border border-gray-300 p-2 text-left text-xs print:text-xs">–¢–µ–ª–µ—Ñ–æ–Ω</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td className="border border-gray-300 p-2 text-xs print:text-xs">{invoice.driver?.name || '‚Äî'}</td>
                  <td className="border border-gray-300 p-2 text-xs print:text-xs">{invoice.driver?.phone || '‚Äî'}</td>
                </tr>
              </tbody>
            </table>
            <table className="w-full mt-2" style={{ borderCollapse: 'collapse' }}>
              <thead>
                <tr>
                  <th className="border border-gray-300 p-2 text-left text-xs print:text-xs">–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç</th>
                  <th className="border border-gray-300 p-2 text-left text-xs print:text-xs">–ì–æ—Å. –Ω–æ–º–µ—Ä</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td className="border border-gray-300 p-2 text-xs print:text-xs">{invoice.vehicle?.type || '‚Äî'}</td>
                  <td className="border border-gray-300 p-2 text-xs print:text-xs">{invoice.vehicle?.plate || '‚Äî'}</td>
                </tr>
              </tbody>
            </table>
          </div>
        )}

        {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ä–∞—Å—Ö–æ–¥–Ω—ã—Ö –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö */}
        {!isIncome && (
          <div>
            <h2 className="text-lg font-semibold mb-3 print:text-base">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h2>
            <div className="border border-gray-300">
              <table className="w-full" style={{ borderCollapse: 'collapse' }}>
                <tbody>
                  <tr>
                    <td className="border border-gray-300 p-2 text-xs print:text-xs font-semibold bg-gray-50 print:bg-gray-100" style={{ width: '40%' }}>
                      –î–æ–≥–æ–≤–æ—Ä:
                    </td>
                    <td className="border border-gray-300 p-2 text-xs print:text-xs">
                      {(invoice as any).contractNumber || '–ë–µ–∑ –¥–æ–≥–æ–≤–æ—Ä–∞'}
                    </td>
                  </tr>
                  <tr>
                    <td className="border border-gray-300 p-2 text-xs print:text-xs font-semibold bg-gray-50 print:bg-gray-100">
                      –ü–ª–æ–º–±–∞:
                    </td>
                    <td className="border border-gray-300 p-2 text-xs print:text-xs">
                      {(invoice.sealNumbers && invoice.sealNumbers.length > 0) ? invoice.sealNumbers.join(', ') : '‚Äî'}
                    </td>
                  </tr>
                  <tr>
                    <td className="border border-gray-300 p-2 text-xs print:text-xs font-semibold bg-gray-50 print:bg-gray-100">
                      –£–±—ã—Ç–∏–µ —Å –∑–∞–≤–æ–¥–∞:
                    </td>
                    <td className="border border-gray-300 p-2 text-xs print:text-xs">
                      {(invoice as any).departedPlantAt 
                        ? new Date((invoice as any).departedPlantAt).toLocaleString('ru-RU', {
                            year: 'numeric',
                            month: '2-digit',
                            day: '2-digit',
                            hour: '2-digit',
                            minute: '2-digit'
                          })
                        : '___________________'}
                    </td>
                  </tr>
                  <tr>
                    <td className="border border-gray-300 p-2 text-xs print:text-xs font-semibold bg-gray-50 print:bg-gray-100">
                      –ü—Ä–∏–±—ã—Ç–∏–µ –Ω–∞ –æ–±—ä–µ–∫—Ç:
                    </td>
                    <td className="border border-gray-300 p-2 text-xs print:text-xs">
                      {(invoice as any).arrivedSiteAt 
                        ? new Date((invoice as any).arrivedSiteAt).toLocaleString('ru-RU', {
                            year: 'numeric',
                            month: '2-digit',
                            day: '2-digit',
                            hour: '2-digit',
                            minute: '2-digit'
                          })
                        : '___________________'}
                    </td>
                  </tr>
                  <tr>
                    <td className="border border-gray-300 p-2 text-xs print:text-xs font-semibold bg-gray-50 print:bg-gray-100">
                      –£–±—ã—Ç–∏–µ —Å –æ–±—ä–µ–∫—Ç–∞:
                    </td>
                    <td className="border border-gray-300 p-2 text-xs print:text-xs">
                      {(invoice as any).departedSiteAt 
                        ? new Date((invoice as any).departedSiteAt).toLocaleString('ru-RU', {
                            year: 'numeric',
                            month: '2-digit',
                            day: '2-digit',
                            hour: '2-digit',
                            minute: '2-digit'
                          })
                        : '___________________'}
                    </td>
                  </tr>
                  <tr>
                    <td className="border border-gray-300 p-2 text-xs print:text-xs font-semibold bg-gray-50 print:bg-gray-100">
                      –°–∫–ª–∞–¥:
                    </td>
                    <td className="border border-gray-300 p-2 text-xs print:text-xs">
                      {(invoice as any).warehouse?.name || '‚Äî'}
                    </td>
                  </tr>
                  <tr>
                    <td className="border border-gray-300 p-2 text-xs print:text-xs font-semibold bg-gray-50 print:bg-gray-100">
                      –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–∫–º):
                    </td>
                    <td className="border border-gray-300 p-2 text-xs print:text-xs">
                      {invoice.distanceKm ? `${invoice.distanceKm} –∫–º` : '‚Äî'}
                    </td>
                  </tr>
                </tbody>
              </table>
            </div>
          </div>
        )}
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö */}
      <div className="mb-6 print:mb-4">
        <h2 className="text-lg font-semibold mb-3 print:text-base">–ú–∞—Ç–µ—Ä–∏–∞–ª—ã</h2>
        <div className="border border-gray-300">
          <table className="w-full">
            <thead className="bg-gray-50 print:bg-gray-100">
              <tr>
                <th className="border border-gray-300 p-2 text-left text-sm print:text-xs">–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ</th>
                {isIncome ? null : (
                  <th className="border border-gray-300 p-2 text-center text-sm print:text-xs">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (–º¬≥)</th>
                )}
                <th className="border border-gray-300 p-2 text-center text-sm print:text-xs">–í–µ—Å (–∫–≥)</th>
                {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Ü–µ–Ω —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ü–µ–Ω—ã –≤ –Ω–∞–∫–ª–∞–¥–Ω–æ–π */}
                {!isIncome && (invoice.basePricePerM3 || invoice.salePricePerM3) && (
                  <>
                    <th className="border border-gray-300 p-2 text-center text-sm print:text-xs">–¶–µ–Ω–∞ –∑–∞ –º¬≥</th>
                    <th className="border border-gray-300 p-2 text-center text-sm print:text-xs">–°—É–º–º–∞</th>
                  </>
                )}
              </tr>
            </thead>
            <tbody>
              {/* –î–ª—è —Ä–∞—Å—Ö–æ–¥–Ω–æ–π –Ω–∞–∫–ª–∞–¥–Ω–æ–π –≤—ã–≤–æ–¥–∏–º –º–∞—Ä–∫—É –±–µ—Ç–æ–Ω–∞ */}
              {!isIncome && invoice.concreteMark?.name && (
                <tr>
                  <td className="border border-gray-300 p-2 text-sm print:text-xs">
                    {invoice.concreteMark.name}
                  </td>
                  <td className="border border-gray-300 p-2 text-center text-sm print:text-xs">
                    {invoice.quantityM3 || '-'}
                  </td>
                  <td className="border border-gray-300 p-2 text-center text-sm print:text-xs">
                    {invoice.netWeightKg || invoice.grossWeightKg || '-'}
                  </td>
                  {/* –ö–æ–ª–æ–Ω–∫–∏ —Ü–µ–Ω –¥–ª—è —Ä–∞—Å—Ö–æ–¥–Ω–æ–π –Ω–∞–∫–ª–∞–¥–Ω–æ–π */}
                  {(invoice.basePricePerM3 || invoice.salePricePerM3) && (
                    <>
                      <td className="border border-gray-300 p-2 text-center text-sm print:text-xs">
                        {invoice.basePricePerM3 ? `${invoice.basePricePerM3.toLocaleString('ru-RU')} ‚Ç∏` : '-'}
                      </td>
                      <td className="border border-gray-300 p-2 text-center text-sm print:text-xs">
                        {invoice.basePricePerM3 && invoice.quantityM3 
                          ? `${(invoice.basePricePerM3 * invoice.quantityM3).toLocaleString('ru-RU')} ‚Ç∏` 
                          : '-'}
                      </td>
                    </>
                  )}
                </tr>
              )}
              
              {/* –î–ª—è –ø—Ä–∏—Ö–æ–¥–Ω–æ–π –Ω–∞–∫–ª–∞–¥–Ω–æ–π –≤—ã–≤–æ–¥–∏–º –º–∞—Ç–µ—Ä–∏–∞–ª –∏–∑ –ø–æ–ª—è —Ñ–æ—Ä–º—ã, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–π */}
              {isIncome && invoice.material?.name && (
                <tr>
                  <td className="border border-gray-300 p-2 text-sm print:text-xs">
                    {invoice.material.name}
                  </td>
                  {/* –¥–ª—è –ø—Ä–∏—Ö–æ–¥–Ω–æ–π –∫–æ–ª–æ–Ω–∫–∞ –º¬≥ —Å–∫—Ä—ã—Ç–∞ */}
                  <td className="border border-gray-300 p-2 text-center text-sm print:text-xs">
                    {invoice.netWeightKg || invoice.grossWeightKg || '-'}
                  </td>
                </tr>
              )}
              {invoice.items?.map((item, index) => (
                <tr key={index}>
                  <td className="border border-gray-300 p-2 text-sm print:text-xs">
                    {item.material?.name || '–ù–µ —É–∫–∞–∑–∞–Ω'}
                  </td>
                  {isIncome ? null : (
                    <td className="border border-gray-300 p-2 text-center text-sm print:text-xs">
                      {item.quantity || '-'}
                    </td>
                  )}
                  <td className="border border-gray-300 p-2 text-center text-sm print:text-xs">
                    {item.quantity || '-'} {item.unit}
                  </td>
                  {/* –ö–æ–ª–æ–Ω–∫–∏ —Ü–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ü–µ–Ω—ã –≤ –Ω–∞–∫–ª–∞–¥–Ω–æ–π */}
                  {!isIncome && (invoice.basePricePerM3 || invoice.salePricePerM3) && (
                    <>
                      <td className="border border-gray-300 p-2 text-center text-sm print:text-xs">
                        {invoice.basePricePerM3 ? `${invoice.basePricePerM3.toLocaleString('ru-RU')} ‚Ç∏` : '-'}
                      </td>
                      <td className="border border-gray-300 p-2 text-center text-sm print:text-xs">
                        {invoice.basePricePerM3 && invoice.quantityM3 
                          ? `${(invoice.basePricePerM3 * invoice.quantityM3).toLocaleString('ru-RU')} ‚Ç∏` 
                          : '-'}
                      </td>
                    </>
                  )}
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {/* –í–µ—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ */}
      {(invoice.grossWeightKg || invoice.tareWeightKg || effectiveNetKg) && (
        <div className="mb-6 print:mb-4">
          <h2 className="text-lg font-semibold mb-3 print:text-base">–í–µ—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ</h2>
          <div className="grid grid-cols-3 gap-4 print:grid-cols-3">
            {invoice.grossWeightKg && (
              <div className="border border-gray-300 p-3 print:p-2 text-center">
                <p className="font-semibold text-sm print:text-xs">–ë—Ä—É—Ç—Ç–æ</p>
                <p className="text-lg font-bold print:text-base">{invoice.grossWeightKg} –∫–≥</p>
                {invoice.grossWeightAt && (
                  <p className="text-xs text-gray-600 print:text-xs">–í—Ä–µ–º—è —Ñ–∏–∫—Å–∞—Ü–∏–∏: {new Date(invoice.grossWeightAt).toLocaleString('ru-RU')}</p>
                )}
              </div>
            )}
            {invoice.tareWeightKg && (
              <div className="border border-gray-300 p-3 print:p-2 text-center">
                <p className="font-semibold text-sm print:text-xs">–¢–∞—Ä–∞</p>
                <p className="text-lg font-bold print:text-base">{invoice.tareWeightKg} –∫–≥</p>
                {invoice.tareWeightAt && (
                  <p className="text-xs text-gray-600 print:text-xs">–í—Ä–µ–º—è —Ñ–∏–∫—Å–∞—Ü–∏–∏: {new Date(invoice.tareWeightAt).toLocaleString('ru-RU')}</p>
                )}
              </div>
            )}
            {(effectiveNetKg !== null) && (
              <div className="border border-gray-300 p-3 print:p-2 text-center">
                <p className="font-semibold text-sm print:text-xs">{hasMoisture ? '–ù–µ—Ç—Ç–æ (—Å —É—á–µ—Ç–æ–º –≤–ª–∞–∂–Ω–æ—Å—Ç–∏)' : '–ù–µ—Ç—Ç–æ'}</p>
                <p className="text-lg font-bold print:text-base">{effectiveNetKg} –∫–≥</p>
                {hasMoisture && (
                  <p className="text-xs text-gray-600 print:text-xs">–í–ª–∞–∂–Ω–æ—Å—Ç—å: {(invoice as any).moisturePercent}%{typeof invoice.netWeightKg === 'number' ? `, –∏—Å—Ö–æ–¥–Ω–æ–µ –Ω–µ—Ç—Ç–æ: ${invoice.netWeightKg} –∫–≥` : ''}</p>
                )}
              </div>
            )}
          </div>
        </div>
      )}

      {/* –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <div className="mb-6 print:mb-4">
        <div className="border-t-2 border-gray-400 pt-4 print:pt-3">
          {/* –ò—Ç–æ–≥–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ü–µ–Ω—ã */}
          {!isIncome && (invoice.basePricePerM3 || invoice.salePricePerM3) && (
            <div className="text-right">
              {(invoice as any).vatRate && (invoice as any).vatAmount && invoice.basePricePerM3 && invoice.quantityM3 ? (
                <>
                  <p className="text-sm print:text-xs mb-1">
                    <strong>–°—É–º–º–∞ –±–µ–∑ –ù–î–°:</strong> {(invoice.basePricePerM3 * invoice.quantityM3).toLocaleString('ru-RU')} ‚Ç∏
                  </p>
                  <p className="text-sm print:text-xs mb-1">
                    <strong>–ù–î–° ({(invoice as any).vatRate}%):</strong> {((invoice as any).vatAmount).toLocaleString('ru-RU')} ‚Ç∏
                  </p>
                  <p className="text-lg font-bold print:text-base">
                    <strong>–ò—Ç–æ–≥–æ —Å –ù–î–°: {((invoice.basePricePerM3 * invoice.quantityM3) + (invoice as any).vatAmount).toLocaleString('ru-RU')} ‚Ç∏</strong>
                  </p>
                </>
              ) : (
                <p className="text-lg font-bold print:text-base">
                  <strong>–ò—Ç–æ–≥–æ: {invoice.basePricePerM3 && invoice.quantityM3 ? (invoice.basePricePerM3 * invoice.quantityM3).toLocaleString('ru-RU') : 0} ‚Ç∏</strong>
                </p>
              )}
            </div>
          )}
        </div>
      </div>

      {/* –û—Ç—Å—Ç—É–ø –º–µ–∂–¥—É –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ –∏ –ø–æ–¥–ø–∏—Å—è–º–∏ */}
      <div className="mb-8 print:mb-6">
        <br />
        <br />
      </div>

      {/* –ü–æ–¥–ø–∏—Å–∏ */}
      <div className="grid grid-cols-2 gap-8 print:gap-6">
        <div>
          <p className="text-sm print:text-xs mb-8 print:mb-6">–û—Ç–ø—É—Å—Ç–∏–ª: _________________</p>
          <p className="text-sm print:text-xs">(–ø–æ–¥–ø–∏—Å—å)</p>
        </div>
        <div>
          <p className="text-sm print:text-xs mb-8 print:mb-6">–ü–æ–ª—É—á–∏–ª: _________________</p>
          <p className="text-sm print:text-xs">(–ø–æ–¥–ø–∏—Å—å)</p>
        </div>
      </div>

      {/* –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø–µ—á–∞—Ç–∏ */}
      <div className="mt-8 print:mt-6 text-center text-xs print:text-xs text-gray-500">
        –î–æ–∫—É–º–µ–Ω—Ç —Ä–∞—Å–ø–µ—á–∞—Ç–∞–Ω: {new Date().toLocaleString('ru-RU')}
      </div>
    </div>
  );
};