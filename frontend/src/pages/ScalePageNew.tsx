import { useState, useEffect } from 'react';
import { Button } from '../components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../components/ui/card';
import { Label } from '../components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../components/ui/select';
import { useApiData } from '../hooks/useApiData';
import { useNotifications } from '../hooks/useNotifications';
import type { Warehouse } from '../types';
import { Scale, Camera, Weight, History, Settings } from 'lucide-react';

interface ScaleFix {
  id: number;
  warehouseId: number;
  type: 'brutto' | 'tara';
  weight: number;
  photoPath?: string;
  createdAt: string;
  warehouse: {
    id: number;
    name: string;
  };
}

interface ScaleData {
  weight: number;
  warehouseId: number;
  warehouseName: string;
}

export default function ScalePageNew() {
  const [selectedWarehouseId, setSelectedWarehouseId] = useState<string>('');
  const [currentWeight, setCurrentWeight] = useState<number>(0);
  const [isLoading, setIsLoading] = useState(false);
  const [scaleHistory, setScaleHistory] = useState<ScaleFix[]>([]);
  const [lastFix, setLastFix] = useState<ScaleFix | null>(null);

  const { success, error } = useNotifications();

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∫–ª–∞–¥—ã
  const { data: warehouses } = useApiData<Warehouse>({
    apiCall: () => fetch('/api/v1/warehouses').then(res => res.json()),
    dependencies: []
  });

  // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Å–∞ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
  useEffect(() => {
    if (!selectedWarehouseId) return;

    const interval = setInterval(async () => {
      try {
        const response = await fetch(`/api/v1/scale/${selectedWarehouseId}/read`);
        if (response.ok) {
          const data: ScaleData = await response.json();
          setCurrentWeight(data.weight);
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Å–∞:', error);
      }
    }, 2000);

    return () => clearInterval(interval);
  }, [selectedWarehouseId]);

  const handleWarehouseChange = async (warehouseId: string) => {
    setSelectedWarehouseId(warehouseId);
    
    if (warehouseId) {
      try {
        const response = await fetch(`/api/v1/scale/${warehouseId}/read`);
        if (response.ok) {
          const data: ScaleData = await response.json();
          setCurrentWeight(data.weight);
        } else {
          error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≤–µ—Å–∞–º');
        }
      } catch (err) {
        error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≤–µ—Å–∞–º');
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
      loadScaleHistory(warehouseId);
    }
  };

  const loadScaleHistory = async (warehouseId: string) => {
    try {
      const response = await fetch(`/api/v1/scale/${warehouseId}/history`);
      if (response.ok) {
        const data = await response.json();
        setScaleHistory(data.fixes);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error);
    }
  };

  const handleFixWeight = async (type: 'brutto' | 'tara') => {
    if (!selectedWarehouseId) {
      error('–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥');
      return;
    }

    setIsLoading(true);
    try {
      const response = await fetch(`/api/v1/scale/${selectedWarehouseId}/fix`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ type }),
      });

      if (response.ok) {
        const fixData: ScaleFix = await response.json();
        setLastFix(fixData);
        success(`${type === 'brutto' ? '–ë—Ä—É—Ç—Ç–æ' : '–¢–∞—Ä–∞'} –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ: ${fixData.weight} –∫–≥`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        loadScaleHistory(selectedWarehouseId);
      } else {
        const errorData = await response.json();
        error(errorData.message || '–û—à–∏–±–∫–∞ —Ñ–∏–∫—Å–∞—Ü–∏–∏ –≤–µ—Å–∞');
      }
    } catch (err) {
      error('–û—à–∏–±–∫–∞ —Ñ–∏–∫—Å–∞—Ü–∏–∏ –≤–µ—Å–∞');
    } finally {
      setIsLoading(false);
    }
  };

  const selectedWarehouse = warehouses?.find(w => w.id.toString() === selectedWarehouseId);

  return (
    <div className="container mx-auto p-6 space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold">‚öñÔ∏è –í–µ—Å—ã</h1>
          <p className="text-muted-foreground">–§–∏–∫—Å–∞—Ü–∏—è –≤–µ—Å–∞ –∏ —Ñ–æ—Ç–æ –ø—Ä–∏ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏–∏</p>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
        <Card className="lg:col-span-2">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Scale className="h-5 w-5" />
              –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Å–∞–º–∏
            </CardTitle>
            <CardDescription>
              –í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥ –∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–π—Ç–µ –≤–µ—Å
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="warehouse">–°–∫–ª–∞–¥</Label>
              <Select value={selectedWarehouseId} onValueChange={handleWarehouseChange}>
                <SelectTrigger>
                  <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥" />
                </SelectTrigger>
                <SelectContent>
                  {warehouses?.map((warehouse) => (
                    <SelectItem key={warehouse.id} value={warehouse.id.toString()}>
                      {warehouse.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            {selectedWarehouse && (
              <div className="space-y-4">
                <div className="flex items-center justify-between p-4 bg-muted rounded-lg">
                  <div>
                    <Label className="text-sm font-medium">–¢–µ–∫—É—â–∏–π –≤–µ—Å</Label>
                    <div className="text-2xl font-bold">{currentWeight.toFixed(2)} –∫–≥</div>
                  </div>
                  <Weight className="h-8 w-8 text-muted-foreground" />
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <Button
                    onClick={() => handleFixWeight('brutto')}
                    disabled={isLoading}
                    className="h-16 text-lg font-semibold bg-green-600 hover:bg-green-700"
                  >
                    <Weight className="mr-2 h-5 w-5" />
                    –ë–†–£–¢–¢–û
                  </Button>
                  <Button
                    onClick={() => handleFixWeight('tara')}
                    disabled={isLoading}
                    variant="outline"
                    className="h-16 text-lg font-semibold border-orange-500 text-orange-600 hover:bg-orange-50"
                  >
                    <Weight className="mr-2 h-5 w-5" />
                    –¢–ê–†–ê
                  </Button>
                </div>

                {lastFix && (
                  <div className="p-4 bg-green-50 border border-green-200 rounded-lg">
                    <div className="flex items-center gap-2 text-green-700">
                      <Camera className="h-4 w-4" />
                      <span className="font-medium">–ü–æ—Å–ª–µ–¥–Ω—è—è —Ñ–∏–∫—Å–∞—Ü–∏—è:</span>
                    </div>
                    <div className="mt-1 text-sm text-green-600">
                      {lastFix.type === 'brutto' ? '–ë—Ä—É—Ç—Ç–æ' : '–¢–∞—Ä–∞'}: {lastFix.weight} –∫–≥
                    </div>
                    <div className="text-xs text-green-500">
                      {new Date(lastFix.createdAt).toLocaleString('ru-RU')}
                    </div>
                    {lastFix.photoPath && (
                      <div className="mt-2">
                        <span className="px-2 py-1 bg-gray-100 text-gray-800 rounded text-xs">
                          üì∏ –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
                        </span>
                      </div>
                    )}
                  </div>
                )}
              </div>
            )}
          </CardContent>
        </Card>

        {/* –ò—Å—Ç–æ—Ä–∏—è */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <History className="h-5 w-5" />
              –ò—Å—Ç–æ—Ä–∏—è –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏–π
            </CardTitle>
            <CardDescription>
              –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–∏–∫—Å–∞—Ü–∏–∏ –≤–µ—Å–∞
            </CardDescription>
          </CardHeader>
          <CardContent>
            {scaleHistory.length > 0 ? (
              <div className="space-y-3 max-h-96 overflow-y-auto">
                {scaleHistory.slice(0, 10).map((fix) => (
                  <div
                    key={fix.id}
                    className="p-3 border rounded-lg hover:bg-muted/50 transition-colors"
                  >
                    <div className="flex items-center justify-between">
                      <span className={`px-2 py-1 rounded text-xs ${fix.type === 'brutto' ? 'bg-blue-100 text-blue-800' : 'bg-gray-100 text-gray-800'}`}>
                        {fix.type === 'brutto' ? '–ë—Ä—É—Ç—Ç–æ' : '–¢–∞—Ä–∞'}
                      </span>
                      <span className="font-semibold">{fix.weight} –∫–≥</span>
                    </div>
                    <div className="text-xs text-muted-foreground mt-1">
                      {new Date(fix.createdAt).toLocaleString('ru-RU')}
                    </div>
                    {fix.photoPath && (
                      <div className="flex items-center gap-1 mt-1">
                        <Camera className="h-3 w-3 text-muted-foreground" />
                        <span className="text-xs text-muted-foreground">–§–æ—Ç–æ</span>
                      </div>
                    )}
                  </div>
                ))}
              </div>
            ) : (
              <div className="text-center py-8 text-muted-foreground">
                <History className="h-12 w-12 mx-auto mb-2 opacity-50" />
                <p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è—Ö</p>
                <p className="text-sm">–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏</p>
              </div>
            )}
          </CardContent>
        </Card>
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫–ª–∞–¥–µ */}
      {selectedWarehouse && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Settings className="h-5 w-5" />
              –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫–ª–∞–¥–µ
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div>
                <Label className="text-sm font-medium">–ù–∞–∑–≤–∞–Ω–∏–µ</Label>
                <div className="text-sm">{selectedWarehouse.name}</div>
              </div>
              <div>
                <Label className="text-sm font-medium">–ê–¥—Ä–µ—Å</Label>
                <div className="text-sm">{selectedWarehouse.address || '–ù–µ —É–∫–∞–∑–∞–Ω'}</div>
              </div>
              <div>
                <Label className="text-sm font-medium">–°—Ç–∞—Ç—É—Å –≤–µ—Å–æ–≤</Label>
                <div className="flex items-center gap-2">
                  <span className={`px-2 py-1 rounded text-xs ${selectedWarehouse.scaleActive ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'}`}>
                    {selectedWarehouse.scaleActive ? '–ê–∫—Ç–∏–≤–Ω—ã' : '–ù–µ–∞–∫—Ç–∏–≤–Ω—ã'}
                  </span>
                  {selectedWarehouse.scaleUrl && (
                    <span className="px-2 py-1 border border-gray-300 rounded text-xs">
                      {selectedWarehouse.scaleUrl}
                    </span>
                  )}
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
}

