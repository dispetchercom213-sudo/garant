import { useState, useEffect } from 'react';
import { Container, Title, Card, Button, Stack, Select, Text, Box, Group, Badge } from '@mantine/core';
import { IconScale, IconCheck, IconArrowRight, IconArrowLeft } from '@tabler/icons-react';
import { invoicesApi, scaleApi, warehousesApi, vehiclesApi, counterpartiesApi, companiesApi, materialsApi, driversApi, driverWeighingHistoryApi } from '../services/api';
import { notifications } from '@mantine/notifications';
import { useAuthStore } from '../stores/authStore';
import styles from '../styles/MyInvoicesDriverPage.module.css';

interface WizardData {
  vehicleId?: string;
  supplierId?: string;
  companyId?: string;
  materialId?: string;
  warehouseId?: string;
  grossWeight?: number;
  tareWeight?: number;
  netWeight?: number;
  invoiceId?: number;
  invoiceNumber?: string;
}

type Step = 'vehicle' | 'supplier' | 'company' | 'material' | 'warehouse' | 'brutto' | 'unload' | 'tara' | 'complete';

export default function DriverWeighingWizard() {
  const { user } = useAuthStore();
  const [currentStep, setCurrentStep] = useState<Step>('vehicle');
  const [wizardData, setWizardData] = useState<WizardData>({});
  const [loading, setLoading] = useState(false);
  const [dataLoading, setDataLoading] = useState(true);
  const [dataLoaded, setDataLoaded] = useState(false); // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
  const [driverInfo, setDriverInfo] = useState<any>(null); // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–¥–∏—Ç–µ–ª–µ
  const [liveWeight, setLiveWeight] = useState<number | null>(null);
  const [scaleConnected, setScaleConnected] = useState(false);

  // –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
  const [vehicles, setVehicles] = useState<any[]>([]);
  const [suppliers, setSuppliers] = useState<any[]>([]);
  const [companies, setCompanies] = useState<any[]>([]);
  const [materials, setMaterials] = useState<any[]>([]);
  const [warehouses, setWarehouses] = useState<any[]>([]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
  useEffect(() => {
    if (!dataLoaded) {
      loadReferenceData();
    }
  }, [dataLoaded]);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–µ—Å–∞ –¥–ª—è —à–∞–≥–æ–≤ brutto –∏ tara
  useEffect(() => {
    if ((currentStep === 'brutto' || currentStep === 'tara') && wizardData.warehouseId) {
      const warehouse = warehouses.find((w) => w.id.toString() === wizardData.warehouseId);
      if (!warehouse || !warehouse.scaleIpAddress) return;

      const fetchWeight = async () => {
        try {
          const baseUrl = warehouse.scaleIpAddress.startsWith('http') 
            ? warehouse.scaleIpAddress 
            : `http://${warehouse.scaleIpAddress}:5055`;
          
          const resp = await fetch(`${baseUrl}/api/weight`, {
            headers: {
              'X-API-Key': warehouse.scaleApiKey || '',
              'ngrok-skip-browser-warning': 'true',
            },
            signal: AbortSignal.timeout(3000)
          });
          
          const data = await resp.json();
          setLiveWeight(data.weight);
          setScaleConnected(data.connected ?? true);
        } catch (err) {
          console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Å–∞:', err);
          setScaleConnected(false);
        }
      };

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ä–∞–∑—É
      fetchWeight();
      
      // –ò –ø–æ–≤—Ç–æ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
      const interval = setInterval(fetchWeight, 2000);
      
      return () => clearInterval(interval);
    } else {
      setLiveWeight(null);
      setScaleConnected(false);
    }
  }, [currentStep, wizardData.warehouseId, warehouses]);

  const loadReferenceData = async () => {
    try {
      setDataLoading(true);
      
      // –í–æ–¥–∏—Ç–µ–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å–≤–æ–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∏ –≤—Å–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä)
      const [vehiclesRes, suppliersRes, companiesRes, materialsRes, warehousesRes, driverRes] = await Promise.all([
        vehiclesApi.getMy(), // –¢–æ–ª—å–∫–æ —Å–≤–æ–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
        counterpartiesApi.getAll(),
        companiesApi.getAll(),
        materialsApi.getAll(),
        warehousesApi.getAll(),
        driversApi.getMe(), // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –≤–æ–¥–∏—Ç–µ–ª–µ
      ]);

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∞—Å—Å–∏–≤—ã –∏–∑ –æ—Ç–≤–µ—Ç–æ–≤ API - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
      const vehiclesData = Array.isArray(vehiclesRes.data) 
        ? vehiclesRes.data 
        : Array.isArray(vehiclesRes.data?.data) 
          ? vehiclesRes.data.data 
          : Array.isArray(vehiclesRes.data?.items)
            ? vehiclesRes.data.items
            : [];
      
      console.log('üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –≤–æ–¥–∏—Ç–µ–ª—è:', vehiclesData);
      console.log('üöó –î–µ—Ç–∞–ª–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞:', vehiclesData.map((v: any) => ({ 
        id: v?.id, 
        licensePlate: v?.licensePlate,
        hasId: !!v?.id,
        hasPlate: !!v?.licensePlate,
        rawObject: v
      })));
            
      const suppliersData = Array.isArray(suppliersRes.data) 
        ? suppliersRes.data 
        : Array.isArray(suppliersRes.data?.data) 
          ? suppliersRes.data.data 
          : Array.isArray(suppliersRes.data?.items)
            ? suppliersRes.data.items
            : [];
            
      const companiesData = Array.isArray(companiesRes.data) 
        ? companiesRes.data 
        : Array.isArray(companiesRes.data?.data) 
          ? companiesRes.data.data 
          : Array.isArray(companiesRes.data?.items)
            ? companiesRes.data.items
            : [];
            
      const materialsData = Array.isArray(materialsRes.data) 
        ? materialsRes.data 
        : Array.isArray(materialsRes.data?.data) 
          ? materialsRes.data.data 
          : Array.isArray(materialsRes.data?.items)
            ? materialsRes.data.items
            : [];
            
      const warehousesData = Array.isArray(warehousesRes.data) 
        ? warehousesRes.data 
        : Array.isArray(warehousesRes.data?.data) 
          ? warehousesRes.data.data 
          : Array.isArray(warehousesRes.data?.items)
            ? warehousesRes.data.items
            : [];

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å
      if (vehiclesData.length === 0 && suppliersData.length === 0 && companiesData.length === 0) {
        console.warn('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è');
        notifications.show({
          title: '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ',
          message: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É.',
          color: 'yellow',
        });
      }

      setVehicles(vehiclesData);
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ (LEGAL –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã)
      const filteredSuppliers = suppliersData.filter((c: any) => c.kind === 'LEGAL');
      
      setSuppliers(filteredSuppliers);
      setCompanies(companiesData);
      setMaterials(materialsData);
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–∫–ª–∞–¥—ã —Å –≤–µ—Å–∞–º–∏
      const filteredWarehouses = warehousesData.filter((w: any) => w.hasScales);
      
      setWarehouses(filteredWarehouses);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–¥–∏—Ç–µ–ª–µ
      setDriverInfo(driverRes.data);
      
      setDataLoaded(true); // –ü–æ–º–µ—á–∞–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤:', error);
      notifications.show({
        title: '–û—à–∏–±–∫–∞',
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏',
        color: 'red',
      });
      setDataLoaded(true); // –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    } finally {
      setDataLoading(false);
    }
  };

  const handleNext = () => {
    const steps: Step[] = ['vehicle', 'supplier', 'company', 'material', 'warehouse', 'brutto', 'unload', 'tara', 'complete'];
    const currentIndex = steps.indexOf(currentStep);
    if (currentIndex < steps.length - 1) {
      setCurrentStep(steps[currentIndex + 1]);
    }
  };

  const handleBack = () => {
    const steps: Step[] = ['vehicle', 'supplier', 'company', 'material', 'warehouse', 'brutto', 'unload', 'tara', 'complete'];
    const currentIndex = steps.indexOf(currentStep);
    if (currentIndex > 0) {
      setCurrentStep(steps[currentIndex - 1]);
    }
  };

  const handleWeighBrutto = async () => {
    const warehouse = warehouses.find((w) => w.id.toString() === wizardData.warehouseId);
    if (!warehouse) return;

    try {
      setLoading(true);
      const response = await scaleApi.weigh(warehouse.id, { action: 'brutto' });

      if (response.data && response.data.weight !== undefined) {
        setWizardData({
          ...wizardData,
          grossWeight: response.data.weight,
        });

        notifications.show({
          title: '‚úÖ –í–µ—Å –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω',
          message: `–ë–†–£–¢–¢–û: ${response.data.weight} –∫–≥`,
          color: 'green',
        });

        handleNext(); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
      }
    } catch (error: any) {
      notifications.show({
        title: '–û—à–∏–±–∫–∞',
        message: error.response?.data?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Å',
        color: 'red',
      });
    } finally {
      setLoading(false);
    }
  };

  const handleWeighTara = async () => {
    const warehouse = warehouses.find((w) => w.id.toString() === wizardData.warehouseId);
    if (!warehouse) return;

    try {
      setLoading(true);
      const response = await scaleApi.weigh(warehouse.id, { action: 'tara' });

      if (response.data && response.data.weight !== undefined) {
        const tareWeight = response.data.weight;
        const netWeight = (wizardData.grossWeight || 0) - tareWeight;

        setWizardData({
          ...wizardData,
          tareWeight,
          netWeight,
        });

        notifications.show({
          title: '‚úÖ –í–µ—Å –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω',
          message: `–¢–ê–†–ê: ${tareWeight} –∫–≥, –ù–ï–¢–¢–û: ${netWeight.toFixed(1)} –∫–≥`,
          color: 'green',
        });

        handleNext(); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é
      }
    } catch (error: any) {
      notifications.show({
        title: '–û—à–∏–±–∫–∞',
        message: error.response?.data?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Å',
        color: 'red',
      });
    } finally {
      setLoading(false);
    }
  };

  const handleSave = async () => {
    if (!wizardData.warehouseId || !wizardData.grossWeight || !wizardData.tareWeight) {
      notifications.show({
        title: '–û—à–∏–±–∫–∞',
        message: '–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã',
        color: 'red',
      });
      return;
    }

    try {
      setLoading(true);

      const invoiceData: any = {
        type: 'INCOME',
        warehouseId: parseInt(wizardData.warehouseId),
        grossWeightKg: wizardData.grossWeight,
        tareWeightKg: wizardData.tareWeight,
        netWeightKg: wizardData.netWeight,
        grossWeightAt: new Date().toISOString(),
        tareWeightAt: new Date().toISOString(),
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è
      if (driverInfo?.id) {
        invoiceData.driverId = driverInfo.id;
      } else if (user?.id) {
        // Fallback –Ω–∞ user.id –µ—Å–ª–∏ driverInfo –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
        invoiceData.driverId = user.id;
      }
      
      // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
      if (wizardData.vehicleId) {
        invoiceData.vehicleId = parseInt(wizardData.vehicleId);
      }
      if (wizardData.supplierId) {
        invoiceData.supplierId = parseInt(wizardData.supplierId);
        invoiceData.customerId = parseInt(wizardData.supplierId);
      }
      if (wizardData.companyId) {
        invoiceData.companyId = parseInt(wizardData.companyId);
      }
      if (wizardData.materialId) {
        invoiceData.materialId = parseInt(wizardData.materialId);
      }

      console.log('üíæ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∫–ª–∞–¥–Ω—É—é:', invoiceData);
      const response = await invoicesApi.create(invoiceData);
      console.log('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.data);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è
      try {
        const weighingHistoryData = {
          warehouseId: parseInt(wizardData.warehouseId),
          vehicleId: wizardData.vehicleId ? parseInt(wizardData.vehicleId) : undefined,
          supplierId: wizardData.supplierId ? parseInt(wizardData.supplierId) : undefined,
          companyId: wizardData.companyId ? parseInt(wizardData.companyId) : undefined,
          materialId: wizardData.materialId ? parseInt(wizardData.materialId) : undefined,
          grossWeightKg: wizardData.grossWeight,
          tareWeightKg: wizardData.tareWeight,
          netWeightKg: wizardData.netWeight,
          grossWeightAt: new Date().toISOString(),
          tareWeightAt: new Date().toISOString(),
          invoiceId: response.data.id,
        };

        console.log('üìù –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è:', weighingHistoryData);
        await driverWeighingHistoryApi.create(weighingHistoryData);
        console.log('‚úÖ –ò—Å—Ç–æ—Ä–∏—è –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!');
      } catch (historyError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è:', historyError);
        // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Ç–∞–∫ –∫–∞–∫ –Ω–∞–∫–ª–∞–¥–Ω–∞—è —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞
      }

      setWizardData({
        ...wizardData,
        invoiceId: response.data.id,
        invoiceNumber: response.data.invoiceNumber,
      });

      notifications.show({
        title: '‚úÖ –ù–∞–∫–ª–∞–¥–Ω–∞—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!',
        message: `–ù–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π: ${response.data.invoiceNumber}`,
        color: 'green',
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ –Ω–æ–º–µ—Ä–∞ –Ω–∞–∫–ª–∞–¥–Ω–æ–π –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —ç–∫—Ä–∞–Ω–µ
      setCurrentStep('complete');
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–∫–ª–∞–¥–Ω–æ–π:', error);
      console.error('üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.response?.data);
      
      notifications.show({
        title: '–û—à–∏–±–∫–∞',
        message: error.response?.data?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–∫–ª–∞–¥–Ω—É—é',
        color: 'red',
      });
    } finally {
      setLoading(false);
    }
  };

  const handleStartNew = () => {
    setWizardData({
      vehicleId: '',
      supplierId: '',
      companyId: '',
      materialId: '',
      warehouseId: '',
    });
    setCurrentStep('vehicle');
  };

  const renderStep = () => {
    switch (currentStep) {
      case 'vehicle':
        return (
          <Stack gap="md">
            <Text size="xl" fw={700} ta="center">üöö –í–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç</Text>
            {!vehicles || vehicles.length === 0 ? (
              <Text size="md" c="red" ta="center">
                –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
              </Text>
            ) : (
              <Select
                size="xl"
                data={(vehicles || [])
                  .filter((v) => v && v.id && v.plate)
                  .map((v) => ({ 
                    value: v.id.toString(), 
                    label: v.plate 
                  }))}
                value={wizardData.vehicleId ?? null}
                onChange={(value) => setWizardData({ ...wizardData, vehicleId: value || undefined })}
                placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å"
                searchable
                clearable
                nothingFoundMessage="–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
              />
            )}
            <Button
              size="xl"
              fullWidth
              rightSection={<IconArrowRight size={24} />}
              onClick={handleNext}
              disabled={!wizardData.vehicleId}
            >
              –î–∞–ª–µ–µ
            </Button>
          </Stack>
        );

      case 'supplier':
        return (
          <Stack gap="md">
            <Text size="xl" fw={700} ta="center">üì¶ –û—Ç –∫–æ–≥–æ?</Text>
            <Text size="sm" c="dimmed" ta="center">–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞</Text>
            <Select
              size="xl"
              data={(suppliers || [])
                .filter((s) => s && s.id && s.name)
                .map((s) => ({ 
                  value: s.id.toString(), 
                  label: s.name 
                }))}
              value={wizardData.supplierId ?? null}
              onChange={(value) => setWizardData({ ...wizardData, supplierId: value || undefined })}
              placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"
              searchable
              clearable
            />
            <Group grow>
              <Button size="lg" variant="outline" leftSection={<IconArrowLeft />} onClick={handleBack}>
                –ù–∞–∑–∞–¥
              </Button>
              <Button size="lg" rightSection={<IconArrowRight />} onClick={handleNext} disabled={!wizardData.supplierId}>
                –î–∞–ª–µ–µ
              </Button>
            </Group>
          </Stack>
        );

      case 'company':
        return (
          <Stack gap="md">
            <Text size="xl" fw={700} ta="center">üè¢ –î–ª—è –∫–æ–≥–æ?</Text>
            <Text size="sm" c="dimmed" ta="center">–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é</Text>
            <Select
              size="xl"
              data={(companies || [])
                .filter((c) => c && c.id && c.name)
                .map((c) => ({ 
                  value: c.id.toString(), 
                  label: c.name 
                }))}
              value={wizardData.companyId ?? null}
              onChange={(value) => setWizardData({ ...wizardData, companyId: value || undefined })}
              placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é"
              searchable
              clearable
            />
            <Group grow>
              <Button size="lg" variant="outline" leftSection={<IconArrowLeft />} onClick={handleBack}>
                –ù–∞–∑–∞–¥
              </Button>
              <Button size="lg" rightSection={<IconArrowRight />} onClick={handleNext} disabled={!wizardData.companyId}>
                –î–∞–ª–µ–µ
              </Button>
            </Group>
          </Stack>
        );

      case 'material':
        return (
          <Stack gap="md">
            <Text size="xl" fw={700} ta="center">üì¶ –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≥—Ä—É–∑–∞</Text>
            <Select
              size="xl"
              data={(materials || [])
                .filter((m) => m && m.id && m.name)
                .map((m) => ({ 
                  value: m.id.toString(), 
                  label: m.name 
                }))}
              value={wizardData.materialId ?? null}
              onChange={(value) => setWizardData({ ...wizardData, materialId: value || undefined })}
              placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª"
              searchable
              clearable
            />
            <Group grow>
              <Button size="lg" variant="outline" leftSection={<IconArrowLeft />} onClick={handleBack}>
                –ù–∞–∑–∞–¥
              </Button>
              <Button size="lg" rightSection={<IconArrowRight />} onClick={handleNext} disabled={!wizardData.materialId}>
                –î–∞–ª–µ–µ
              </Button>
            </Group>
          </Stack>
        );

      case 'warehouse':
        return (
          <Stack gap="md">
            <Text size="xl" fw={700} ta="center">üè≠ –°–∫–ª–∞–¥</Text>
            <Select
              size="xl"
              data={(warehouses || [])
                .filter((w) => w && w.id && w.name)
                .map((w) => ({ 
                  value: w.id.toString(), 
                  label: w.name 
                }))}
              value={wizardData.warehouseId ?? null}
              onChange={(value) => setWizardData({ ...wizardData, warehouseId: value || undefined })}
              placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥"
              searchable
              clearable
            />
            <Group grow>
              <Button size="lg" variant="outline" leftSection={<IconArrowLeft />} onClick={handleBack}>
                –ù–∞–∑–∞–¥
              </Button>
              <Button size="lg" rightSection={<IconArrowRight />} onClick={handleNext} disabled={!wizardData.warehouseId}>
                –î–∞–ª–µ–µ
              </Button>
            </Group>
          </Stack>
        );

      case 'brutto':
        return (
          <Stack gap="md">
            <Text size="xl" fw={700} ta="center">‚öñÔ∏è –í–∑–≤–µ—à–∏–≤–∞–Ω–∏–µ –ë–†–£–¢–¢–û</Text>
            <Text size="md" ta="center" c="dimmed">
              –ó–∞–µ–∑–∂–∞–π—Ç–µ –Ω–∞ –≤–µ—Å—ã —Å –≥—Ä—É–∑–æ–º
            </Text>
            
            {/* –¢–µ–∫—É—â–∏–π –≤–µ—Å */}
            {!wizardData.grossWeight && (
              <Box p="md" style={{ backgroundColor: scaleConnected ? '#e7f5ff' : '#fff3cd', borderRadius: 8 }}>
                <Text size="sm" c="dimmed" ta="center">
                  {scaleConnected ? '‚öñÔ∏è –¢–µ–∫—É—â–∏–π –≤–µ—Å:' : '‚ö†Ô∏è –í–µ—Å—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã'}
                </Text>
                <Text size="3xl" fw={900} ta="center" c={scaleConnected ? 'blue' : 'orange'}>
                  {liveWeight !== null ? `${liveWeight.toFixed(1)} –∫–≥` : '-- –∫–≥'}
                </Text>
              </Box>
            )}

            {wizardData.grossWeight && (
              <Box p="md" style={{ backgroundColor: '#e7f5ff', borderRadius: 8 }}>
                <Text size="sm" c="dimmed" ta="center">–í–µ—Å –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω:</Text>
                <Text size="3xl" fw={900} ta="center" c="blue">
                  {wizardData.grossWeight} –∫–≥
                </Text>
              </Box>
            )}
            <Button
              size="xl"
              fullWidth
              color="blue"
              leftSection={<IconScale size={24} />}
              onClick={handleWeighBrutto}
              loading={loading}
              disabled={!!wizardData.grossWeight}
            >
              {wizardData.grossWeight ? '‚úì –í–µ—Å –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω' : '–ó–ê–§–ò–ö–°–ò–†–û–í–ê–¢–¨ –ë–†–£–¢–¢–û'}
            </Button>
          </Stack>
        );

      case 'unload':
        return (
          <Stack gap="md">
            <Text size="xl" fw={700} ta="center">üöõ –†–∞–∑–≥—Ä—É–∑–∫–∞</Text>
            <Box p="xl" style={{ backgroundColor: '#fff3bf', borderRadius: 8 }}>
              <Text size="lg" ta="center" fw={600} mb="md">
                ‚ö†Ô∏è –ï–∑–∂–∞–π—Ç–µ –≤—ã–≥—Ä—É–∂–∞–π—Ç–µ—Å—å!
              </Text>
              <Text size="md" ta="center" c="dimmed">
                –ü–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –Ω–∞ –≤–µ—Å—ã –ø—É—Å—Ç—ã–º –Ω–∞–∂–º–∏—Ç–µ "–î–∞–ª–µ–µ"
              </Text>
            </Box>
            <Box p="md" style={{ backgroundColor: '#e7f5ff', borderRadius: 8 }}>
              <Text size="sm" c="dimmed" ta="center">–ë–†–£–¢–¢–û:</Text>
              <Text size="2xl" fw={700} ta="center" c="blue">
                {wizardData.grossWeight} –∫–≥
              </Text>
            </Box>
            <Button
              size="xl"
              fullWidth
              color="orange"
              rightSection={<IconArrowRight size={24} />}
              onClick={handleNext}
            >
              –î–∞–ª–µ–µ (–≤–µ—Ä–Ω—É–ª—Å—è –ø—É—Å—Ç—ã–º)
            </Button>
          </Stack>
        );

      case 'tara':
        return (
          <Stack gap="md">
            <Text size="xl" fw={700} ta="center">‚öñÔ∏è –í–∑–≤–µ—à–∏–≤–∞–Ω–∏–µ –¢–ê–†–ê</Text>
            <Text size="md" ta="center" c="dimmed">
              –ó–∞–µ–∑–∂–∞–π—Ç–µ –Ω–∞ –≤–µ—Å—ã –ø—É—Å—Ç—ã–º
            </Text>
            
            {/* –¢–µ–∫—É—â–∏–π –≤–µ—Å */}
            {!wizardData.tareWeight && (
              <Box p="md" style={{ backgroundColor: scaleConnected ? '#e7f5ff' : '#fff3cd', borderRadius: 8 }}>
                <Text size="sm" c="dimmed" ta="center">
                  {scaleConnected ? '‚öñÔ∏è –¢–µ–∫—É—â–∏–π –≤–µ—Å:' : '‚ö†Ô∏è –í–µ—Å—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã'}
                </Text>
                <Text size="3xl" fw={900} ta="center" c={scaleConnected ? 'blue' : 'orange'}>
                  {liveWeight !== null ? `${liveWeight.toFixed(1)} –∫–≥` : '-- –∫–≥'}
                </Text>
              </Box>
            )}

            {wizardData.tareWeight && (
              <Box p="md" style={{ backgroundColor: '#fff3bf', borderRadius: 8 }}>
                <Group grow>
                  <Box>
                    <Text size="xs" c="dimmed" ta="center">–ë–†–£–¢–¢–û:</Text>
                    <Text size="lg" fw={700} ta="center">{wizardData.grossWeight} –∫–≥</Text>
                  </Box>
                  <Box>
                    <Text size="xs" c="dimmed" ta="center">–¢–ê–†–ê:</Text>
                    <Text size="lg" fw={700} ta="center" c="orange">{wizardData.tareWeight} –∫–≥</Text>
                  </Box>
                  <Box>
                    <Text size="xs" c="dimmed" ta="center">–ù–ï–¢–¢–û:</Text>
                    <Text size="lg" fw={700} ta="center" c="green">{wizardData.netWeight?.toFixed(1)} –∫–≥</Text>
                  </Box>
                </Group>
              </Box>
            )}
            <Button
              size="xl"
              fullWidth
              color="orange"
              leftSection={<IconScale size={24} />}
              onClick={handleWeighTara}
              loading={loading}
              disabled={!!wizardData.tareWeight}
            >
              {wizardData.tareWeight ? '‚úì –í–µ—Å –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω' : '–ó–ê–§–ò–ö–°–ò–†–û–í–ê–¢–¨ –¢–ê–†–ê'}
            </Button>
            {wizardData.tareWeight && (
              <Button
                size="xl"
                fullWidth
                color="green"
                leftSection={<IconCheck size={24} />}
                onClick={handleNext}
                loading={loading}
              >
                –°–û–•–†–ê–ù–ò–¢–¨
              </Button>
            )}
          </Stack>
        );

      case 'complete':
        return (
          <Stack gap="md">
            {wizardData.invoiceNumber ? (
              // –ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π
              <>
                <Box ta="center">
                  <IconCheck size={80} color="green" />
                </Box>
                <Text size="xl" fw={700} ta="center" c="green">
                  ‚úÖ –ù–∞–∫–ª–∞–¥–Ω–∞—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!
                </Text>
                <Card shadow="sm" padding="lg" radius="md" style={{ backgroundColor: '#f0f9ff' }}>
                  <Stack gap="xs">
                    <Text size="sm" c="dimmed" ta="center">–ù–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π:</Text>
                    <Text size="2xl" fw={900} ta="center" c="blue">
                      {wizardData.invoiceNumber}
                    </Text>
                    <Box mt="md">
                      <Group grow>
                        <Box>
                          <Text size="xs" c="dimmed">–ë–†–£–¢–¢–û:</Text>
                          <Text size="lg" fw={700}>{wizardData.grossWeight} –∫–≥</Text>
                        </Box>
                        <Box>
                          <Text size="xs" c="dimmed">–¢–ê–†–ê:</Text>
                          <Text size="lg" fw={700}>{wizardData.tareWeight} –∫–≥</Text>
                        </Box>
                        <Box>
                          <Text size="xs" c="dimmed">–ù–ï–¢–¢–û:</Text>
                          <Text size="lg" fw={700} c="green">{wizardData.netWeight?.toFixed(1)} –∫–≥</Text>
                        </Box>
                      </Group>
                    </Box>
                  </Stack>
                </Card>
                <Box p="md" style={{ backgroundColor: '#d0f4de', borderRadius: 8 }}>
                  <Text size="lg" ta="center" fw={600}>
                    üéâ –£–¥–∞—á–∏ –Ω–∞ –¥–æ—Ä–æ–≥–µ!
                  </Text>
                </Box>
                <Button
                  size="xl"
                  fullWidth
                  color="blue"
                  onClick={handleStartNew}
                >
                  –ù–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏–µ
                </Button>
              </>
            ) : (
              // –î–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
              <>
                <Box ta="center">
                  <IconCheck size={80} color="blue" />
                </Box>
                <Text size="xl" fw={700} ta="center" c="blue">
                  –ì–æ—Ç–æ–≤–æ –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é
                </Text>
                <Card shadow="sm" padding="lg" radius="md" style={{ backgroundColor: '#f0f9ff' }}>
                  <Stack gap="xs">
                    <Text size="sm" c="dimmed" ta="center">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è:</Text>
                    <Box mt="md">
                      <Group grow>
                        <Box>
                          <Text size="xs" c="dimmed">–ë–†–£–¢–¢–û:</Text>
                          <Text size="lg" fw={700}>{wizardData.grossWeight} –∫–≥</Text>
                        </Box>
                        <Box>
                          <Text size="xs" c="dimmed">–¢–ê–†–ê:</Text>
                          <Text size="lg" fw={700}>{wizardData.tareWeight} –∫–≥</Text>
                        </Box>
                        <Box>
                          <Text size="xs" c="dimmed">–ù–ï–¢–¢–û:</Text>
                          <Text size="lg" fw={700} c="green">{wizardData.netWeight?.toFixed(1)} –∫–≥</Text>
                        </Box>
                      </Group>
                    </Box>
                  </Stack>
                </Card>
                <Button
                  size="xl"
                  fullWidth
                  color="green"
                  leftSection={<IconCheck size={24} />}
                  onClick={handleSave}
                  loading={loading}
                >
                  –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑—É
                </Button>
                <Button
                  size="xl"
                  fullWidth
                  color="blue"
                  onClick={handleStartNew}
                >
                  –ù–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏–µ
                </Button>
              </>
            )}
          </Stack>
        );

      default:
        return null;
    }
  };

  const getStepNumber = () => {
    const steps: Step[] = ['vehicle', 'supplier', 'company', 'material', 'warehouse', 'brutto', 'unload', 'tara', 'complete'];
    return steps.indexOf(currentStep) + 1;
  };

  if (dataLoading) {
    return (
      <Container size="sm" className={styles.container}>
        <Title order={2} className={styles.title} mb="md">‚öñÔ∏è –í–∑–≤–µ—à–∏–≤–∞–Ω–∏–µ</Title>
        <Card shadow="md" padding="xl" radius="md">
          <Text size="lg" ta="center">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</Text>
        </Card>
      </Container>
    );
  }


  return (
    <Container size="sm" className={styles.container}>
      <Title order={2} className={styles.title} mb="md">‚öñÔ∏è –í–∑–≤–µ—à–∏–≤–∞–Ω–∏–µ</Title>
      
      {currentStep !== 'complete' && (
        <Group justify="center" mb="lg">
          <Badge size="xl" color="blue" variant="filled">
            –®–∞–≥ {getStepNumber()} –∏–∑ 9
          </Badge>
        </Group>
      )}

      <Card shadow="md" padding="xl" radius="md">
        {renderStep()}
      </Card>
    </Container>
  );
}

