import { useState, useEffect } from 'react';
import { Button } from '../components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../components/ui/card';
import { Input } from '../components/ui/input';
import { Label } from '../components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../components/ui/select';
import { useNotifications } from '../hooks/useNotifications';
import { Mail, Settings, Save, TestTube } from 'lucide-react';

interface EmailSettings {
  MAIL_SERVICE: string;
  MAIL_USER: string;
  MAIL_PASS: string;
  MAIL_TO: string;
  MAIL_HOST: string;
  MAIL_PORT: string;
  MAIL_SECURE: boolean;
}

export default function EmailSettingsPage() {
  const [settings, setSettings] = useState<EmailSettings>({
    MAIL_SERVICE: 'gmail',
    MAIL_USER: '',
    MAIL_PASS: '',
    MAIL_TO: '',
    MAIL_HOST: '',
    MAIL_PORT: '587',
    MAIL_SECURE: false,
  });
  
  const [isLoading, setIsLoading] = useState(false);
  const [isSaving, setIsSaving] = useState(false);
  const [message, setMessage] = useState('');
  const [showPassword, setShowPassword] = useState(false);

  const { success, error } = useNotifications();

  useEffect(() => {
    loadSettings();
  }, []);

  const loadSettings = async () => {
    try {
      const response = await fetch('/api/v1/settings/email');
      if (response.ok) {
        const data = await response.json();
        setSettings({
          MAIL_SERVICE: data.MAIL_SERVICE || 'gmail',
          MAIL_USER: data.MAIL_USER || '',
          MAIL_PASS: data.MAIL_PASS || '',
          MAIL_TO: data.MAIL_TO || '',
          MAIL_HOST: data.MAIL_HOST || '',
          MAIL_PORT: data.MAIL_PORT || '587',
          MAIL_SECURE: data.MAIL_SECURE || false,
        });
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
    }
  };

  const handleSave = async () => {
    setIsSaving(true);
    setMessage('');
    
    try {
      const response = await fetch('/api/v1/settings/email', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(settings),
      });

      if (response.ok) {
        setMessage('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
        success('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ email —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
        setTimeout(() => setMessage(''), 3000);
      } else {
        const errorData = await response.json();
        error(errorData.message || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫');
      }
    } catch (err) {
      error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫');
    } finally {
      setIsSaving(false);
    }
  };

  const handleTestConnection = async () => {
    setIsLoading(true);
    try {
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å endpoint –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      const response = await fetch('/api/v1/settings/email/test', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(settings),
      });

      if (response.ok) {
        success('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–æ—á—Ç–µ —É—Å–ø–µ—à–Ω–æ!');
      } else {
        error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–æ—á—Ç–µ');
      }
    } catch (err) {
      error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
    } finally {
      setIsLoading(false);
    }
  };

  const updateSetting = (key: keyof EmailSettings, value: string | boolean) => {
    setSettings(prev => ({ ...prev, [key]: value }));
  };

  return (
    <div className="container mx-auto p-6 max-w-4xl">
      <div className="flex items-center justify-between mb-6">
        <div>
          <h1 className="text-3xl font-bold">üìß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Email</h1>
          <p className="text-muted-foreground">–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—Ä—Ö–∏–≤–æ–≤ —Ñ–æ—Ç–æ</p>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Mail className="h-5 w-5" />
              –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—á—Ç—ã
            </CardTitle>
            <CardDescription>
              –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—Ä—Ö–∏–≤–æ–≤ —Ñ–æ—Ç–æ
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="mail_service">–ü–æ—á—Ç–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å</Label>
              <Select
                value={settings.MAIL_SERVICE}
                onValueChange={(value) => updateSetting('MAIL_SERVICE', value)}
              >
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="gmail">Gmail</SelectItem>
                  <SelectItem value="mail.ru">Mail.ru</SelectItem>
                  <SelectItem value="yandex">Yandex</SelectItem>
                  <SelectItem value="custom">–î—Ä—É–≥–æ–π (–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä—É—á–Ω—É—é)</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label htmlFor="mail_user">–ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è</Label>
              <Input
                id="mail_user"
                type="email"
                value={settings.MAIL_USER}
                onChange={(e) => updateSetting('MAIL_USER', e.target.value)}
                placeholder="example@gmail.com"
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="mail_pass">–ü–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</Label>
              <div className="relative">
                <Input
                  id="mail_pass"
                  type={showPassword ? 'text' : 'password'}
                  value={settings.MAIL_PASS}
                  onChange={(e) => updateSetting('MAIL_PASS', e.target.value)}
                  placeholder="–ü–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä–æ–ª—å"
                />
                <Button
                  type="button"
                  variant="ghost"
                  size="sm"
                  className="absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent"
                  onClick={() => setShowPassword(!showPassword)}
                >
                  {showPassword ? 'üëÅÔ∏è' : 'üôà'}
                </Button>
              </div>
              <p className="text-xs text-muted-foreground">
                –î–ª—è Gmail –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
              </p>
            </div>

            <div className="space-y-2">
              <Label htmlFor="mail_to">–ö–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∞—Ä—Ö–∏–≤</Label>
              <Input
                id="mail_to"
                type="email"
                value={settings.MAIL_TO}
                onChange={(e) => updateSetting('MAIL_TO', e.target.value)}
                placeholder="admin@company.com"
              />
            </div>
          </CardContent>
        </Card>

        {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Settings className="h-5 w-5" />
              –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            </CardTitle>
            <CardDescription>
              –î–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö SMTP —Å–µ—Ä–≤–µ—Ä–æ–≤
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="mail_host">SMTP —Ö–æ—Å—Ç</Label>
              <Input
                id="mail_host"
                value={settings.MAIL_HOST}
                onChange={(e) => updateSetting('MAIL_HOST', e.target.value)}
                placeholder="smtp.example.com"
                disabled={settings.MAIL_SERVICE !== 'custom'}
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="mail_port">SMTP –ø–æ—Ä—Ç</Label>
              <Input
                id="mail_port"
                type="number"
                value={settings.MAIL_PORT}
                onChange={(e) => updateSetting('MAIL_PORT', e.target.value)}
                placeholder="587"
                disabled={settings.MAIL_SERVICE !== 'custom'}
              />
            </div>

            <div>
              <Label htmlFor="mail_secure">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å SSL/TLS</Label>
              <Select
                value={settings.MAIL_SECURE.toString()}
                onValueChange={(value) => updateSetting('MAIL_SECURE', value)}
                disabled={settings.MAIL_SERVICE !== 'custom'}
              >
                <SelectTrigger>
                  <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="true">–î–∞</SelectItem>
                  <SelectItem value="false">–ù–µ—Ç</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="p-4 bg-blue-50 border border-blue-200 rounded-lg">
              <h4 className="font-medium text-blue-900 mb-2">‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h4>
              <ul className="text-sm text-blue-700 space-y-1">
                <li>‚Ä¢ –ê—Ä—Ö–∏–≤—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 3:00</li>
                <li>‚Ä¢ –§–æ—Ç–æ —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π –∞—Ä—Ö–∏–≤–∏—Ä—É—é—Ç—Å—è</li>
                <li>‚Ä¢ –°—Ç–∞—Ä—ã–µ –∞—Ä—Ö–∏–≤—ã —É–¥–∞–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é</li>
                <li>‚Ä¢ –î–ª—è Gmail –Ω—É–∂–µ–Ω –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</li>
              </ul>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
      <div className="flex gap-4 mt-6">
        <Button
          onClick={handleSave}
          disabled={isSaving}
          className="flex items-center gap-2"
        >
          <Save className="h-4 w-4" />
          {isSaving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'}
        </Button>

        <Button
          onClick={handleTestConnection}
          disabled={isLoading || !settings.MAIL_USER || !settings.MAIL_PASS}
          variant="outline"
          className="flex items-center gap-2"
        >
          <TestTube className="h-4 w-4" />
          {isLoading ? '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...' : '–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è'}
        </Button>
      </div>

      {message && (
        <div className="mt-4 p-4 bg-green-50 border border-green-200 rounded-lg text-green-700">
          {message}
        </div>
      )}

      {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ Gmail */}
      {settings.MAIL_SERVICE === 'gmail' && (
        <Card className="mt-6">
          <CardHeader>
            <CardTitle>üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ Gmail</CardTitle>
          </CardHeader>
          <CardContent>
            <ol className="list-decimal list-inside space-y-2 text-sm">
              <li>–í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π Google –∞–∫–∫–∞—É–Ω—Ç</li>
              <li>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å" ‚Üí "–î–≤—É—Ö—ç—Ç–∞–ø–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"</li>
              <li>–í —Ä–∞–∑–¥–µ–ª–µ "–ü–∞—Ä–æ–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π" —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å</li>
              <li>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ –ø–æ–ª–µ "–ü–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"</li>
              <li>–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</li>
            </ol>
          </CardContent>
        </Card>
      )}
    </div>
  );
}

