import React, { useState, useEffect } from 'react';
import { DataTable, type Column } from '../components/ui/data-table';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from '../components/ui/dialog';
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from '../components/ui/alert-dialog';
import { Button } from '../components/ui/button';
import { Input } from '../components/ui/input';
import { Label } from '../components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../components/ui/select';
import { ViewToggle } from '../components/ViewToggle';
import { EntityCard } from '../components/EntityCard';
import { materialsApi } from '../services/api';
import type { Material, MaterialType } from '../types';
import { MaterialTypeEnum } from '../types';
import { useNotifications } from '../hooks/useNotifications';
import { useApiData } from '../hooks/useApiData';
import { cleanFormData } from '../utils/dataUtils';

export const MaterialsPageNew: React.FC = () => {
  const [modalOpen, setModalOpen] = useState(false);
  const [confirmOpen, setConfirmOpen] = useState(false);
  const [editingMaterial, setEditingMaterial] = useState<Material | null>(null);
  const [deleteId, setDeleteId] = useState<number | null>(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [viewMode, setViewMode] = useState<'table' | 'cards'>('table');
  
  const { success, error } = useNotifications();
  
  const { data: materials, loading, refetch } = useApiData<Material>({
    apiCall: () => materialsApi.getAll({ search: searchQuery }),
    dependencies: [searchQuery]
  });

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
  const { data: materialTypes, loading: typesLoading } = useApiData<MaterialType>({
    apiCall: () => materialsApi.getTypes(),
    dependencies: []
  });

  // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ç–∏–ø–æ–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
  useEffect(() => {
    console.log('üîÑ –°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–ø–æ–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:', { typesLoading, materialTypes });
    if (materialTypes && materialTypes.length === 0) {
      console.log('‚ö†Ô∏è –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Ç–∏–ø–æ–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤!');
    }
  }, [typesLoading, materialTypes]);

  const [formData, setFormData] = useState({
    name: '',
    unit: '',
    typeName: '',
  });

  const [formErrors, setFormErrors] = useState<Record<string, string>>({});

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ç–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    if (!formData.typeName) {
      if (materialTypes && materialTypes.length > 0) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π —Ç–∏–ø –∏–∑ API
        setFormData(prev => ({ ...prev, typeName: materialTypes[0].name }));
      } else {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π —Ç–∏–ø –∏–∑ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞ (–≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω)
        setFormData(prev => ({ ...prev, typeName: MaterialTypeEnum.CEMENT }));
      }
    }
  }, [materialTypes, formData.typeName]);

  // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∫–∞–∫ fallback
  const staticMaterialTypes = [
    { name: MaterialTypeEnum.CEMENT, label: '–¶–µ–º–µ–Ω—Ç' },
    { name: MaterialTypeEnum.SAND, label: '–ü–µ—Å–æ–∫' },
    { name: MaterialTypeEnum.GRAVEL, label: '–©–µ–±–µ–Ω—å' },
    { name: MaterialTypeEnum.WATER, label: '–í–æ–¥–∞' },
    { name: MaterialTypeEnum.ADDITIVE, label: '–î–æ–±–∞–≤–∫–∞' },
  ];

  const materialTypeLabels = {
    [MaterialTypeEnum.CEMENT]: '–¶–µ–º–µ–Ω—Ç',
    [MaterialTypeEnum.SAND]: '–ü–µ—Å–æ–∫',
    [MaterialTypeEnum.GRAVEL]: '–©–µ–±–µ–Ω—å',
    [MaterialTypeEnum.WATER]: '–í–æ–¥–∞',
    [MaterialTypeEnum.ADDITIVE]: '–î–æ–±–∞–≤–∫–∞',
  };

  const unitOptions = [
    { value: '–∫–≥', label: '–ö–∏–ª–æ–≥—Ä–∞–º–º (–∫–≥)' },
    { value: '—Ç', label: '–¢–æ–Ω–Ω–∞ (—Ç)' },
    { value: '–º¬≥', label: '–ö—É–±–∏—á–µ—Å–∫–∏–π –º–µ—Ç—Ä (–º¬≥)' },
    { value: '–ª', label: '–õ–∏—Ç—Ä (–ª)' },
    { value: '—à—Ç', label: '–®—Ç—É–∫–∞ (—à—Ç)' },
    { value: '—É–ø–∞–∫', label: '–£–ø–∞–∫–æ–≤–∫–∞ (—É–ø–∞–∫)' },
  ];

  const columns: Column<Material>[] = [
    { id: 'name', label: '–ù–∞–∑–≤–∞–Ω–∏–µ', minWidth: 200 },
    { 
      id: 'type', 
      label: '–¢–∏–ø', 
      minWidth: 120,
      render: (value) => (
        <span className="px-2 py-1 rounded text-xs bg-blue-100 text-blue-800">
          {materialTypeLabels[value?.name as MaterialTypeEnum] || value?.name}
        </span>
      )
    },
    { id: 'unit', label: '–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è', minWidth: 150 },
  ];

  const validateForm = (): boolean => {
    const errors: Record<string, string> = {};

    if (!formData.name.trim()) {
      errors.name = '–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
    }

    if (!formData.unit.trim()) {
      errors.unit = '–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞';
    }

    setFormErrors(errors);
    return Object.keys(errors).length === 0;
  };

  const handleSubmit = async () => {
    if (!validateForm()) return;

    try {
      // –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –∏–∑ API –∏–ª–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞
      const selectedType = materialTypes?.find(type => type.name === formData.typeName) ||
                          staticMaterialTypes.find(type => type.name === formData.typeName);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Ñ–æ—Ä–º—ã
      const typeNameToSend = selectedType?.name || formData.typeName || MaterialTypeEnum.CEMENT;
      
      const rawData = {
        name: formData.name.trim(),
        unit: formData.unit.trim(),
        typeName: typeNameToSend,
      };
      
      console.log('üìã –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π:', rawData);
      
      const data = cleanFormData(rawData, ['unit']);
      
      console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞:', data);
      console.log('–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:', formData);
      console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (API):', materialTypes);
      console.log('–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–∏–ø—ã –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:', staticMaterialTypes);
      console.log('üéØ –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø:', selectedType);
      console.log('‚úÖ –ò—Ç–æ–≥–æ–≤—ã–π typeName –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:', typeNameToSend);
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º typeName:', {
        'formData.typeName': formData.typeName,
        'selectedType?.name': selectedType?.name,
        'typeNameToSend': typeNameToSend,
        'isValid': Object.values(MaterialTypeEnum).includes(typeNameToSend as MaterialTypeEnum)
      });

      if (editingMaterial) {
        await materialsApi.update(editingMaterial.id, data);
        success('–ú–∞—Ç–µ—Ä–∏–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω');
      } else {
        await materialsApi.create(data);
        success('–ú–∞—Ç–µ—Ä–∏–∞–ª —Å–æ–∑–¥–∞–Ω');
      }

      resetForm();
      refetch();
    } catch (err: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞:', err);
      console.error('üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
        status: err.response?.status,
        data: err.response?.data,
        message: err.response?.data?.message,
        errors: err.response?.data?.errors
      });
      console.error('üîç –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', JSON.stringify(err.response?.data, null, 2));
      error(err.response?.data?.message || err.response?.data?.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏');
    }
  };

  const handleEdit = (material: Material) => {
    setEditingMaterial(material);
    setFormData({
      name: material.name,
      unit: material.unit,
      typeName: material.type?.name || MaterialTypeEnum.CEMENT,
    });
    setModalOpen(true);
  };

  const handleDelete = async () => {
    if (!deleteId) return;

    try {
      await materialsApi.delete(deleteId);
      success('–ú–∞—Ç–µ—Ä–∏–∞–ª —É–¥–∞–ª–µ–Ω');
      setConfirmOpen(false);
      setDeleteId(null);
      refetch();
    } catch (err: any) {
      error(err.response?.data?.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏');
    }
  };

  const resetForm = () => {
    setFormData({
      name: '',
      unit: '',
      typeName: MaterialTypeEnum.CEMENT,
    });
    setFormErrors({});
    setEditingMaterial(null);
    setModalOpen(false);
  };

  const handleAdd = () => {
    resetForm();
    setModalOpen(true);
  };

  return (
    <div className="p-6">
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3 mb-6">
        <h1 className="text-2xl font-bold">–ú–∞—Ç–µ—Ä–∏–∞–ª—ã</h1>
        <div className="flex gap-2 w-full sm:w-auto">
          <ViewToggle view={viewMode} onViewChange={setViewMode} />
          <Button onClick={handleAdd} className="bg-gray-800 hover:bg-gray-900 flex-1 sm:flex-initial">
            <span className="sm:inline">–î–æ–±–∞–≤–∏—Ç—å</span>
          </Button>
        </div>
      </div>

      <div className="mb-4">
        <Input
          placeholder="–ü–æ–∏—Å–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤..."
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
          className="max-w-md"
        />
      </div>

      {viewMode === 'table' ? (
        <DataTable
          data={materials}
          columns={columns}
          loading={loading}
          searchable={false}
          onEdit={handleEdit}
          onDelete={(material) => {
            setDeleteId(material.id);
            setConfirmOpen(true);
          }}
        />
      ) : (
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
          {loading ? (
            <p className="col-span-full text-center py-8 text-gray-500">–ó–∞–≥—Ä—É–∑–∫–∞...</p>
          ) : materials && materials.length > 0 ? (
            materials.map((material) => (
              <EntityCard
                key={material.id}
                title={material.name}
                badge={{
                  label: materialTypeLabels[material.type?.name as MaterialTypeEnum] || material.type?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                  variant: 'default'
                }}
                fields={[
                  { label: '–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è', value: material.unit },
                  { label: '–¢–∏–ø', value: materialTypeLabels[material.type?.name as MaterialTypeEnum] || material.type?.name }
                ]}
                onEdit={() => handleEdit(material)}
                onDelete={() => {
                  setDeleteId(material.id);
                  setConfirmOpen(true);
                }}
              />
            ))
          ) : (
            <p className="col-span-full text-center py-8 text-gray-500">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</p>
          )}
        </div>
      )}

      <Dialog open={modalOpen} onOpenChange={setModalOpen}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle>
              {editingMaterial ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª' : '–î–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª'}
            </DialogTitle>
          
            <DialogDescription>
              –í–Ω–µ—Å–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –¥–∞–Ω–Ω—ã–µ
            </DialogDescription>
          </DialogHeader>
          
          <div className="grid grid-cols-2 gap-4">
            <div className="col-span-2">
              <Label htmlFor="name">–ù–∞–∑–≤–∞–Ω–∏–µ *</Label>
              <Input
                id="name"
                value={formData.name}
                onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞"
              />
              {formErrors.name && (
                <p className="text-red-500 text-sm mt-1">{formErrors.name}</p>
              )}
            </div>

            <div>
              <Label htmlFor="typeName">–¢–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–∞</Label>
              <Select
                value={formData.typeName}
                onValueChange={(value: MaterialTypeEnum) => 
                  setFormData({ ...formData, typeName: value })
                }
              >
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
            <SelectContent>
              {materialTypes && materialTypes.length > 0 ? (
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø—ã –∏–∑ API
                materialTypes.map((type) => (
                  <SelectItem key={type.name} value={type.name}>
                    {materialTypeLabels[type.name as MaterialTypeEnum] || type.name}
                  </SelectItem>
                ))
              ) : (
                // Fallback –∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–º—É —Å–ø–∏—Å–∫—É
                staticMaterialTypes.map((type) => (
                  <SelectItem key={type.name} value={type.name}>
                    {type.label}
                  </SelectItem>
                ))
              )}
            </SelectContent>
              </Select>
            </div>

            <div>
              <Label htmlFor="unit">–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è *</Label>
              <Select
                value={formData.unit}
                onValueChange={(value) => setFormData({ ...formData, unit: value })}
              >
                <SelectTrigger>
                  <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è" />
                </SelectTrigger>
                <SelectContent>
                  {unitOptions.map((option) => (
                    <SelectItem key={option.value} value={option.value}>
                      {option.label}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
              {formErrors.unit && (
                <p className="text-red-500 text-sm mt-1">{formErrors.unit}</p>
              )}
            </div>
          </div>

          <DialogFooter>
            <Button variant="outline" onClick={resetForm}>
              –û—Ç–º–µ–Ω–∞
            </Button>
            <Button onClick={handleSubmit} className="bg-gray-800 hover:bg-gray-900">
              {editingMaterial ? '–û–±–Ω–æ–≤–∏—Ç—å' : '–°–æ–∑–¥–∞—Ç—å'}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      <AlertDialog open={confirmOpen} onOpenChange={setConfirmOpen}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ</AlertDialogTitle>
            <AlertDialogDescription>
              –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>–û—Ç–º–µ–Ω–∞</AlertDialogCancel>
            <AlertDialogAction onClick={handleDelete} className="bg-red-600 hover:bg-red-700">
              –£–¥–∞–ª–∏—Ç—å
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </div>
  );
};
