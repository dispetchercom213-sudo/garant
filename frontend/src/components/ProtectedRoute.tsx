import React from 'react';
import { Navigate, useLocation } from 'react-router-dom';
import { useAuthStore } from '../stores/authStore';
import { Box, CircularProgress } from '@mui/material';
import { getStoredToken, getStoredUser } from '../utils/tokenUtils';

interface ProtectedRouteProps {
  children: React.ReactNode;
  requiredRoles?: string[];
}

export const ProtectedRoute: React.FC<ProtectedRouteProps> = ({ 
  children, 
  requiredRoles = [] 
}) => {
  const { isAuthenticated, user, isLoading } = useAuthStore();
  const location = useLocation();

  // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const token = getStoredToken();
  const storedUser = getStoredUser();
  
  console.log('üîí ProtectedRoute –ø—Ä–æ–≤–µ—Ä–∫–∞:', {
    token: token ? '–µ—Å—Ç—å' : '–Ω–µ—Ç',
    user: storedUser ? '–µ—Å—Ç—å' : '–Ω–µ—Ç',
    isAuthenticated,
    storeUser: user ? `${user.username} (${user.role})` : '–Ω–µ—Ç',
    isLoading,
    path: location.pathname
  });
  
  // –ï—Å–ª–∏ –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —Ä–µ–¥–∏—Ä–µ–∫—Ç
  if (!token || !storedUser) {
    console.log('‚ùå –ù–µ—Ç –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –ª–æ–≥–∏–Ω');
    return <Navigate to="/login" state={{ from: location }} replace />;
  }

  // –ï—Å–ª–∏ store –µ—â–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
  if (isLoading) {
    return (
      <Box 
        display="flex" 
        justifyContent="center" 
        alignItems="center" 
        minHeight="100vh"
      >
        <CircularProgress />
      </Box>
    );
  }

  // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π, –Ω–æ store –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
  const currentUser = user || storedUser;
  if (!currentUser) {
    console.log('‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ store –∏ localStorage, —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –ª–æ–≥–∏–Ω');
    return <Navigate to="/login" state={{ from: location }} replace />;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª–∏, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
  if (requiredRoles.length > 0 && !requiredRoles.includes(currentUser.role)) {
    console.log(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤. –¢—Ä–µ–±—É–µ—Ç—Å—è: ${requiredRoles.join(', ')}, –µ—Å—Ç—å: ${currentUser.role}`);
    return <Navigate to="/unauthorized" replace />;
  }

  return <>{children}</>;
};