import { useState } from 'react';
import { Modal, TextInput, Button, Group, Stack, Text, Alert, Select, ActionIcon, Tooltip, Checkbox } from '@mantine/core';
import { IconScale, IconSearch, IconPlugConnected, IconCopy, IconCheck, IconX, IconAlertCircle, IconCamera } from '@tabler/icons-react';
import { api } from '../services/api';
import { useNotifications } from '../hooks/useNotifications';

interface ScaleBridgeDevice {
  ip: string;
  url: string;
  weight: number;
}

interface ScaleSettingsModalProps {
  opened: boolean;
  onClose: () => void;
  warehouseId: number | null;
  onSuccess?: () => void;
}

export function ScaleSettingsModal({ opened, onClose, warehouseId, onSuccess }: ScaleSettingsModalProps) {
  const [scaleIp, setScaleIp] = useState('');
  const [apiKey, setApiKey] = useState('');
  const [comPort, setComPort] = useState('COM3');
  const [hasCamera, setHasCamera] = useState(false);
  const [loading, setLoading] = useState(false);
  const [scanning, setScanning] = useState(false);
  const [devices, setDevices] = useState<ScaleBridgeDevice[]>([]);
  const [testResult, setTestResult] = useState<{ success: boolean; message: string; weight?: number } | null>(null);
  const [copied, setCopied] = useState(false);
  
  const { success, error } = useNotifications();

  // –ü–æ–∏—Å–∫ ScaleBridge —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ —Å–µ—Ç–∏
  const handleScan = async () => {
    setScanning(true);
    setDevices([]);
    try {
      const subnet = scaleIp.split('.').slice(0, 3).join('.') || '192.168.1';
      const response = await api.get<ScaleBridgeDevice[]>(`/scale/discover?subnet=${subnet}`);
      setDevices(response.data);
      
      if (response.data.length === 0) {
        error('ScaleBridge —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–µ—Ç–∏');
      } else {
        success(`–ù–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: ${response.data.length}`);
      }
    } catch (err) {
      error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤');
    } finally {
      setScanning(false);
    }
  };

  // –í—ã–±–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö
  const handleSelectDevice = (device: ScaleBridgeDevice) => {
    setScaleIp(device.ip);
    setDevices([]);
    success(`–í—ã–±—Ä–∞–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${device.ip}`);
  };

  // –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å ScaleBridge
  const handleTestConnection = async () => {
    if (!scaleIp || !apiKey) {
      error('–í–≤–µ–¥–∏—Ç–µ IP –∞–¥—Ä–µ—Å –∏ –ø–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á');
      return;
    }

    if (!warehouseId) {
      error('–ù–µ –≤—ã–±—Ä–∞–Ω —Å–∫–ª–∞–¥');
      return;
    }

    setLoading(true);
    setTestResult(null);
    try {
      const response = await api.post<{ success: boolean; message: string; weight?: number }>(
        `/scale/${warehouseId}/test-connection`,
        { scaleIp, apiKey }
      );
      
      setTestResult(response.data);
      success('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!');
    } catch (err: any) {
      setTestResult({
        success: false,
        message: err.response?.data?.message || '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ScaleBridge',
      });
      error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ ScaleBridge');
    } finally {
      setLoading(false);
    }
  };

  // –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–µ—Å—ã –¥–ª—è —Å–∫–ª–∞–¥–∞
  const handleConfigure = async () => {
    if (!scaleIp || !apiKey) {
      error('–í–≤–µ–¥–∏—Ç–µ IP –∞–¥—Ä–µ—Å –∏ API –∫–ª—é—á –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π');
      return;
    }

    if (!warehouseId) {
      error('–ù–µ –≤—ã–±—Ä–∞–Ω —Å–∫–ª–∞–¥');
      return;
    }

    setLoading(true);
    try {
      console.log('üîß –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ—Å–æ–≤ –¥–ª—è —Å–∫–ª–∞–¥–∞:', warehouseId);
      console.log('üìä –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', {
        hasScales: true,
        scaleIpAddress: scaleIp,
        scaleApiKey: apiKey,
        scaleComPort: comPort,
        scaleStatus: 'connected',
        hasCamera: hasCamera,
      });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º warehouse —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –≤–µ—Å–æ–≤
      const response = await api.patch(`/warehouses/${warehouseId}`, {
        hasScales: true,
        scaleIpAddress: scaleIp,
        scaleApiKey: apiKey,
        scaleComPort: comPort,
        scaleStatus: 'connected',
        hasCamera: hasCamera,
      });
      
      console.log('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.data);
      
      if (hasCamera) {
        success('–í–µ—Å—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã! üì∏ –§–æ—Ç–æ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è');
      } else {
        success('–í–µ—Å—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã! ‚ö†Ô∏è –†–∞–±–æ—Ç–∞ –±–µ–∑ –∫–∞–º–µ—Ä—ã');
      }
      
      onSuccess?.();
      onClose();
    } catch (err: any) {
      console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–µ—Å–æ–≤:', err);
      console.error('üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', err.response?.data);
      error(err.response?.data?.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –≤–µ—Å–æ–≤');
    } finally {
      setLoading(false);
    }
  };

  // –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å API –∫–ª—é—á
  const handleCopyApiKey = () => {
    navigator.clipboard.writeText(apiKey);
    setCopied(true);
    setTimeout(() => setCopied(false), 2000);
    success('API –∫–ª—é—á —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω');
  };

  return (
    <Modal
      opened={opened}
      onClose={onClose}
      title={
        <Group gap="sm">
          <IconScale size={24} />
          <Text fw={600}>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ—Å–æ–≤ ScaleBridge</Text>
        </Group>
      }
      size="lg"
    >
      <Stack gap="md">
        {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è */}
        <Alert color="blue" icon={<IconAlertCircle size={20} />}>
          <Text size="sm">
            1. –û—Ç–∫—Ä–æ–π—Ç–µ ScaleBridge –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ —Å –≤–µ—Å–∞–º–∏
            <br />
            2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ IP –∞–¥—Ä–µ—Å –∏–∑ –≤–µ—Ä—Ö–Ω–µ–π –ø–∞–Ω–µ–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            <br />
            3. –û—Ç–∫—Ä–æ–π—Ç–µ config.json –≤ –ø–∞–ø–∫–µ ScaleBridge –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ API –∫–ª—é—á
            <br />
            4. –í—Å—Ç–∞–≤—å—Ç–µ IP –∞–¥—Ä–µ—Å –∏ API –∫–ª—é—á –Ω–∏–∂–µ
          </Text>
        </Alert>

        {/* IP –∞–¥—Ä–µ—Å */}
        <TextInput
          label="IP –∞–¥—Ä–µ—Å ScaleBridge"
          placeholder="192.168.1.100"
          value={scaleIp}
          onChange={(e) => setScaleIp(e.currentTarget.value)}
          rightSection={
            <Tooltip label="–ü–æ–∏—Å–∫ –≤ —Å–µ—Ç–∏">
              <ActionIcon onClick={handleScan} loading={scanning} variant="subtle">
                <IconSearch size={18} />
              </ActionIcon>
            </Tooltip>
          }
          description="–û—Ç–∫—Ä–æ–π—Ç–µ ScaleBridge –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ IP –∞–¥—Ä–µ—Å –≤ –≤–µ—Ä—Ö–Ω–µ–π –ø–∞–Ω–µ–ª–∏ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"
        />

        {/* –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞ */}
        <Button
          leftSection={<IconSearch size={18} />}
          onClick={handleScan}
          loading={scanning}
          variant="light"
        >
          –ù–∞–π—Ç–∏ ScaleBridge –≤ —Å–µ—Ç–∏
        </Button>

        {/* –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ */}
        {devices.length > 0 && (
          <Stack gap="xs">
            <Text size="sm" fw={500}>–ù–∞–π–¥–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:</Text>
            {devices.map((device) => (
              <Group key={device.ip} justify="space-between" p="sm" style={{ border: '1px solid #dee2e6', borderRadius: '4px' }}>
                <Stack gap={4}>
                  <Text size="sm" fw={500}>üñ•Ô∏è {device.ip}:5055</Text>
                  <Text size="xs" c="dimmed">üìä –í–µ—Å: {typeof device.weight === 'number' ? device.weight : 0} –∫–≥</Text>
                </Stack>
                <Button size="xs" onClick={() => handleSelectDevice(device)}>
                  –í—ã–±—Ä–∞—Ç—å
                </Button>
              </Group>
            ))}
          </Stack>
        )}

        {/* COM-–ø–æ—Ä—Ç */}
        <Select
          label="COM-–ø–æ—Ä—Ç"
          placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ä—Ç"
          value={comPort}
          onChange={(value) => setComPort(value || 'COM3')}
          data={[
            { value: 'COM1', label: 'COM1' },
            { value: 'COM2', label: 'COM2' },
            { value: 'COM3', label: 'COM3' },
            { value: 'COM4', label: 'COM4' },
            { value: 'COM5', label: 'COM5' },
            { value: 'COM6', label: 'COM6' },
          ]}
          description="COM-–ø–æ—Ä—Ç, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –≤–µ—Å—ã"
        />

        {/* –ö–∞–º–µ—Ä–∞ */}
        <Checkbox
          label={
            <Group gap="xs">
              <IconCamera size={18} />
              <Text size="sm">–ö–∞–º–µ—Ä–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ (–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ –ø—Ä–∏ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏–∏)</Text>
            </Group>
          }
          checked={hasCamera}
          onChange={(event) => setHasCamera(event.currentTarget.checked)}
          description="–ï—Å–ª–∏ –∫–∞–º–µ—Ä–∞ –ù–ï –ø–æ–¥–∫–ª—é—á–µ–Ω–∞, —Å–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ë–ï–ó —Ñ–æ—Ç–æ"
        />

        {/* API –∫–ª—é—á - —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ */}
        <TextInput
          label="API –∫–ª—é—á ScaleBridge"
          placeholder="eb3af4b0-8faf-4308-94d7-f0a6abab50ee"
          value={apiKey}
          onChange={(e) => setApiKey(e.currentTarget.value)}
          rightSection={
            apiKey ? (
              <Tooltip label={copied ? '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!' : '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å'}>
                <ActionIcon onClick={handleCopyApiKey} variant="subtle" color={copied ? 'green' : 'blue'}>
                  {copied ? <IconCheck size={18} /> : <IconCopy size={18} />}
                </ActionIcon>
              </Tooltip>
            ) : null
          }
          description={
            <>
              –ù–∞–π–¥–∏—Ç–µ API –∫–ª—é—á –≤ —Ñ–∞–π–ª–µ config.json ScaleBridge
              <br />
              –ü—É—Ç—å: C:\Program Files (x86)\BetonAPP\ScaleBridge\config.json
            </>
          }
        />

        {scaleIp && apiKey && (
          <Text size="xs" c="dimmed">
            üì° URL: http://{scaleIp}:5055
          </Text>
        )}

        {/* –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è */}
        {apiKey && (
          <Button
            leftSection={<IconPlugConnected size={18} />}
            onClick={handleTestConnection}
            loading={loading}
            variant="light"
          >
            –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
          </Button>
        )}

        {/* –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ */}
        {testResult && (
          <Alert
            color={testResult.success ? 'green' : 'red'}
            icon={testResult.success ? <IconCheck size={20} /> : <IconX size={20} />}
          >
            <Stack gap="xs">
              <Text size="sm">{testResult.message}</Text>
              {testResult.weight !== undefined && typeof testResult.weight === 'number' && (
                <Text size="sm" fw={500}>
                  –¢–µ–∫—É—â–∏–π –≤–µ—Å: {testResult.weight} –∫–≥
                </Text>
              )}
            </Stack>
          </Alert>
        )}

        {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
        <Group justify="flex-end" mt="md">
          <Button variant="light" onClick={onClose}>
            –û—Ç–º–µ–Ω–∞
          </Button>
          <Button
            onClick={handleConfigure}
            loading={loading}
            disabled={!apiKey || !scaleIp}
          >
            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
          </Button>
        </Group>
      </Stack>
    </Modal>
  );
}

