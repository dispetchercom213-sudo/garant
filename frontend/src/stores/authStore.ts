import { create } from 'zustand';
import { authApi, apiRequest } from '../services/api';
import { 
  getStoredToken, 
  getStoredUser, 
  saveAuthData, 
  clearAuthData, 
  isTokenValid,
  isTokenExpiringSoon,
  getTokenTimeToExpiry
} from '../utils/tokenUtils';
import { handleApiError, logError } from '../utils/errorUtils';

interface User {
  id: number;
  username: string;
  firstName?: string;
  lastName?: string;
  role: string;
  currentRole?: string;
  email?: string;
  phone?: string;
}

interface AuthState {
  user: User | null;
  token: string | null;
  isAuthenticated: boolean;
  isLoading: boolean;
  error: string | null;
  login: (credentials: { login: string; password: string }) => Promise<void>;
  logout: () => void;
  switchRole: (role: string) => Promise<void>;
  initialize: () => void;
  clearError: () => void;
  updateUser: (updatedUser: Partial<User>) => void;
}

export const useAuthStore = create<AuthState>((set) => ({
  user: null,
  token: null,
  isAuthenticated: false,
  isLoading: false,
  error: null,

  login: async (credentials) => {
    console.log('üîê –ù–∞—á–∏–Ω–∞–µ–º –ª–æ–≥–∏–Ω —Å –¥–∞–Ω–Ω—ã–º–∏:', { login: credentials.login });
    set({ isLoading: true, error: null });
    
    try {
      const response = await apiRequest(() => authApi.login(credentials));
      
      const { access_token, user } = response;
      
      // –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
      saveAuthData(access_token, user);
      
      set({
        user,
        token: access_token,
        isAuthenticated: true,
        isLoading: false,
        error: null,
      });
      
      console.log('‚úÖ –õ–æ–≥–∏–Ω —É—Å–ø–µ—à–µ–Ω, store –æ–±–Ω–æ–≤–ª–µ–Ω');
    } catch (error: any) {
      logError('Login', error);
      const errorMessage = handleApiError(error);
      set({
        error: errorMessage,
        isLoading: false,
      });
      throw error;
    }
  },

  logout: () => {
    console.log('üö™ –í—ã–∑–≤–∞–Ω logout - –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    clearAuthData();
    set({
      user: null,
      token: null,
      isAuthenticated: false,
      error: null,
    });
  },

  switchRole: async (role) => {
    try {
      const currentUser = useAuthStore.getState().user;
      if (!currentUser) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      
      console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ–ª–∏:', { 
        role, 
        userId: currentUser.id
      });
      
      const response = await apiRequest(() => authApi.switchRole(role, currentUser.id));
      
      const { access_token, user } = response;
      
      // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
      saveAuthData(access_token, user);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º store
      set({
        user,
        token: access_token,
        isAuthenticated: true,
        error: null,
      });
      
      console.log('‚úÖ –†–æ–ª—å —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞');
    } catch (error: any) {
      logError('Switch Role', error);
      const errorMessage = handleApiError(error);
      
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –Ω–µ –ª–æ–≥–∞—É—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
      set({ error: errorMessage });
      throw error;
    }
  },

  initialize: () => {
    const token = getStoredToken();
    const user = getStoredUser();
    
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è authStore:', {
      token: token ? '–µ—Å—Ç—å' : '–Ω–µ—Ç',
      user: user ? '–µ—Å—Ç—å' : '–Ω–µ—Ç'
    });
    
    if (token && user) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–∞–µ—Ç –ª–∏ —Ç–æ–∫–µ–Ω —Å–∫–æ—Ä–æ
      if (isTokenExpiringSoon(token, 5)) {
        const timeToExpiry = getTokenTimeToExpiry(token);
        console.warn(`‚ö†Ô∏è –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ ${timeToExpiry} –º–∏–Ω—É—Ç`);
      }
      
      console.log('‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:', {
        user: `${user.username} (${user.role})`,
        tokenValid: isTokenValid(token)
      });
      
      set({
        user,
        token,
        isAuthenticated: true,
      });
    } else {
      console.log('‚ùå –ù–µ—Ç –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
      // –û—á–∏—â–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      clearAuthData();
    }
  },

  clearError: () => {
    set({ error: null });
  },

  updateUser: (updatedUser) => {
    const currentUser = useAuthStore.getState().user;
    if (!currentUser) return;

    const newUser = { ...currentUser, ...updatedUser };
    
    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    try {
      const token = getStoredToken();
      if (token) {
        saveAuthData(token, newUser);
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º store
      set({ user: newUser });
      
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω –≤ store');
    } catch (error) {
      logError('Update User', error);
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
  },
}));