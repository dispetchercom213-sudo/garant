import { create } from 'zustand';
import { authApi } from '../services/api';

interface User {
  id: number;
  username: string;
  firstName?: string;
  lastName?: string;
  role: string;
  currentRole?: string;
  email?: string;
  phone?: string;
}

interface AuthState {
  user: User | null;
  token: string | null;
  isAuthenticated: boolean;
  isLoading: boolean;
  error: string | null;
  login: (credentials: { login: string; password: string }) => Promise<void>;
  logout: () => void;
  switchRole: (role: string) => Promise<void>;
  initialize: () => void;
  clearError: () => void;
  updateUser: (updatedUser: Partial<User>) => void;
}

export const useAuthStore = create<AuthState>((set) => ({
  user: null,
  token: null,
  isAuthenticated: false,
  isLoading: false,
  error: null,

  login: async (credentials) => {
    console.log('üîê –ù–∞—á–∏–Ω–∞–µ–º –ª–æ–≥–∏–Ω —Å –¥–∞–Ω–Ω—ã–º–∏:', { login: credentials.login });
    set({ isLoading: true, error: null });
    try {
      const response = await authApi.login(credentials);
      console.log('üì° –û—Ç–≤–µ—Ç –æ—Ç API –ª–æ–≥–∏–Ω–∞:', response.data);
      
      const { access_token, user } = response.data;
      
      console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage:', {
        token: access_token ? '–µ—Å—Ç—å' : '–Ω–µ—Ç',
        user: user ? `${user.username} (${user.role})` : '–Ω–µ—Ç'
      });
      
      localStorage.setItem('token', access_token);
      localStorage.setItem('user', JSON.stringify(user));
      
      set({
        user,
        token: access_token,
        isAuthenticated: true,
        isLoading: false,
        error: null,
      });
      
      console.log('‚úÖ –õ–æ–≥–∏–Ω —É—Å–ø–µ—à–µ–Ω, store –æ–±–Ω–æ–≤–ª–µ–Ω');
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞:', error.response?.data);
      const errorMessage = error.response?.data?.message || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É';
      set({
        error: errorMessage,
        isLoading: false,
      });
      throw error;
    }
  },

  logout: () => {
    console.log('üö™ –í—ã–∑–≤–∞–Ω logout - –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    localStorage.removeItem('token');
    localStorage.removeItem('user');
    set({
      user: null,
      token: null,
      isAuthenticated: false,
      error: null,
    });
  },

  switchRole: async (role) => {
    try {
      const currentUser = useAuthStore.getState().user;
      if (!currentUser) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      
      console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ–ª–∏:', { 
        role, 
        userId: currentUser.id, 
        currentUser,
        currentToken: localStorage.getItem('token')
      });
      
      const response = await authApi.switchRole(role, currentUser.id);
      console.log('üì° –û—Ç–≤–µ—Ç –æ—Ç API:', response.data);
      
      const { access_token, user } = response.data;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º localStorage
      localStorage.setItem('token', access_token);
      localStorage.setItem('user', JSON.stringify(user));
      
      console.log('üíæ –û–±–Ω–æ–≤–∏–ª–∏ localStorage:', {
        newToken: access_token,
        newUser: user
      });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º store
      set({
        user,
        token: access_token,
        isAuthenticated: true,
        error: null,
      });
      
      console.log('‚úÖ –†–æ–ª—å —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞ –≤ store:', {
        user,
        token: access_token,
        isAuthenticated: true
      });
    } catch (error: any) {
      console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–æ–ª–∏:', error.response?.data);
      const errorMessage = error.response?.data?.message || '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–æ–ª–∏';
      
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –Ω–µ –ª–æ–≥–∞—É—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
      set({ error: errorMessage });
      throw error;
    }
  },

  initialize: () => {
    const token = localStorage.getItem('token');
    const userStr = localStorage.getItem('user');
    
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è authStore:', {
      token: token ? '–µ—Å—Ç—å' : '–Ω–µ—Ç',
      userStr: userStr ? '–µ—Å—Ç—å' : '–Ω–µ—Ç'
    });
    
    if (token && userStr) {
      try {
        const user = JSON.parse(userStr);
        console.log('‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:', {
          user: `${user.username} (${user.role})`,
          token: token.substring(0, 20) + '...'
        });
        set({
          user,
          token,
          isAuthenticated: true,
        });
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        // –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ localStorage, –æ—á–∏—â–∞–µ–º
        localStorage.removeItem('token');
        localStorage.removeItem('user');
      }
    } else {
      console.log('‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
    }
  },

  clearError: () => {
    set({ error: null });
  },

  updateUser: (updatedUser) => {
    const currentUser = useAuthStore.getState().user;
    if (!currentUser) return;

    const newUser = { ...currentUser, ...updatedUser };
    
    // –û–±–Ω–æ–≤–ª—è–µ–º localStorage
    localStorage.setItem('user', JSON.stringify(newUser));
    
    // –û–±–Ω–æ–≤–ª—è–µ–º store
    set({ user: newUser });
    
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω –≤ store:', newUser);
  },
}));