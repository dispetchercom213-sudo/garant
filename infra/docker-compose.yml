version: '3.8'

services:
  db:
    image: postgres:16-alpine
    container_name: garant-beton-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: garant_beton
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=ru_RU.UTF-8 --lc-ctype=ru_RU.UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - garant-beton-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ..
      dockerfile: Dockerfile
    container_name: garant-beton-backend
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://postgres:${DB_PASSWORD}@db:5432/garant_beton
      JWT_SECRET: ${JWT_SECRET}
      NODE_ENV: production
      PORT: 4000
      CORS_ORIGIN: ${CORS_ORIGIN}
      ORS_API_KEY: ${ORS_API_KEY}
    ports:
      - "4000:4000"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - garant-beton-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:4000/api/v1/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    image: nginx:alpine
    container_name: garant-beton-frontend
    restart: unless-stopped
    volumes:
      - ../frontend/dist:/usr/share/nginx/html
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - garant-beton-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local

networks:
  garant-beton-network:
    driver: bridge



