const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function checkConcreteMarks() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ä–∫–∏ –±–µ—Ç–æ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    
    const concreteMarks = await prisma.concreteMark.findMany({
      include: {
        materials: {
          include: {
            material: true,
          },
        },
      },
    });
    
    console.log('üìã –ù–∞–π–¥–µ–Ω–æ –º–∞—Ä–æ–∫ –±–µ—Ç–æ–Ω–∞:', concreteMarks.length);
    
    if (concreteMarks.length === 0) {
      console.log('‚ùå –ú–∞—Ä–∫–∏ –±–µ—Ç–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!');
      console.log('üí° –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Ä–∫—É –±–µ—Ç–æ–Ω–∞ —á–µ—Ä–µ–∑ API –∏–ª–∏ –∞–¥–º–∏–Ω–∫—É');
    } else {
      console.log('‚úÖ –ú–∞—Ä–∫–∏ –±–µ—Ç–æ–Ω–∞:');
      concreteMarks.forEach(mark => {
        console.log(`  - ID: ${mark.id}, –ù–∞–∑–≤–∞–Ω–∏–µ: ${mark.name}, –ú–∞—Ç–µ—Ä–∏–∞–ª—ã: ${mark.materials.length}`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–∞—Ä–æ–∫ –±–µ—Ç–æ–Ω–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkConcreteMarks();
