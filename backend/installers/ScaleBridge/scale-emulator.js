const EventEmitter = require('events');
const logger = require('./logger');

/**
 * –≠–º—É–ª—è—Ç–æ—Ä –≤–µ—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
 * –ò–º–∏—Ç–∏—Ä—É–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –≤–µ—Å–æ–≤ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤–µ—Å–∞
 */
class ScaleEmulator extends EventEmitter {
  constructor(config) {
    super();
    this.config = config;
    this.currentWeight = 0;
    this.isConnected = false;
    this.simulationInterval = null;
    this.targetWeight = 0;
    this.weightChangeSpeed = 100; // –∫–≥ –≤ —Å–µ–∫—É–Ω–¥—É
    
    logger.info('üéÆ –†–ï–ñ–ò–ú –≠–ú–£–õ–Ø–¶–ò–ò –í–ï–°–û–í –ê–ö–¢–ò–í–ò–†–û–í–ê–ù');
    logger.info('‚ö†Ô∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–º –≤–µ—Å–∞–º –æ—Ç–∫–ª—é—á–µ–Ω–æ');
    
    this.connect();
  }

  connect() {
    logger.info('üîÑ –≠–º—É–ª—è—Ç–æ—Ä –≤–µ—Å–æ–≤: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    setTimeout(() => {
      this.isConnected = true;
      this.currentWeight = 0;
      this.targetWeight = this.getRandomWeight();
      
      logger.info('‚úÖ –≠–º—É–ª—è—Ç–æ—Ä –≤–µ—Å–æ–≤: –ø–æ–¥–∫–ª—é—á–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
      this.emit('connected');
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–µ—Å–∞
      this.startSimulation();
    }, 1000);
  }

  startSimulation() {
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Å –∫–∞–∂–¥—ã–µ 500–º—Å
    this.simulationInterval = setInterval(() => {
      // –ü–ª–∞–≤–Ω–æ –∏–∑–º–µ–Ω—è–µ–º –≤–µ—Å –∫ —Ü–µ–ª–µ–≤–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
      const diff = this.targetWeight - this.currentWeight;
      
      if (Math.abs(diff) < 0.1) {
        // –î–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–µ–≤–æ–≥–æ –≤–µ—Å–∞ - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π
        this.currentWeight = this.targetWeight;
        this.targetWeight = this.getRandomWeight();
      } else {
        // –ü–ª–∞–≤–Ω–æ –¥–≤–∏–∂–µ–º—Å—è –∫ —Ü–µ–ª–µ–≤–æ–º—É –≤–µ—Å—É
        const step = (diff > 0 ? 1 : -1) * Math.min(Math.abs(diff), this.weightChangeSpeed * 0.5);
        this.currentWeight += step;
      }
      
      // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 1 –∑–Ω–∞–∫–∞
      this.currentWeight = Math.round(this.currentWeight * 10) / 10;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Å–∞
      this.emit('weight', this.currentWeight);
    }, 500);
  }

  getRandomWeight() {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≤–µ—Å –æ—Ç 0 –¥–æ 25000 –∫–≥ (—Ç–∏–ø–∏—á–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –≥—Ä—É–∑–æ–≤—ã—Ö –≤–µ—Å–æ–≤)
    const scenarios = [
      0,      // –ü—É—Å—Ç—ã–µ –≤–µ—Å—ã
      6200,   // –¢–∞—Ä–∞ (–ø—É—Å—Ç–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å)
      18460,  // –ë—Ä—É—Ç—Ç–æ (–∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–º)
      12000,  // –°—Ä–µ–¥–Ω–∏–π –≤–µ—Å
      25000,  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
    ];
    
    // –° –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 70% –≤—ã–±–∏—Ä–∞–µ–º –∏–∑ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤, –∏–Ω–∞—á–µ —Å–ª—É—á–∞–π–Ω–æ–µ
    if (Math.random() < 0.7) {
      return scenarios[Math.floor(Math.random() * scenarios.length)];
    } else {
      return Math.floor(Math.random() * 25000);
    }
  }

  getCurrentWeight() {
    return {
      weight: Math.round(this.currentWeight * 10) / 10,
      unit: 'kg',
      connected: this.isConnected
    };
  }

  disconnect() {
    logger.info('üîÑ –≠–º—É–ª—è—Ç–æ—Ä –≤–µ—Å–æ–≤: –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ...');
    
    if (this.simulationInterval) {
      clearInterval(this.simulationInterval);
      this.simulationInterval = null;
    }

    this.isConnected = false;
    this.currentWeight = 0;
    
    logger.info('‚úÖ –≠–º—É–ª—è—Ç–æ—Ä –≤–µ—Å–æ–≤: –æ—Ç–∫–ª—é—á–µ–Ω–æ');
  }

  reconnect() {
    logger.info('üîÑ –≠–º—É–ª—è—Ç–æ—Ä –≤–µ—Å–æ–≤: –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
    this.disconnect();
    setTimeout(() => {
      this.connect();
    }, 1000);
  }

  updateConfig(newConfig) {
    logger.info('‚öôÔ∏è –≠–º—É–ª—è—Ç–æ—Ä –≤–µ—Å–æ–≤: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
    this.config = { ...this.config, ...newConfig };
    // –≠–º—É–ª—è—Ç–æ—Ä –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  }

  // –†—É—á–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ—Å–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  setWeight(weight) {
    logger.info(`üéØ –≠–º—É–ª—è—Ç–æ—Ä –≤–µ—Å–æ–≤: —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ—Å–∞ ${weight} –∫–≥`);
    this.currentWeight = weight;
    this.targetWeight = weight;
    this.emit('weight', weight);
  }

  // –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–≥—Ä—É–∑–∫–∏/—Ä–∞–∑–≥—Ä—É–∑–∫–∏
  simulateLoad() {
    logger.info('üì¶ –≠–º—É–ª—è—Ç–æ—Ä –≤–µ—Å–æ–≤: —Å–∏–º—É–ª—è—Ü–∏—è –ø–æ–≥—Ä—É–∑–∫–∏');
    this.targetWeight = 18460; // –ë—Ä—É—Ç—Ç–æ
  }

  simulateUnload() {
    logger.info('üì§ –≠–º—É–ª—è—Ç–æ—Ä –≤–µ—Å–æ–≤: —Å–∏–º—É–ª—è—Ü–∏—è —Ä–∞–∑–≥—Ä—É–∑–∫–∏');
    this.targetWeight = 6200; // –¢–∞—Ä–∞
  }

  simulateEmpty() {
    logger.info('üö´ –≠–º—É–ª—è—Ç–æ—Ä –≤–µ—Å–æ–≤: —Å–∏–º—É–ª—è—Ü–∏—è –ø—É—Å—Ç—ã—Ö –≤–µ—Å–æ–≤');
    this.targetWeight = 0;
  }

  static async listPorts() {
    // –≠–º—É–ª—è—Ç–æ—Ä –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ—Ä—Ç—ã
    logger.info('üìã –≠–º—É–ª—è—Ç–æ—Ä –≤–µ—Å–æ–≤: —Å–ø–∏—Å–æ–∫ –ø–æ—Ä—Ç–æ–≤ (–≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ)');
    return [
      {
        path: 'EMULATOR',
        manufacturer: 'ScaleBridge Emulator',
        serialNumber: 'EMU-001',
        vendorId: '0000',
        productId: '0000'
      }
    ];
  }
}

module.exports = ScaleEmulator;










