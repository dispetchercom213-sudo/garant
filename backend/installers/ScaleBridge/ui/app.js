// –ò—Å–ø–æ–ª—å–∑—É–µ–º contextBridge API

// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
let config = {};
let weightUpdateInterval = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', async () => {
  await loadConfig();
  setupEventListeners();
  startWeightUpdates();
  await loadComPorts();
  await loadLocalIp();
});

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
async function loadConfig() {
  try {
    config = await window.electronAPI.getConfig();
    populateForm();
  } catch (error) {
    showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ' + error.message, 'error');
  }
}

// –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –¥–∞–Ω–Ω—ã–º–∏
function populateForm() {
  document.getElementById('comPort').value = config.comPort || 'COM3';
  document.getElementById('baudRate').value = config.baudRate || 9600;
  document.getElementById('dataBits').value = config.dataBits || 8;
  document.getElementById('parity').value = config.parity || 'none';
  document.getElementById('stopBits').value = config.stopBits || 1;
  
  document.getElementById('cameraType').value = config.cameraType || 'usb';
  document.getElementById('photosRetentionDays').value = config.photosRetentionDays || 30;
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö USB –∫–∞–º–µ—Ä
  const cameraDevices = config.cameraDevices || [0];
  for (let i = 0; i <= 4; i++) {
    const checkbox = document.getElementById(`camera${i}`);
    if (checkbox) {
      checkbox.checked = cameraDevices.includes(i);
    }
  }
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ RTSP –∫–∞–º–µ—Ä
  const rtspUrls = config.rtspUrls || [];
  loadRtspCameras(rtspUrls);
  
  document.getElementById('backendUrl').value = config.backendUrl || 'http://localhost:4000';
  document.getElementById('apiKey').value = config.apiKey || '';
  document.getElementById('backendSync').checked = config.backendSync !== false;
  
  document.getElementById('autoStart').checked = config.autoStart !== false;
  document.getElementById('language').value = config.language || 'ru';

  // –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å RTSP URL
  toggleRtspUrl();
}

// –ó–∞–≥—Ä—É–∑–∫–∞ IP –∞–¥—Ä–µ—Å–∞
async function loadLocalIp() {
  try {
    const ipInfo = await window.electronAPI.getIp();
    if (ipInfo) {
      document.getElementById('localIp').textContent = ipInfo.ip;
      document.getElementById('appIp').textContent = ipInfo.ip;
      document.getElementById('apiUrl').textContent = ipInfo.url;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
      const ipContainer = document.getElementById('ipContainer');
      ipContainer.onclick = () => {
        copyToClipboard(ipInfo.ip);
        showNotification(`IP –∞–¥—Ä–µ—Å ${ipInfo.ip} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!`, 'success');
      };
      
      console.log('IP –∞–¥—Ä–µ—Å –∑–∞–≥—Ä—É–∂–µ–Ω:', ipInfo.ip, ipInfo.url);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ IP:', error);
    document.getElementById('localIp').textContent = '–û—à–∏–±–∫–∞';
    document.getElementById('appIp').textContent = '–û—à–∏–±–∫–∞';
  }
}

// –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
function copyToClipboard(text) {
  const textarea = document.createElement('textarea');
  textarea.value = text;
  textarea.style.position = 'fixed';
  textarea.style.opacity = '0';
  document.body.appendChild(textarea);
  textarea.select();
  document.execCommand('copy');
  document.body.removeChild(textarea);
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–º–µ—Ä
function getSelectedCameras() {
  const selected = [];
  for (let i = 0; i <= 4; i++) {
    const checkbox = document.getElementById(`camera${i}`);
    if (checkbox && checkbox.checked) {
      selected.push(i);
    }
  }
  return selected.length > 0 ? selected : [0]; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–∞–º–µ—Ä–∞ 0
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ RTSP –∫–∞–º–µ—Ä–∞–º–∏
let rtspCameraIndex = 0;

window.addRtspCamera = function() {
  const container = document.getElementById('rtspCamerasList');
  const index = rtspCameraIndex++;
  
  const cameraDiv = document.createElement('div');
  cameraDiv.className = 'rtsp-camera-item';
  cameraDiv.id = `rtspCamera${index}`;
  cameraDiv.style.cssText = 'margin-bottom: 10px; padding: 10px; border: 1px solid #e9ecef; border-radius: 6px; background: #f8f9fa;';
  
  cameraDiv.innerHTML = `
    <div style="display: flex; align-items: center; gap: 10px;">
      <label style="flex: 0 0 80px;">üìπ –ö–∞–º–µ—Ä–∞ ${index + 1}:</label>
      <input type="text" 
             class="rtsp-url-input" 
             data-index="${index}"
             placeholder="rtsp://admin:password@192.168.1.100:554/stream"
             style="flex: 1; padding: 8px; border: 1px solid #ced4da; border-radius: 4px;">
      <button type="button" 
              class="btn btn-danger btn-small" 
              onclick="removeRtspCamera(${index})"
              style="flex: 0 0 auto;">
        ‚ùå
      </button>
    </div>
  `;
  
  container.appendChild(cameraDiv);
}

window.removeRtspCamera = function(index) {
  const camera = document.getElementById(`rtspCamera${index}`);
  if (camera) {
    camera.remove();
  }
}

function getRtspCameras() {
  const inputs = document.querySelectorAll('.rtsp-url-input');
  const urls = [];
  inputs.forEach(input => {
    const url = input.value.trim();
    if (url) {
      urls.push(url);
    }
  });
  return urls;
}

function loadRtspCameras(urls) {
  const container = document.getElementById('rtspCamerasList');
  container.innerHTML = '';
  rtspCameraIndex = 0;
  
  if (!urls || urls.length === 0) {
    addRtspCamera();
    return;
  }
  
  urls.forEach(url => {
    addRtspCamera();
    const inputs = document.querySelectorAll('.rtsp-url-input');
    const lastInput = inputs[inputs.length - 1];
    if (lastInput) {
      lastInput.value = url;
    }
  });
}

// –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ RTSP —à–∞–±–ª–æ–Ω–æ–≤
window.fillRtspTemplate = function(manufacturer) {
  const templates = {
    hikvision: 'rtsp://admin:password@192.168.1.100:554/Streaming/Channels/101',
    dahua: 'rtsp://admin:password@192.168.1.100:554/cam/realmonitor?channel=1&subtype=0',
    tplink: 'rtsp://admin:password@192.168.1.100:554/stream1',
    axis: 'rtsp://admin:password@192.168.1.100:554/axis-media/media.amp',
    generic: 'rtsp://admin:password@192.168.1.100:554/stream'
  };
  
  const url = templates[manufacturer];
  if (url) {
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–ª–µ
    const inputs = document.querySelectorAll('.rtsp-url-input');
    if (inputs.length > 0) {
      const lastInput = inputs[inputs.length - 1];
      lastInput.value = url;
      showNotification(`–®–∞–±–ª–æ–Ω ${manufacturer.toUpperCase()} –∑–∞–≥—Ä—É–∂–µ–Ω. –ó–∞–º–µ–Ω–∏—Ç–µ IP, –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å.`, 'success');
    } else {
      addRtspCamera();
      setTimeout(() => {
        const inputs = document.querySelectorAll('.rtsp-url-input');
        if (inputs.length > 0) {
          inputs[0].value = url;
        }
      }, 100);
    }
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ COM-–ø–æ—Ä—Ç–æ–≤
async function loadComPorts() {
  try {
    const ports = await window.electronAPI.getPorts();
    const select = document.getElementById('comPort');
    
    // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
    select.innerHTML = '';
    
    // –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ—Ä—Ç—ã
    for (let i = 1; i <= 20; i++) {
      const option = document.createElement('option');
      option.value = `COM${i}`;
      option.textContent = `COM${i} - (–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ—Ä—Ç—ã)`;
      select.appendChild(option);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ—Ä—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (ports && ports.length > 0) {
      ports.forEach(port => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø–æ—Ä—Ç
        const existingOption = Array.from(select.options).find(opt => opt.value === port.path);
        if (existingOption) {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ—Ä—Ç
          existingOption.textContent = `${port.path} - ${port.manufacturer || '–û–±–Ω–∞—Ä—É–∂–µ–Ω'}`;
        } else {
          // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø–æ—Ä—Ç
          const option = document.createElement('option');
          option.value = port.path;
          option.textContent = `${port.path} - ${port.manufacturer || '–û–±–Ω–∞—Ä—É–∂–µ–Ω'}`;
          select.appendChild(option);
        }
      });
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–æ—Ä—Ç
    if (config.comPort) {
      select.value = config.comPort;
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Ä—Ç–æ–≤:', error);
  }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
  document.querySelectorAll('.tab-button').forEach(button => {
    button.addEventListener('click', () => {
      const tabName = button.dataset.tab;
      switchTab(tabName);
    });
  });

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  document.getElementById('saveConfig').addEventListener('click', saveConfig);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ—Ä—Ç–æ–≤
  document.getElementById('refreshPorts').addEventListener('click', loadComPorts);

  // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤–µ—Å–æ–≤
  document.getElementById('reconnectScale').addEventListener('click', reconnectScale);

  // –¢–µ—Å—Ç –∫–∞–º–µ—Ä—ã
  document.getElementById('testCamera').addEventListener('click', testCamera);

  // –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  document.getElementById('testConnection').addEventListener('click', testConnection);

  // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ API –∫–ª—é—á–∞
  document.getElementById('copyApiKey').addEventListener('click', copyApiKey);

  // –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å RTSP URL –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–∏–ø–∞ –∫–∞–º–µ—Ä—ã
  document.getElementById('cameraType').addEventListener('change', toggleRtspUrl);
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
function switchTab(tabName) {
  // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫
  document.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active'));
  document.querySelectorAll('.tab-panel').forEach(panel => panel.classList.remove('active'));

  // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∫–ª–∞–¥–∫–µ
  document.querySelector(`[data-tab="${tabName}"]`).classList.add('active');
  document.getElementById(`${tabName}-tab`).classList.add('active');
}

// –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å RTSP URL –∏ USB –∫–∞–º–µ—Ä—É
function toggleRtspUrl() {
  const cameraType = document.getElementById('cameraType').value;
  const rtspGroup = document.getElementById('rtspUrlGroup');
  const usbGroup = document.getElementById('usbCameraGroup');
  
  if (cameraType === 'rtsp') {
    rtspGroup.style.display = 'block';
    usbGroup.style.display = 'none';
  } else {
    rtspGroup.style.display = 'none';
    usbGroup.style.display = 'block';
  }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
async function saveConfig() {
  try {
    const newConfig = {
      comPort: document.getElementById('comPort').value,
      baudRate: parseInt(document.getElementById('baudRate').value),
      dataBits: parseInt(document.getElementById('dataBits').value),
      parity: document.getElementById('parity').value,
      stopBits: parseInt(document.getElementById('stopBits').value),
      
      cameraType: document.getElementById('cameraType').value,
      cameraDevices: getSelectedCameras(),
      rtspUrls: getRtspCameras(),
      photosRetentionDays: parseInt(document.getElementById('photosRetentionDays').value),
      
      backendUrl: document.getElementById('backendUrl').value,
      apiKey: document.getElementById('apiKey').value,
      backendSync: document.getElementById('backendSync').checked,
      
      autoStart: document.getElementById('autoStart').checked,
      language: document.getElementById('language').value
    };

    const result = await window.electronAPI.saveConfig(newConfig);
    
    if (result.success) {
      showNotification('‚úì –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!', 'success');
      config = { ...config, ...newConfig };
    } else {
      showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ' + result.error, 'error');
    }
  } catch (error) {
    showNotification('–û—à–∏–±–∫–∞: ' + error.message, 'error');
  }
}

// –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤–µ—Å–æ–≤
async function reconnectScale() {
  try {
    await window.electronAPI.reconnectScale();
    showNotification('–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤–µ—Å–∞–º –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–æ', 'success');
  } catch (error) {
    showNotification('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ' + error.message, 'error');
  }
}

// –¢–µ—Å—Ç –∫–∞–º–µ—Ä—ã
async function testCamera() {
  const resultDiv = document.getElementById('cameraTestResult');
  resultDiv.textContent = '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–π —Å–Ω–∏–º–æ–∫...';
  resultDiv.className = 'test-result';
  resultDiv.style.display = 'block';

  try {
    const result = await window.electronAPI.testCamera();
    
    if (result.success) {
      resultDiv.textContent = `‚úì –°–Ω–∏–º–æ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: ${result.photoPath}`;
      resultDiv.className = 'test-result success';
    } else {
      resultDiv.textContent = `‚úó –û—à–∏–±–∫–∞: ${result.error}`;
      resultDiv.className = 'test-result error';
    }
  } catch (error) {
    resultDiv.textContent = `‚úó –û—à–∏–±–∫–∞: ${error.message}`;
    resultDiv.className = 'test-result error';
  }
}

// –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å backend
async function testConnection() {
  const resultDiv = document.getElementById('connectionTestResult');
  const url = document.getElementById('backendUrl').value;
  const apiKey = document.getElementById('apiKey').value;

  resultDiv.textContent = '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...';
  resultDiv.className = 'test-result';
  resultDiv.style.display = 'block';

  try {
    const result = await window.electronAPI.testBackend({ url, apiKey });
    
    if (result.success) {
      resultDiv.textContent = `‚úì –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! Backend –¥–æ—Å—Ç—É–ø–µ–Ω.`;
      resultDiv.className = 'test-result success';
    } else {
      resultDiv.textContent = `‚úó –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${result.error}`;
      resultDiv.className = 'test-result error';
    }
  } catch (error) {
    resultDiv.textContent = `‚úó –û—à–∏–±–∫–∞: ${error.message}`;
    resultDiv.className = 'test-result error';
  }
}

// –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ API –∫–ª—é—á–∞
function copyApiKey() {
  const apiKeyInput = document.getElementById('apiKey');
  apiKeyInput.select();
  document.execCommand('copy');
  showNotification('API –∫–ª—é—á —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞', 'success');
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–µ—Å–∞
async function updateWeight() {
  try {
    const weightData = await window.electronAPI.getWeight();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Å
    document.getElementById('currentWeight').textContent = `${weightData.weight} ${weightData.unit}`;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    const statusEl = document.getElementById('scaleStatus');
    if (weightData.connected) {
      statusEl.textContent = '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ';
      statusEl.className = 'status-value connected';
    } else {
      statusEl.textContent = '–û—Ç–∫–ª—é—á–µ–Ω–æ';
      statusEl.className = 'status-value disconnected';
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Å–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Å–∞
function startWeightUpdates() {
  updateWeight(); // –ü–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ä–∞–∑—É
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
  weightUpdateInterval = setInterval(updateWeight, 1000);
}

// –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function showNotification(message, type = 'success') {
  const notification = document.getElementById('notification');
  notification.textContent = message;
  notification.className = `notification ${type} show`;
  
  // –°–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
  setTimeout(() => {
    notification.classList.remove('show');
  }, 5000);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
ipcRenderer.on('notification', (event, message) => {
  showNotification(message, 'success');
});

// –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
window.addEventListener('beforeunload', () => {
  if (weightUpdateInterval) {
    clearInterval(weightUpdateInterval);
  }
});
