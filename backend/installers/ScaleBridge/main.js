const { app, BrowserWindow, Tray, Menu, ipcMain, dialog } = require('electron');
const path = require('path');
const fs = require('fs');
const { v4: uuidv4 } = require('uuid');
const schedule = require('node-schedule');

const logger = require('./logger');
const ScaleManager = require('./scale');
const ScaleEmulator = require('./scale-emulator');
const CameraManager = require('./camera');
const BackendServer = require('./backend');

class ScaleBridgeApp {
  constructor() {
    this.mainWindow = null;
    this.tray = null;
    this.config = null;
    this.scaleManager = null;
    this.cameraManager = null;
    this.backendServer = null;
    
    this.configPath = path.join(__dirname, 'config.json');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app.whenReady().then(() => {
      this.init();
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö –æ–∫–æ–Ω
    app.on('window-all-closed', (e) => {
      e.preventDefault();
      // –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ —Ç—Ä–µ–π
    });

    app.on('activate', () => {
      if (BrowserWindow.getAllWindows().length === 0) {
        this.createWindow();
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞
    app.on('before-quit', () => {
      this.cleanup();
    });
  }

  async init() {
    try {
      logger.info('–ó–∞–ø—É—Å–∫ ScaleBridge...');

      // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      this.loadConfig();

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è API –∫–ª—é—á–∞
      this.ensureApiKey();

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–º—É–ª—è—Ç–æ—Ä –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º —ç–º—É–ª—è—Ü–∏–∏
      if (this.config.emulatorMode === true) {
        logger.info('üéÆ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –≠–ú–£–õ–Ø–¶–ò–ò –≤–µ—Å–æ–≤');
        this.scaleManager = new ScaleEmulator(this.config);
      } else {
        logger.info('‚öñÔ∏è –ó–∞–ø—É—Å–∫ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –≤–µ—Å–∞–º–∏ (COM-–ø–æ—Ä—Ç)');
        this.scaleManager = new ScaleManager(this.config);
      }
      
      this.cameraManager = new CameraManager(this.config);
      this.backendServer = new BackendServer(this.config, this.scaleManager, this.cameraManager);

      // –ó–∞–ø—É—Å–∫ backend —Å–µ—Ä–≤–µ—Ä–∞
      await this.backendServer.start();

      // –°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞
      this.createWindow();

      // –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ—è
      this.createTray();

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞
      if (this.config.autoStart) {
        this.setupAutoStart();
      }

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ IPC (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è –æ–∫–Ω–∞)
      this.setupIpcHandlers();

      // –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Ñ–æ—Ç–æ (–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 3:00)
      schedule.scheduleJob('0 3 * * *', () => {
        logger.info('–ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π');
        this.cameraManager.cleanupOldPhotos();
      });

      logger.info('ScaleBridge —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω');
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${error.message}`);
      dialog.showErrorBox('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞', `–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å ScaleBridge: ${error.message}`);
      app.quit();
    }
  }

  loadConfig() {
    try {
      if (fs.existsSync(this.configPath)) {
        const configData = fs.readFileSync(this.configPath, 'utf8');
        this.config = JSON.parse(configData);
        logger.info('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
      } else {
        // –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        this.config = {
          comPort: 'COM3',
          baudRate: 9600,
          dataBits: 8,
          parity: 'none',
          stopBits: 1,
          backendSync: true,
          backendUrl: 'http://localhost:4000',
          apiKey: '',
          cameraType: 'usb',
          cameraUrl: '',
          photosDir: path.join(__dirname, 'photos'),
          photosRetentionDays: 30,
          autoStart: true,
          language: 'ru',
          emulatorMode: false  // true = —ç–º—É–ª—è—Ü–∏—è, false = —Ä–µ–∞–ª—å–Ω—ã–µ –≤–µ—Å—ã
        };
        this.saveConfig();
      }
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${error.message}`);
      throw error;
    }
  }

  saveConfig() {
    try {
      fs.writeFileSync(this.configPath, JSON.stringify(this.config, null, 2), 'utf8');
      logger.info('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${error.message}`);
      throw error;
    }
  }

  ensureApiKey() {
    if (!this.config.apiKey) {
      this.config.apiKey = uuidv4();
      this.saveConfig();
      logger.info(`–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π API –∫–ª—é—á: ${this.config.apiKey}`);
    }
  }

  createWindow() {
    this.mainWindow = new BrowserWindow({
      width: 900,
      height: 700,
      title: 'ScaleBridge - –ù–∞—Å—Ç—Ä–æ–π–∫–∏',
      icon: path.join(__dirname, 'assets', 'icon.png'),
      webPreferences: {
        nodeIntegration: false,
        contextIsolation: true,
        preload: path.join(__dirname, 'ui', 'preload.js')
      }
    });

    this.mainWindow.loadFile(path.join(__dirname, 'ui', 'index.html'));

    // –°–æ–±—ã—Ç–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ - —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ —Ç—Ä–µ–π
    this.mainWindow.on('close', (event) => {
      if (!app.isQuitting) {
        event.preventDefault();
        this.mainWindow.hide();
      }
    });

    // –û—Ç–∫—Ä—ã–≤–∞–µ–º DevTools –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    // this.mainWindow.webContents.openDevTools();
  }

  createTray() {
    const iconPath = path.join(__dirname, 'assets', 'icon.png');
    this.tray = new Tray(iconPath);
    
    const contextMenu = Menu.buildFromTemplate([
      {
        label: '–û—Ç–∫—Ä—ã—Ç—å ScaleBridge',
        click: () => {
          if (this.mainWindow) {
            this.mainWindow.show();
          } else {
            this.createWindow();
          }
        }
      },
      {
        type: 'separator'
      },
      {
        label: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏',
        click: () => {
          if (this.mainWindow) {
            this.mainWindow.show();
            this.mainWindow.webContents.send('show-settings');
          }
        }
      },
      {
        label: '–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å COM',
        click: () => {
          if (this.scaleManager) {
            this.scaleManager.reconnect();
            this.showNotification('–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤–µ—Å–∞–º...');
          }
        }
      },
      {
        type: 'separator'
      },
      {
        label: `–í–µ—Å: ${this.scaleManager ? this.scaleManager.getCurrentWeight().weight : 0} –∫–≥`,
        enabled: false
      },
      {
        label: `–°—Ç–∞—Ç—É—Å: ${this.scaleManager && this.scaleManager.isConnected ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ ‚úì' : '–û—Ç–∫–ª—é—á–µ–Ω–æ ‚úó'}`,
        enabled: false
      },
      {
        type: 'separator'
      },
      {
        label: '–í—ã—Ö–æ–¥',
        click: () => {
          app.isQuitting = true;
          app.quit();
        }
      }
    ]);

    this.tray.setContextMenu(contextMenu);
    this.tray.setToolTip('‚öñÔ∏è ScaleBridge –∑–∞–ø—É—â–µ–Ω');

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é —Ç—Ä–µ—è –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
    setInterval(() => {
      this.updateTrayMenu();
    }, 2000);

    this.tray.on('double-click', () => {
      if (this.mainWindow) {
        this.mainWindow.show();
      }
    });
  }

  updateTrayMenu() {
    if (!this.tray || !this.scaleManager) return;

    const weightData = this.scaleManager.getCurrentWeight();
    
    const contextMenu = Menu.buildFromTemplate([
      {
        label: '–û—Ç–∫—Ä—ã—Ç—å ScaleBridge',
        click: () => {
          if (this.mainWindow) {
            this.mainWindow.show();
          } else {
            this.createWindow();
          }
        }
      },
      {
        type: 'separator'
      },
      {
        label: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏',
        click: () => {
          if (this.mainWindow) {
            this.mainWindow.show();
          }
        }
      },
      {
        label: '–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å COM',
        click: () => {
          this.scaleManager.reconnect();
          this.showNotification('–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤–µ—Å–∞–º...');
        }
      },
      {
        type: 'separator'
      },
      {
        label: `–í–µ—Å: ${weightData.weight} –∫–≥`,
        enabled: false
      },
      {
        label: `–°—Ç–∞—Ç—É—Å: ${weightData.connected ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ ‚úì' : '–û—Ç–∫–ª—é—á–µ–Ω–æ ‚úó'}`,
        enabled: false
      },
      {
        type: 'separator'
      },
      {
        label: '–í—ã—Ö–æ–¥',
        click: () => {
          app.isQuitting = true;
          app.quit();
        }
      }
    ]);

    this.tray.setContextMenu(contextMenu);
  }

  setupAutoStart() {
    try {
      app.setLoginItemSettings({
        openAtLogin: this.config.autoStart,
        path: app.getPath('exe')
      });
      logger.info(`–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ ${this.config.autoStart ? '–≤–∫–ª—é—á—ë–Ω' : '–æ—Ç–∫–ª—é—á—ë–Ω'}`);
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞: ${error.message}`);
    }
  }

  setupIpcHandlers() {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    ipcMain.handle('get-config', () => {
      return this.config;
    });

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    ipcMain.handle('save-config', (event, newConfig) => {
      try {
        Object.assign(this.config, newConfig);
        this.saveConfig();

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        if (this.scaleManager) {
          this.scaleManager.updateConfig(this.config);
        }
        if (this.cameraManager) {
          this.cameraManager.updateConfig(this.config);
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞
        this.setupAutoStart();

        return { success: true, message: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã' };
      } catch (error) {
        logger.error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: ${error.message}`);
        return { success: false, error: error.message };
      }
    });

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–µ—Å–∞
    ipcMain.handle('get-weight', () => {
      return this.scaleManager.getCurrentWeight();
    });

    // –ü–æ–ª—É—á–µ–Ω–∏–µ IP –∞–¥—Ä–µ—Å–∞
    ipcMain.handle('get-ip', async () => {
      try {
        const os = require('os');
        const networkInterfaces = os.networkInterfaces();
        
        let localIp = 'localhost';
        
        // –ò—â–µ–º –ø–µ—Ä–≤—ã–π –Ω–µ-–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π IPv4 –∞–¥—Ä–µ—Å
        for (const interfaceName in networkInterfaces) {
          const interfaces = networkInterfaces[interfaceName];
          for (const iface of interfaces) {
            if (iface.family === 'IPv4' && !iface.internal) {
              localIp = iface.address;
              break;
            }
          }
          if (localIp !== 'localhost') break;
        }
        
        return {
          ip: localIp,
          port: 5055,
          url: `http://${localIp}:5055`,
          allInterfaces: networkInterfaces
        };
      } catch (error) {
        logger.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è IP: ${error.message}`);
        return { ip: 'localhost', port: 5055, url: 'http://localhost:5055' };
      }
    });

    // –°–ø–∏—Å–æ–∫ COM-–ø–æ—Ä—Ç–æ–≤
    ipcMain.handle('get-ports', async () => {
      return await ScaleManager.listPorts();
    });

    // –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    ipcMain.handle('test-connection', async (event, { url, apiKey }) => {
      const axios = require('axios');
      try {
        const response = await axios.get(`${url}/api/health`, {
          headers: {
            'X-API-Key': apiKey
          },
          timeout: 5000
        });
        return { success: true, data: response.data };
      } catch (error) {
        return { success: false, error: error.message };
      }
    });

    // –¢–µ—Å—Ç –∫–∞–º–µ—Ä—ã
    ipcMain.handle('test-camera', async () => {
      try {
        const photoPath = await this.cameraManager.testCapture();
        return { success: true, photoPath };
      } catch (error) {
        return { success: false, error: error.message };
      }
    });

    // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤–µ—Å–∞–º
    ipcMain.handle('reconnect-scale', () => {
      try {
        this.scaleManager.reconnect();
        return { success: true };
      } catch (error) {
        return { success: false, error: error.message };
      }
    });
  }

  showNotification(message) {
    if (this.mainWindow && this.mainWindow.webContents) {
      this.mainWindow.webContents.send('notification', message);
    }
  }

  cleanup() {
    logger.info('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã ScaleBridge...');

    if (this.scaleManager) {
      this.scaleManager.disconnect();
    }

    if (this.backendServer) {
      this.backendServer.stop();
    }
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
new ScaleBridgeApp();
