const { SerialPort } = require('serialport');
const { ReadlineParser } = require('@serialport/parser-readline');
const EventEmitter = require('events');
const logger = require('./logger');
const fs = require('fs');
const path = require('path');

class ScaleManager extends EventEmitter {
  constructor(config) {
    super();
    this.config = config;
    this.port = null;
    this.parser = null;
    this.currentWeight = 0;
    this.isConnected = false;
    this.reconnectTimer = null;
    this.pollingTimer = null; // —Ç–∞–π–º–µ—Ä –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–æ—Å–∞ –≤–µ—Å–æ–≤
    this.serialLogStream = null;
    
    this.connect();
  }

  connect() {
    try {
      logger.info(`–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ COM-–ø–æ—Ä—Ç—É: ${this.config.comPort}`);
      
      this.port = new SerialPort({
        path: this.config.comPort,
        baudRate: this.config.baudRate,
        dataBits: this.config.dataBits,
        parity: this.config.parity,
        stopBits: this.config.stopBits,
        autoOpen: false,
        lock: false
      });

      // –û—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä—Å–µ—Ä –ø–æ CRLF. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–µ—Å—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Ç–æ–ª—å–∫–æ \n ‚Äî –Ω–∏–∂–µ –¥–æ–±–∞–≤–∏–º —Å—ã—Ä–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫.
      this.parser = this.port.pipe(new ReadlineParser({ delimiter: '\r\n' }));

      this.port.open((err) => {
        if (err) {
          logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è COM-–ø–æ—Ä—Ç–∞: ${err.message}`);
          this.scheduleReconnect();
          return;
        }

        this.isConnected = true;
        logger.info('COM-–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç');
        this.emit('connected');
        
        // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        if (this.reconnectTimer) {
          clearTimeout(this.reconnectTimer);
          this.reconnectTimer = null;
        }

        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –æ–ø—Ä–æ—Å, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ
        this.startPolling();

        // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è CSV-–ª–æ–≥–∞ –ø–æ—Ç–æ–∫–∞, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        this.openSerialLog();
      });

      this.parser.on('data', (data) => {
        this.parseWeight(data);
      });

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–∏–µ–º —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö (ASCII). –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–µ—Å—ã –Ω–µ –ø—Ä–∏—Å—ã–ª–∞—é—Ç CRLF.
      this.port.on('data', (buffer) => {
        try {
          // –ü—Ä–æ–±—É–µ–º ASCII, —Ç–∞–∫ –∫–∞–∫ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –≤–µ—Å–æ–≤ –æ—Ç–¥–∞—é—Ç ASCII, –∞ UTF-8 –≤—ã–∑—ã–≤–∞–µ—Ç –∫—Ä–∞–∫–æ–∑—è–±—Ä—ã
          const ascii = buffer.toString('ascii');
          const trimmed = ascii.trim();
          if (trimmed.length > 0) {
            this.parseWeight(trimmed);
          }
        } catch (e) {
          logger.warn(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${e.message}`);
        }
      });

      this.port.on('error', (err) => {
        logger.error(`–û—à–∏–±–∫–∞ COM-–ø–æ—Ä—Ç–∞: ${err.message}`);
        this.isConnected = false;
        this.emit('error', err);
      });

      this.port.on('close', () => {
        logger.warn('COM-–ø–æ—Ä—Ç –∑–∞–∫—Ä—ã—Ç');
        this.isConnected = false;
        this.emit('disconnected');
        this.stopPolling();
        this.closeSerialLog();
        this.scheduleReconnect();
      });

    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ COM-–ø–æ—Ä—Ç–∞: ${error.message}`);
      this.scheduleReconnect();
    }
  }

  parseWeight(data) {
    try {
      // –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö —Å –≤–µ—Å–æ–≤
      const cleanData = data.trim();
      
      // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—É—Å—Ç—ã–µ
      if (cleanData.length > 0) {
        logger.info(`üìä –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å –≤–µ—Å–æ–≤: "${cleanData}"`);
      }
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
      if (cleanData.length === 0) {
        return;
      }
      
      // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤–µ—Å–æ–≤:
      let weight = null;
      
      // –§–æ—Ä–º–∞—Ç 1: "ST,GS,+012345.0kg" –∏–ª–∏ "ST,GS,012345.0"
      if (cleanData.includes('ST,GS,') || cleanData.includes('ST,GS')) {
        const parts = cleanData.split(',');
        if (parts.length >= 3) {
          const weightPart = parts[2].replace(/[^\d.+-]/g, '');
          weight = parseFloat(weightPart);
        }
      }
      
      // –§–æ—Ä–º–∞—Ç 2: "GS,+012345.0kg"
      else if (cleanData.includes('GS,')) {
        const parts = cleanData.split(',');
        if (parts.length >= 2) {
          const weightPart = parts[1].replace(/[^\d.+-]/g, '');
          weight = parseFloat(weightPart);
        }
      }
      
      // –§–æ—Ä–º–∞—Ç 3: "+012345.0 kg" –∏–ª–∏ "12345.0kg"
      else if (cleanData.match(/[-+]?\s*\d+[\.,]?\d*\s*(kg|–∫–≥)?/i)) {
        const weightPart = cleanData.replace(/[^\d.+-]/g, '').replace(',', '.');
        weight = parseFloat(weightPart);
      }
      
      // –§–æ—Ä–º–∞—Ç 4: –ü—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ "12345.5" –∏–ª–∏ "12345,5"
      else {
        const weightPart = cleanData.replace(/[^\d.+-]/g, '').replace(',', '.');
        weight = parseFloat(weightPart);
      }
      
      // –§–æ—Ä–º–∞—Ç 5: –û–±—Ä–∞–±–æ—Ç–∫–∞ —à—É–º–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å —Å–∏–º–≤–æ–ª–∞–º–∏ [00] –∏ '–∞'
      // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ç–∏–ø–∞ "–∞–∞–∞[00]–∞–∞[00]" - –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–µ—Å
      if (weight === null && cleanData.includes('[00]') && cleanData.includes('–∞')) {
        // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —á–∏—Å–ª–∞ –≤ –∫–æ–Ω—Ü–µ –∏–ª–∏ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏
        const numbersInString = cleanData.match(/\d+/g);
        if (numbersInString && numbersInString.length > 0) {
          // –í–æ–∑—å–º–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –∫–∞–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –≤–µ—Å
          const lastNumber = numbersInString[numbersInString.length - 1];
          const potentialWeight = parseInt(lastNumber);
          
          // –ï—Å–ª–∏ —á–∏—Å–ª–æ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –≤–µ—Å (–æ—Ç 0 –¥–æ 50000)
          if (potentialWeight >= 0 && potentialWeight <= 50000) {
            weight = potentialWeight;
            logger.info(`üîç –ù–∞–π–¥–µ–Ω –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –≤–µ—Å –≤ —à—É–º–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${weight} –∫–≥`);
          }
        }
      }
      
      // –§–æ—Ä–º–∞—Ç 6: –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å —Å–∏–º–≤–æ–ª–∞–º–∏ ASCII
      // –ï—Å–ª–∏ –≤ –¥–∞–Ω–Ω—ã—Ö –º–Ω–æ–≥–æ –Ω–µ–ø–µ—á–∞—Ç–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤, –ø–æ–ø—Ä–æ–±—É–µ–º –∏—Ö –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å
      if (weight === null && cleanData.includes('–∞') && cleanData.length > 20) {
        // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —á–∏—Å–ª–∞ –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        const allNumbers = cleanData.match(/\d+/g);
        if (allNumbers && allNumbers.length > 0) {
          // –í–æ–∑—å–º–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ –∫–∞–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –≤–µ—Å
          const maxNumber = Math.max(...allNumbers.map(n => parseInt(n)));
          if (maxNumber >= 0 && maxNumber <= 50000) {
            weight = maxNumber;
            logger.info(`üîç –ù–∞–π–¥–µ–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å –≤ –¥–∞–Ω–Ω—ã—Ö: ${weight} –∫–≥`);
          }
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Å–∞
      if (weight !== null && !isNaN(weight) && isFinite(weight)) {
        // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 1 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        this.currentWeight = Math.round(weight * 10) / 10;
        this.emit('weight', this.currentWeight);
        logger.info(`‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω –≤–µ—Å: ${this.currentWeight} –∫–≥`);
        // –ü–∏—à–µ–º CSV-—Å—Ç—Ä–æ–∫—É
        this.writeSerialCsv(cleanData, this.currentWeight);
      } else {
        logger.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤–µ—Å –∏–∑ —Å—Ç—Ä–æ–∫–∏: "${cleanData}"`);
        // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø–æ–∫–∞–∂–µ–º –ø–µ—Ä–≤—ã–µ 50 —Å–∏–º–≤–æ–ª–æ–≤
        const preview = cleanData.length > 50 ? cleanData.substring(0, 50) + '...' : cleanData;
        logger.warn(`üîç –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö: "${preview}"`);
        // –í—Å—ë —Ä–∞–≤–Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â—É—é —Å—Ç—Ä–æ–∫—É (–±–µ–∑ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –≤–µ—Å–∞)
        this.writeSerialCsv(cleanData, '');
      }
    } catch (error) {
      logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–µ—Å–∞: ${error.message}`);
    }
  }

  scheduleReconnect() {
    if (this.reconnectTimer) return;
    
    logger.info('–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...');
    this.reconnectTimer = setTimeout(() => {
      this.reconnectTimer = null;
      this.connect();
    }, 5000);
  }

  getCurrentWeight() {
    return {
      weight: Math.round(this.currentWeight * 10) / 10,
      unit: 'kg',
      connected: this.isConnected
    };
  }

  disconnect() {
    logger.info('–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –≤–µ—Å–æ–≤...');
    
    if (this.reconnectTimer) {
      clearTimeout(this.reconnectTimer);
      this.reconnectTimer = null;
    }

    this.stopPolling();

    if (this.port && this.port.isOpen) {
      this.port.close((err) => {
        if (err) {
          logger.error(`–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ—Ä—Ç–∞: ${err.message}`);
        }
      });
    }

    this.isConnected = false;
  }

  reconnect() {
    logger.info('–†—É—á–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤–µ—Å–∞–º');
    this.disconnect();
    setTimeout(() => {
      this.connect();
    }, 1000);
  }

  updateConfig(newConfig) {
    this.config = { ...this.config, ...newConfig };
    this.reconnect();
  }

  // –í–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–æ—Å–∞ –≤–µ—Å–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–µ–π, —Ç—Ä–µ–±—É—é—â–∏—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
  startPolling() {
    try {
      if (!this.config || this.config.pollingEnabled !== true) {
        return;
      }

      // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —É–∂–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω
      this.stopPolling();

      const intervalMs = Number(this.config.pollingIntervalMs) || 500;
      logger.info(`–í–∫–ª—é—á–µ–Ω –æ–ø—Ä–æ—Å –≤–µ—Å–æ–≤ –∫–∞–∂–¥—ã–µ ${intervalMs} –º—Å`);
      this.pollingTimer = setInterval(() => {
        this.sendPollingCommand();
      }, intervalMs);
    } catch (e) {
      logger.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–ø—Ä–æ—Å –≤–µ—Å–æ–≤: ${e.message}`);
    }
  }

  stopPolling() {
    if (this.pollingTimer) {
      clearInterval(this.pollingTimer);
      this.pollingTimer = null;
      logger.info('–û–ø—Ä–æ—Å –≤–µ—Å–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
  }

  sendPollingCommand() {
    try {
      if (!this.port || !this.port.isOpen) return;
      // –ö–æ–º–∞–Ω–¥–∞ –æ–ø—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –≤ –∫–æ–Ω—Ñ–∏–≥–µ. –£–∫–∞–∂–∏—Ç–µ —Ç—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –æ—Ç–≤–µ—á–∞—é—Ç –≤–µ—Å—ã –≤ Termite.
      // –ù–∞–ø—Ä–∏–º–µ—Ä: "S\r\n", "P\r\n", "W\r\n" –∏–ª–∏ –∏–Ω–æ–π –∫–æ–¥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è.
      const command = this.config.pollingCommand || 'S\r\n';
      const toSend = Buffer.from(command, 'ascii');
      this.port.write(toSend, (err) => {
        if (err) {
          logger.warn(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã –æ–ø—Ä–æ—Å–∞: ${err.message}`);
        }
      });
    } catch (e) {
      logger.warn(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–æ—Å–µ –≤–µ—Å–æ–≤: ${e.message}`);
    }
  }

  // === CSV –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏—Ö —Å—Ç—Ä–æ–∫ ===
  ensureLogsDir() {
    try {
      const logsDir = (this.config.logging && this.config.logging.logsDir) || './logs';
      if (!fs.existsSync(logsDir)) {
        fs.mkdirSync(logsDir, { recursive: true });
      }
      // –ü–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø–æ –¥–∞—Ç–µ
      const dayDir = path.join(logsDir, this.getTodayFolder());
      if (!fs.existsSync(dayDir)) {
        fs.mkdirSync(dayDir, { recursive: true });
      }
      return dayDir;
    } catch (e) {
      logger.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –ª–æ–≥–æ–≤: ${e.message}`);
      return './';
    }
  }

  getTodayFolder() {
    const d = new Date();
    const yyyy = d.getFullYear();
    const mm = String(d.getMonth() + 1).padStart(2, '0');
    const dd = String(d.getDate()).padStart(2, '0');
    return `${yyyy}-${mm}-${dd}`;
  }

  openSerialLog() {
    try {
      if (!this.config.logging || this.config.logging.enableSerialCsv !== true) return;
      const dayDir = this.ensureLogsDir();
      const filePath = path.join(dayDir, 'serial.csv');
      const header = 'timestamp,raw,weight\n';
      const exists = fs.existsSync(filePath);
      this.serialLogStream = fs.createWriteStream(filePath, { flags: 'a' });
      if (!exists) {
        this.serialLogStream.write(header);
      }
      this.cleanupOldLogs();
      logger.info(`–õ–æ–≥ –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö: ${filePath}`);
    } catch (e) {
      logger.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å CSV –ª–æ–≥: ${e.message}`);
    }
  }

  closeSerialLog() {
    if (this.serialLogStream) {
      try {
        this.serialLogStream.end();
      } catch (_) {}
      this.serialLogStream = null;
    }
  }

  writeSerialCsv(raw, weight) {
    try {
      if (!this.serialLogStream) return;
      const ts = new Date().toISOString();
      const safeRaw = String(raw).replace(/"/g, '""');
      const line = `${ts},"${safeRaw}",${weight}\n`;
      this.serialLogStream.write(line);
    } catch (e) {
      // –Ω–µ —à—É–º–∏–º
    }
  }

  cleanupOldLogs() {
    try {
      const logsDir = (this.config.logging && this.config.logging.logsDir) || './logs';
      const keepDays = (this.config.logging && this.config.logging.retentionDays) || 14;
      if (!fs.existsSync(logsDir)) return;
      const entries = fs.readdirSync(logsDir, { withFileTypes: true });
      const now = Date.now();
      entries.forEach((ent) => {
        if (ent.isDirectory()) {
          const dirPath = path.join(logsDir, ent.name);
          // –æ–∂–∏–¥–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ YYYY-MM-DD
          const m = /^\d{4}-\d{2}-\d{2}$/.exec(ent.name);
          if (m) {
            const time = new Date(ent.name).getTime();
            const ageDays = (now - time) / (1000 * 60 * 60 * 24);
            if (ageDays > keepDays) {
              // —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –ø–∞–ø–∫—É
              fs.rmSync(dirPath, { recursive: true, force: true });
            }
          }
        }
      });
    } catch (_) {}
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö COM-–ø–æ—Ä—Ç–æ–≤
  static async listPorts() {
    try {
      const ports = await SerialPort.list();
      logger.info(`–ù–∞–π–¥–µ–Ω–æ ${ports.length} COM-–ø–æ—Ä—Ç–æ–≤`);
      
      const formattedPorts = ports.map(port => ({
        path: port.path,
        manufacturer: port.manufacturer || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
        serialNumber: port.serialNumber,
        vendorId: port.vendorId,
        productId: port.productId
      }));
      
      // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ—Ä—Ç—ã
      formattedPorts.forEach(port => {
        logger.info(`–ü–æ—Ä—Ç: ${port.path} - ${port.manufacturer}`);
      });
      
      return formattedPorts;
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ—Ä—Ç–æ–≤: ${error.message}`);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤, –Ω–æ –Ω–µ –ø–∞–¥–∞–µ–º
      return [];
    }
  }
}

module.exports = ScaleManager;
