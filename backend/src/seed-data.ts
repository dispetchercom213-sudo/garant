import { PrismaClient, UserRole, UserStatus, CounterpartyKind, CounterpartyType, MaterialTypeEnum, VehicleType } from '@prisma/client';
import * as bcrypt from 'bcryptjs';

const prisma = new PrismaClient();

async function seedUsers() {
  console.log('üë§ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
  
  const hashedPassword = await bcrypt.hash('dev123', 10);
  
  // –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫
  const dev = await prisma.user.upsert({
    where: { login: 'dev' },
    update: {},
    create: {
      username: 'dev',
      login: 'dev',
      password: hashedPassword,
      firstName: 'Developer',
      lastName: 'User',
      role: UserRole.DEVELOPER,
      currentRole: UserRole.DEVELOPER,
      status: UserStatus.ACTIVE,
    },
  });
  console.log('  ‚úÖ –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω (dev / dev123)');

  // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
  const admin = await prisma.user.upsert({
    where: { login: 'admin' },
    update: {},
    create: {
      username: 'admin',
      login: 'admin',
      password: hashedPassword,
      firstName: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
      lastName: '–°–∏—Å—Ç–µ–º—ã',
      role: UserRole.ADMIN,
      currentRole: UserRole.ADMIN,
      status: UserStatus.ACTIVE,
    },
  });
  console.log('  ‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω (admin / dev123)');

  // –î–∏—Ä–µ–∫—Ç–æ—Ä
  const director = await prisma.user.upsert({
    where: { login: 'director' },
    update: {},
    create: {
      username: 'director',
      login: 'director',
      password: hashedPassword,
      firstName: '–ò–≤–∞–Ω',
      lastName: '–î–∏—Ä–µ–∫—Ç–æ—Ä–æ–≤',
      role: UserRole.DIRECTOR,
      currentRole: UserRole.DIRECTOR,
      status: UserStatus.ACTIVE,
    },
  });
  console.log('  ‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω (director / dev123)');

  // –ú–µ–Ω–µ–¥–∂–µ—Ä
  const manager = await prisma.user.upsert({
    where: { login: 'manager' },
    update: {},
    create: {
      username: 'manager',
      login: 'manager',
      password: hashedPassword,
      firstName: '–ú–∞—Ä–∏—è',
      lastName: '–ú–µ–Ω–µ–¥–∂–µ—Ä–æ–≤–∞',
      role: UserRole.MANAGER,
      currentRole: UserRole.MANAGER,
      status: UserStatus.ACTIVE,
    },
  });
  console.log('  ‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–∑–¥–∞–Ω (manager / dev123)');

  // –î–∏—Å–ø–µ—Ç—á–µ—Ä
  const dispatcher = await prisma.user.upsert({
    where: { login: 'dispatcher' },
    update: {},
    create: {
      username: 'dispatcher',
      login: 'dispatcher',
      password: hashedPassword,
      firstName: '–ü–µ—Ç—Ä',
      lastName: '–î–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤',
      role: UserRole.DISPATCHER,
      currentRole: UserRole.DISPATCHER,
      status: UserStatus.ACTIVE,
    },
  });
  console.log('  ‚úÖ –î–∏—Å–ø–µ—Ç—á–µ—Ä —Å–æ–∑–¥–∞–Ω (dispatcher / dev123)');

  return { dev, admin, director, manager, dispatcher };
}

async function seedCompanies() {
  console.log('üè¢ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–π...');
  
  const company1 = await prisma.company.upsert({
    where: { bin: '123456789012' },
    update: {},
    create: {
      name: '–¢–û–û "–ì–∞—Ä–∞–Ω—Ç –ë–µ—Ç–æ–Ω"',
      bin: '123456789012',
      address: '–≥. –ê–ª–º–∞—Ç—ã, —É–ª. –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è, 10',
      phone: '+7 727 123 45 67',
      email: 'info@garantbeton.kz',
      director: '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á',
      bankName: '–ê–û "–ù–∞—Ä–æ–¥–Ω—ã–π –ë–∞–Ω–∫ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞"',
      iik: 'KZ123456789012345678',
      bik: 'HSBKKZKX',
    },
  });
  console.log('  ‚úÖ –ö–æ–º–ø–∞–Ω–∏—è "–ì–∞—Ä–∞–Ω—Ç –ë–µ—Ç–æ–Ω" —Å–æ–∑–¥–∞–Ω–∞');

  return { company1 };
}

async function seedWarehouses(companyId: number) {
  console.log('üè≠ –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫–ª–∞–¥–æ–≤...');
  
  const warehouse1 = await prisma.warehouse.upsert({
    where: { id: 1 },
    update: {},
    create: {
      name: '–ì–ª–∞–≤–Ω—ã–π —Å–∫–ª–∞–¥',
      address: '–≥. –ê–ª–º–∞—Ç—ã, —É–ª. –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è, 10',
      latitude: 43.2220,
      longitude: 76.8512,
      phone: '+7 727 123 45 67',
      companyId,
    },
  });
  console.log('  ‚úÖ –°–∫–ª–∞–¥ "–ì–ª–∞–≤–Ω—ã–π —Å–∫–ª–∞–¥" —Å–æ–∑–¥–∞–Ω');

  const warehouse2 = await prisma.warehouse.upsert({
    where: { id: 2 },
    update: {},
    create: {
      name: '–°–∫–ª–∞–¥—Å–∫–æ–π –∫–æ–º–ø–ª–µ–∫—Å ‚Ññ2',
      address: '–≥. –ê–ª–º–∞—Ç—ã, –ø—Ä. –†–∞–π—ã–º–±–µ–∫–∞, 250',
      latitude: 43.2561,
      longitude: 76.9286,
      phone: '+7 727 123 45 68',
      companyId,
    },
  });
  console.log('  ‚úÖ –°–∫–ª–∞–¥ "–°–∫–ª–∞–¥—Å–∫–æ–π –∫–æ–º–ø–ª–µ–∫—Å ‚Ññ2" —Å–æ–∑–¥–∞–Ω');

  return { warehouse1, warehouse2 };
}

async function seedMaterialTypes() {
  console.log('üì¶ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤...');
  
  const types = [
    MaterialTypeEnum.CEMENT,
    MaterialTypeEnum.SAND,
    MaterialTypeEnum.GRAVEL,
    MaterialTypeEnum.WATER,
    MaterialTypeEnum.ADDITIVE,
  ];

  for (const type of types) {
    await prisma.materialType.upsert({
      where: { name: type },
      update: {},
      create: { name: type },
    });
  }
  
  console.log('  ‚úÖ –¢–∏–ø—ã –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å–æ–∑–¥–∞–Ω—ã');
}

async function seedMaterials() {
  console.log('üß± –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤...');
  
  const cementType = await prisma.materialType.findUnique({ where: { name: MaterialTypeEnum.CEMENT } });
  const sandType = await prisma.materialType.findUnique({ where: { name: MaterialTypeEnum.SAND } });
  const gravelType = await prisma.materialType.findUnique({ where: { name: MaterialTypeEnum.GRAVEL } });
  const waterType = await prisma.materialType.findUnique({ where: { name: MaterialTypeEnum.WATER } });
  const additiveType = await prisma.materialType.findUnique({ where: { name: MaterialTypeEnum.ADDITIVE } });

  await prisma.material.upsert({
    where: { id: 1 },
    update: {},
    create: {
      name: '–¶–µ–º–µ–Ω—Ç –ú400',
      unit: '–∫–≥',
      typeId: cementType!.id,
    },
  });

  await prisma.material.upsert({
    where: { id: 2 },
    update: {},
    create: {
      name: '–ü–µ—Å–æ–∫ —Ä–µ—á–Ω–æ–π',
      unit: '–∫–≥',
      typeId: sandType!.id,
    },
  });

  await prisma.material.upsert({
    where: { id: 3 },
    update: {},
    create: {
      name: '–©–µ–±–µ–Ω—å —Ñ—Ä–∞–∫—Ü–∏—è 5-20',
      unit: '–∫–≥',
      typeId: gravelType!.id,
    },
  });

  await prisma.material.upsert({
    where: { id: 4 },
    update: {},
    create: {
      name: '–í–æ–¥–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è',
      unit: '–ª',
      typeId: waterType!.id,
    },
  });

  await prisma.material.upsert({
    where: { id: 5 },
    update: {},
    create: {
      name: '–ü–ª–∞—Å—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä',
      unit: '–ª',
      typeId: additiveType!.id,
    },
  });

  console.log('  ‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã —Å–æ–∑–¥–∞–Ω—ã');
}

async function seedConcreteMarks() {
  console.log('üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä–æ–∫ –±–µ—Ç–æ–Ω–∞...');
  
  const marks = [
    { name: '–ú100', description: '–ë–µ—Ç–æ–Ω –º–∞—Ä–∫–∏ –ú100 (–í7.5)' },
    { name: '–ú150', description: '–ë–µ—Ç–æ–Ω –º–∞—Ä–∫–∏ –ú150 (–í12.5)' },
    { name: '–ú200', description: '–ë–µ—Ç–æ–Ω –º–∞—Ä–∫–∏ –ú200 (–í15)' },
    { name: '–ú250', description: '–ë–µ—Ç–æ–Ω –º–∞—Ä–∫–∏ –ú250 (–í20)' },
    { name: '–ú300', description: '–ë–µ—Ç–æ–Ω –º–∞—Ä–∫–∏ –ú300 (–í22.5)' },
    { name: '–ú350', description: '–ë–µ—Ç–æ–Ω –º–∞—Ä–∫–∏ –ú350 (–í25)' },
    { name: '–ú400', description: '–ë–µ—Ç–æ–Ω –º–∞—Ä–∫–∏ –ú400 (–í30)' },
  ];

  for (const mark of marks) {
    await prisma.concreteMark.upsert({
      where: { name: mark.name },
      update: {},
      create: mark,
    });
  }

  console.log('  ‚úÖ –ú–∞—Ä–∫–∏ –±–µ—Ç–æ–Ω–∞ —Å–æ–∑–¥–∞–Ω—ã');
}

async function seedCounterparties() {
  console.log('üë• –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤...');
  
  await prisma.counterparty.upsert({
    where: { id: 1 },
    update: {},
    create: {
      kind: CounterpartyKind.LEGAL,
      type: CounterpartyType.CUSTOMER,
      name: '–¢–û–û "–°—Ç—Ä–æ–π–ú–æ–Ω—Ç–∞–∂"',
      binOrIin: '987654321012',
      phone: '+7 727 987 65 43',
      address: '–≥. –ê–ª–º–∞—Ç—ã, —É–ª. –°—Ç—Ä–æ–∏—Ç–µ–ª–µ–π, 5',
      representativeName: '–ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á',
      representativePhone: '+7 701 123 45 67',
    },
  });

  await prisma.counterparty.upsert({
    where: { id: 2 },
    update: {},
    create: {
      kind: CounterpartyKind.INDIVIDUAL,
      type: CounterpartyType.CUSTOMER,
      name: '–ò–ü –°–∏–¥–æ—Ä–æ–≤ –ê.–ë.',
      binOrIin: '850101301234',
      phone: '+7 702 234 56 78',
      address: '–≥. –ê–ª–º–∞—Ç—ã, –º–∫—Ä. –ê–∫—Å–∞–π-1, –¥. 10',
    },
  });

  await prisma.counterparty.upsert({
    where: { id: 3 },
    update: {},
    create: {
      kind: CounterpartyKind.LEGAL,
      type: CounterpartyType.SUPPLIER,
      name: '–¢–û–û "–¶–µ–º–µ–Ω—Ç –ü–ª—é—Å"',
      binOrIin: '111222333444',
      phone: '+7 727 111 22 33',
      address: '–≥. –ê–ª–º–∞—Ç—ã, –ø—Ä. –°—É—é–Ω–±–∞—è, 100',
      representativeName: '–ö–æ–∑–ª–æ–≤ –í–ª–∞–¥–∏–º–∏—Ä –ò–≤–∞–Ω–æ–≤–∏—á',
      representativePhone: '+7 701 111 22 33',
    },
  });

  console.log('  ‚úÖ –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã');
}

async function seedVehicles() {
  console.log('üöõ –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞...');
  
  await prisma.vehicle.upsert({
    where: { plate: '–ê123–ë–í01' },
    update: {},
    create: {
      type: VehicleType.MIXER,
      plate: '–ê123–ë–í01',
      capacity: 7,
      unit: '–º¬≥',
    },
  });

  await prisma.vehicle.upsert({
    where: { plate: '–í456–ì–î02' },
    update: {},
    create: {
      type: VehicleType.MIXER,
      plate: '–í456–ì–î02',
      capacity: 9,
      unit: '–º¬≥',
    },
  });

  await prisma.vehicle.upsert({
    where: { plate: '–î789–ï–ñ02' },
    update: {},
    create: {
      type: VehicleType.DUMP_TRUCK,
      plate: '–î789–ï–ñ02',
      capacity: 20,
      unit: '—Ç',
    },
  });

  console.log('  ‚úÖ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç —Å–æ–∑–¥–∞–Ω');
}

async function main() {
  console.log('üå± –ù–∞—á–∞–ª–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...\n');
  
  try {
    const users = await seedUsers();
    const { company1 } = await seedCompanies();
    await seedWarehouses(company1.id);
    await seedMaterialTypes();
    await seedMaterials();
    await seedConcreteMarks();
    await seedCounterparties();
    await seedVehicles();
    
    console.log('\n‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏!');
    console.log('\nüìã –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:');
    console.log('   –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: dev / dev123');
    console.log('   –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: admin / dev123');
    console.log('   –î–∏—Ä–µ–∫—Ç–æ—Ä: director / dev123');
    console.log('   –ú–µ–Ω–µ–¥–∂–µ—Ä: manager / dev123');
    console.log('   –î–∏—Å–ø–µ—Ç—á–µ—Ä: dispatcher / dev123');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

main().catch((e) => {
  console.error(e);
  process.exit(1);
});


