import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';
import { Reflector } from '@nestjs/core';
import { UserRole } from '@prisma/client';
import { ROLES_KEY } from '../decorators/roles.decorator';

@Injectable()
export class RolesGuard implements CanActivate {
  constructor(private reflector: Reflector) {}

  canActivate(context: ExecutionContext): boolean {
    const requiredRoles = this.reflector.getAllAndOverride<UserRole[]>(ROLES_KEY, [
      context.getHandler(),
      context.getClass(),
    ]);

    if (!requiredRoles) {
      console.log('üîì RolesGuard: –Ω–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ —Ä–æ–ª—è–º, –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω');
      return true;
    }

    const { user } = context.switchToHttp().getRequest();
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º currentRole –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–æ–ª–µ–π
    const userRole = user.currentRole || user.role;
    
    const hasAccess = requiredRoles.some((role) => userRole === role);
    
    console.log('üîê RolesGuard –ø—Ä–æ–≤–µ—Ä–∫–∞:', {
      requiredRoles,
      userRole,
      user: { username: user.username, role: user.role, currentRole: user.currentRole },
      hasAccess
    });
    
    return hasAccess;
  }
}



