import { PrismaClient } from '@prisma/client';
import * as bcrypt from 'bcryptjs';

const prisma = new PrismaClient();

export async function initUsers() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    const userCount = await prisma.user.count();
    
    if (userCount > 0) {
      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç (${userCount} —à—Ç.)`);
      return;
    }

    console.log('üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');

    // –°–æ–∑–¥–∞–µ–º admin
    const adminPassword = await bcrypt.hash('admin123', 10);
    await prisma.user.create({
      data: {
        login: 'admin',
        username: 'admin',
        password: adminPassword,
        role: 'ADMIN',
        currentRole: 'ADMIN',
        firstName: 'Admin',
        lastName: 'User',
        email: 'admin@garant-beton.kz',
      },
    });
    console.log('   ‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: admin (ADMIN)');

    // –°–æ–∑–¥–∞–µ–º dev
    const devPassword = await bcrypt.hash('dev123', 10);
    await prisma.user.create({
      data: {
        login: 'dev',
        username: 'dev',
        password: devPassword,
        role: 'DEVELOPER',
        currentRole: 'DEVELOPER',
        firstName: 'Developer',
        lastName: 'User',
        email: 'dev@garant-beton.kz',
      },
    });
    console.log('   ‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: dev (DEVELOPER)');

    console.log('‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    console.log('   üìß admin / admin123 (ADMIN)');
    console.log('   üìß dev / dev123 (DEVELOPER)');
    console.log('   ‚ö†Ô∏è  –í–ê–ñ–ù–û: –°–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
  } finally {
    await prisma.$disconnect();
  }
}

