import { PrismaClient, MaterialTypeEnum } from '@prisma/client';
import * as bcrypt from 'bcryptjs';

const prisma = new PrismaClient();

async function initMaterialTypes() {
  try {
    const typeNames: MaterialTypeEnum[] = [
      MaterialTypeEnum.CEMENT,
      MaterialTypeEnum.SAND,
      MaterialTypeEnum.GRAVEL,
      MaterialTypeEnum.WATER,
      MaterialTypeEnum.ADDITIVE
    ];
    
    for (const name of typeNames) {
      const existing = await prisma.materialType.findUnique({ where: { name } });
      if (!existing) {
        await prisma.materialType.create({ data: { name } });
        console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω —Ç–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–∞: ${name}`);
      }
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–ø–æ–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:', error);
  }
}

async function initBasicMaterials() {
  try {
    const cementType = await prisma.materialType.findUnique({ where: { name: MaterialTypeEnum.CEMENT } });
    const sandType = await prisma.materialType.findUnique({ where: { name: MaterialTypeEnum.SAND } });
    const gravelType = await prisma.materialType.findUnique({ where: { name: MaterialTypeEnum.GRAVEL } });

    if (cementType) {
      const existingCement = await prisma.material.findFirst({ where: { name: '–¶–µ–º–µ–Ω—Ç –ú400' } });
      if (!existingCement) {
        await prisma.material.create({
          data: { name: '–¶–µ–º–µ–Ω—Ç –ú400', unit: '–∫–≥', typeId: cementType.id }
        });
        console.log('   ‚úÖ –°–æ–∑–¥–∞–Ω –º–∞—Ç–µ—Ä–∏–∞–ª: –¶–µ–º–µ–Ω—Ç –ú400');
      }
    }

    if (sandType) {
      const existingSand = await prisma.material.findFirst({ where: { name: '–ü–µ—Å–æ–∫ —Ä–µ—á–Ω–æ–π' } });
      if (!existingSand) {
        await prisma.material.create({
          data: { name: '–ü–µ—Å–æ–∫ —Ä–µ—á–Ω–æ–π', unit: '–∫–≥', typeId: sandType.id }
        });
        console.log('   ‚úÖ –°–æ–∑–¥–∞–Ω –º–∞—Ç–µ—Ä–∏–∞–ª: –ü–µ—Å–æ–∫ —Ä–µ—á–Ω–æ–π');
      }
    }

    if (gravelType) {
      const existingGravel = await prisma.material.findFirst({ where: { name: '–©–µ–±–µ–Ω—å 5-20' } });
      if (!existingGravel) {
        await prisma.material.create({
          data: { name: '–©–µ–±–µ–Ω—å 5-20', unit: '–∫–≥', typeId: gravelType.id }
        });
        console.log('   ‚úÖ –°–æ–∑–¥–∞–Ω –º–∞—Ç–µ—Ä–∏–∞–ª: –©–µ–±–µ–Ω—å 5-20');
      }
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:', error);
  }
}

export async function initUsers() {
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∏–ø–æ–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    console.log('üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤...');
    await initMaterialTypes();
    await initBasicMaterials();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    const userCount = await prisma.user.count();
    
    if (userCount > 0) {
      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç (${userCount} —à—Ç.)`);
      return;
    }

    console.log('üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');

    // –°–æ–∑–¥–∞–µ–º admin
    const adminPassword = await bcrypt.hash('admin123', 10);
    await prisma.user.create({
      data: {
        login: 'admin',
        username: 'admin',
        password: adminPassword,
        role: 'ADMIN',
        currentRole: 'ADMIN',
        firstName: 'Admin',
        lastName: 'User',
        email: 'admin@garant-beton.kz',
      },
    });
    console.log('   ‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: admin (ADMIN)');

    // –°–æ–∑–¥–∞–µ–º dev
    const devPassword = await bcrypt.hash('dev123', 10);
    await prisma.user.create({
      data: {
        login: 'dev',
        username: 'dev',
        password: devPassword,
        role: 'DEVELOPER',
        currentRole: 'DEVELOPER',
        firstName: 'Developer',
        lastName: 'User',
        email: 'dev@garant-beton.kz',
      },
    });
    console.log('   ‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: dev (DEVELOPER)');

    console.log('‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    console.log('   üìß admin / admin123 (ADMIN)');
    console.log('   üìß dev / dev123 (DEVELOPER)');
    console.log('   ‚ö†Ô∏è  –í–ê–ñ–ù–û: –°–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞!');
  } catch (error: any) {
    // –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ User –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (P2021), –∑–Ω–∞—á–∏—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –µ—â–µ –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å
    if (error.code === 'P2021') {
      console.log('‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ User –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –º–∏–≥—Ä–∞—Ü–∏–∏ –µ—â–µ –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å');
      console.log('   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ');
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    }
  } finally {
    await prisma.$disconnect();
  }
}

