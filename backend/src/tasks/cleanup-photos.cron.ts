import { Injectable } from '@nestjs/common';
import { Cron, CronExpression } from '@nestjs/schedule';
import { CleanupPhotosService } from './cleanup-photos.service';
import * as fs from 'fs';
import * as path from 'path';

@Injectable()
export class CleanupPhotosCron {
  constructor(private readonly cleanupService: CleanupPhotosService) {}
  
  @Cron(CronExpression.EVERY_DAY_AT_3AM)
  async handleCleanup() {
    try {
      await this.cleanupService.cleanupOldPhotos();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ cron –∑–∞–¥–∞—á–µ –æ—á–∏—Å—Ç–∫–∏ —Ñ–æ—Ç–æ:', error);
    }
  }

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∞—Ä—Ö–∏–≤–æ–≤
  @Cron(CronExpression.EVERY_DAY_AT_4AM)
  async handleArchiveCleanup() {
    try {
      const backupsDir = 'uploads/backups';
      if (fs.existsSync(backupsDir)) {
        const files = fs.readdirSync(backupsDir);
        const now = Date.now();
        const weekInMs = 7 * 24 * 60 * 60 * 1000; // 7 –¥–Ω–µ–π –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        
        for (const file of files) {
          const filePath = path.join(backupsDir, file);
          const stats = fs.statSync(filePath);
          
          // –£–¥–∞–ª—è–µ–º –∞—Ä—Ö–∏–≤—ã —Å—Ç–∞—Ä—à–µ –Ω–µ–¥–µ–ª–∏
          if (now - stats.mtime.getTime() > weekInMs) {
            fs.unlinkSync(filePath);
            console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –∞—Ä—Ö–∏–≤: ${file}`);
          }
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ cron –∑–∞–¥–∞—á–µ –æ—á–∏—Å—Ç–∫–∏ –∞—Ä—Ö–∏–≤–æ–≤:', error);
    }
  }
}

