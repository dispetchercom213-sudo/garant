import { Injectable, Logger } from '@nestjs/common';
import { PrismaService } from '../common/prisma/prisma.service';
import { SettingsService } from '../settings/settings.service';
import * as fs from 'fs';
import * as path from 'path';
import archiver from 'archiver';
import * as nodemailer from 'nodemailer';

@Injectable()
export class CleanupPhotosService {
  private readonly logger = new Logger(CleanupPhotosService.name);
  
  constructor(
    private prisma: PrismaService, 
    private settings: SettingsService
  ) {}

  async cleanupOldPhotos() {
    try {
      this.logger.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö —Ñ–æ—Ç–æ...');
      
      // –§–æ—Ç–æ —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π
      const cutoff = new Date();
      cutoff.setMonth(cutoff.getMonth() - 1);
      
      const oldFixes = await this.prisma.scaleFix.findMany({ 
        where: { 
          createdAt: { lt: cutoff },
          photoPath: { not: null }
        } 
      });
      
      if (!oldFixes.length) {
        this.logger.log('‚úÖ –ù–µ—Ç —Å—Ç–∞—Ä—ã—Ö —Ñ–æ—Ç–æ –¥–ª—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è');
        return;
      }

      this.logger.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ ${oldFixes.length} —Ñ–æ—Ç–æ –¥–ª—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è`);

      // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∞—Ä—Ö–∏–≤–æ–≤
      const backupsDir = 'backups/scale-photos';
      fs.mkdirSync(backupsDir, { recursive: true });
      
      const zipPath = path.join(backupsDir, `scale_photos_${new Date().toISOString().split('T')[0]}.zip`);
      
      // –°–æ–∑–¥–∞–µ–º ZIP –∞—Ä—Ö–∏–≤
      const output = fs.createWriteStream(zipPath);
      const archive = archiver('zip', { zlib: { level: 9 } });
      
      archive.pipe(output);
      
      let archivedCount = 0;
      for (const fix of oldFixes) {
        if (fix.photoPath && fs.existsSync(fix.photoPath)) {
          const filename = `${fix.warehouseId}_${fix.type}_${fix.createdAt.toISOString().split('T')[0]}_${path.basename(fix.photoPath)}`;
          archive.file(fix.photoPath, { name: filename });
          archivedCount++;
        }
      }
      
      await archive.finalize();
      
      this.logger.log(`üì¶ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ ${archivedCount} —Ñ–æ—Ç–æ –≤ ${zipPath}`);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —Å –∞—Ä—Ö–∏–≤–æ–º
      await this.sendEmailWithAttachment(zipPath, archivedCount);

      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–æ—Ç–æ –∏ –∑–∞–ø–∏—Å–∏ –∏–∑ –±–∞–∑—ã
      let deletedFiles = 0;
      for (const fix of oldFixes) {
        if (fix.photoPath && fs.existsSync(fix.photoPath)) {
          try {
            fs.unlinkSync(fix.photoPath);
            deletedFiles++;
          } catch (error) {
            this.logger.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${fix.photoPath}:`, error);
          }
        }
      }
      
      // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      await this.prisma.scaleFix.deleteMany({ 
        where: { createdAt: { lt: cutoff } } 
      });
      
      this.logger.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${deletedFiles} —Ñ–æ—Ç–æ –∏ ${oldFixes.length} –∑–∞–ø–∏—Å–µ–π –∏–∑ –±–∞–∑—ã`);
      
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ñ–æ—Ç–æ:', error);
      throw error;
    }
  }

  private async sendEmailWithAttachment(zipPath: string, photoCount: number) {
    try {
      const emailSettings = await this.settings.getEmailSettings();
      
      if (!emailSettings.MAIL_USER || !emailSettings.MAIL_PASS || !emailSettings.MAIL_TO) {
        this.logger.warn('‚ö†Ô∏è Email –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É');
        return;
      }

      // –°–æ–∑–¥–∞–µ–º transporter
      const transporterConfig: any = {
        auth: {
          user: emailSettings.MAIL_USER,
          pass: emailSettings.MAIL_PASS,
        }
      };

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
      switch (emailSettings.MAIL_SERVICE) {
        case 'gmail':
          transporterConfig.service = 'gmail';
          break;
        case 'mail.ru':
          transporterConfig.host = 'smtp.mail.ru';
          transporterConfig.port = 587;
          transporterConfig.secure = false;
          break;
        case 'yandex':
          transporterConfig.host = 'smtp.yandex.ru';
          transporterConfig.port = 587;
          transporterConfig.secure = false;
          break;
        default:
          if (emailSettings.MAIL_HOST) {
            transporterConfig.host = emailSettings.MAIL_HOST;
            transporterConfig.port = parseInt(emailSettings.MAIL_PORT) || 587;
            transporterConfig.secure = emailSettings.MAIL_SECURE;
          } else {
            transporterConfig.service = 'gmail';
          }
      }

      const transporter = nodemailer.createTransport(transporterConfig);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      await transporter.verify();

      const mailOptions = {
        from: `"BetonAPP Reports" <${emailSettings.MAIL_USER}>`,
        to: emailSettings.MAIL_TO,
        subject: `üì¶ –ê—Ä—Ö–∏–≤ —Ñ–æ—Ç–æ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏–π (${new Date().toLocaleDateString('ru-RU')})`,
        html: `
          <h2>üì¶ –ê—Ä—Ö–∏–≤ —Ñ–æ—Ç–æ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏–π</h2>
          <p>–î–∞—Ç–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è: ${new Date().toLocaleDateString('ru-RU')}</p>
          <p>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ: ${photoCount}</p>
          <p>–í–æ –≤–ª–æ–∂–µ–Ω–∏–∏ –∞—Ä—Ö–∏–≤ —Ñ–æ—Ç–æ —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π.</p>
          <hr>
          <p><small>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç BetonAPP</small></p>
        `,
        attachments: [
          {
            filename: path.basename(zipPath),
            path: zipPath,
          }
        ],
      };

      const result = await transporter.sendMail(mailOptions);
      this.logger.log(`‚úÖ Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: ${result.messageId}`);
      
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:', error);
      throw error;
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –æ—á–∏—Å—Ç–∫–∏ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  async manualCleanup() {
    this.logger.log('üîß –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ —Ñ–æ—Ç–æ...');
    await this.cleanupOldPhotos();
  }
}

