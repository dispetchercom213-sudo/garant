// –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const { PrismaClient } = require('@prisma/client');

async function checkDatabase() {
  const prisma = new PrismaClient();
  
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = await prisma.user.findMany();
    console.log('üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –±–∞–∑–µ:', users.length);
    
    users.forEach(user => {
      console.log(`  - ${user.username} (${user.login}) - —Ä–æ–ª—å: ${user.role}`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–ª–∞–¥—ã
    const warehouses = await prisma.warehouse.findMany();
    console.log('\nüè¢ –°–∫–ª–∞–¥—ã –≤ –±–∞–∑–µ:', warehouses.length);
    
    warehouses.forEach(warehouse => {
      console.log(`  - ${warehouse.name}`);
      console.log(`    hasScales: ${warehouse.hasScales}`);
      console.log(`    scaleIpAddress: ${warehouse.scaleIpAddress}`);
      console.log(`    scaleApiKey: ${warehouse.scaleApiKey ? '***–Ω–∞—Å—Ç—Ä–æ–µ–Ω***' : '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}`);
      console.log(`    scaleComPort: ${warehouse.scaleComPort}`);
      console.log(`    scaleStatus: ${warehouse.scaleStatus}`);
      console.log('');
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

checkDatabase();
